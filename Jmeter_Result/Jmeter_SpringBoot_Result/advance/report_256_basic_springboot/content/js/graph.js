/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 20635.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 8.0], [17.3, 8.0], [17.4, 8.0], [17.5, 8.0], [17.6, 8.0], [17.7, 8.0], [17.8, 8.0], [17.9, 8.0], [18.0, 8.0], [18.1, 8.0], [18.2, 8.0], [18.3, 8.0], [18.4, 8.0], [18.5, 8.0], [18.6, 8.0], [18.7, 8.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 9.0], [23.2, 9.0], [23.3, 9.0], [23.4, 9.0], [23.5, 9.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 10.0], [24.4, 10.0], [24.5, 10.0], [24.6, 10.0], [24.7, 10.0], [24.8, 10.0], [24.9, 10.0], [25.0, 10.0], [25.1, 10.0], [25.2, 10.0], [25.3, 10.0], [25.4, 10.0], [25.5, 10.0], [25.6, 10.0], [25.7, 10.0], [25.8, 10.0], [25.9, 10.0], [26.0, 10.0], [26.1, 10.0], [26.2, 10.0], [26.3, 10.0], [26.4, 10.0], [26.5, 10.0], [26.6, 10.0], [26.7, 10.0], [26.8, 10.0], [26.9, 10.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 10.0], [28.0, 10.0], [28.1, 10.0], [28.2, 11.0], [28.3, 11.0], [28.4, 11.0], [28.5, 11.0], [28.6, 11.0], [28.7, 11.0], [28.8, 11.0], [28.9, 11.0], [29.0, 11.0], [29.1, 11.0], [29.2, 11.0], [29.3, 11.0], [29.4, 11.0], [29.5, 11.0], [29.6, 11.0], [29.7, 11.0], [29.8, 11.0], [29.9, 11.0], [30.0, 11.0], [30.1, 11.0], [30.2, 11.0], [30.3, 11.0], [30.4, 11.0], [30.5, 11.0], [30.6, 11.0], [30.7, 11.0], [30.8, 11.0], [30.9, 11.0], [31.0, 11.0], [31.1, 12.0], [31.2, 12.0], [31.3, 12.0], [31.4, 12.0], [31.5, 12.0], [31.6, 12.0], [31.7, 12.0], [31.8, 12.0], [31.9, 12.0], [32.0, 12.0], [32.1, 12.0], [32.2, 12.0], [32.3, 12.0], [32.4, 12.0], [32.5, 12.0], [32.6, 12.0], [32.7, 12.0], [32.8, 12.0], [32.9, 12.0], [33.0, 12.0], [33.1, 12.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 14.0], [34.9, 14.0], [35.0, 14.0], [35.1, 14.0], [35.2, 14.0], [35.3, 14.0], [35.4, 14.0], [35.5, 14.0], [35.6, 14.0], [35.7, 14.0], [35.8, 14.0], [35.9, 14.0], [36.0, 15.0], [36.1, 15.0], [36.2, 15.0], [36.3, 15.0], [36.4, 15.0], [36.5, 15.0], [36.6, 15.0], [36.7, 15.0], [36.8, 15.0], [36.9, 16.0], [37.0, 16.0], [37.1, 16.0], [37.2, 16.0], [37.3, 16.0], [37.4, 16.0], [37.5, 17.0], [37.6, 17.0], [37.7, 17.0], [37.8, 17.0], [37.9, 18.0], [38.0, 18.0], [38.1, 18.0], [38.2, 18.0], [38.3, 19.0], [38.4, 19.0], [38.5, 19.0], [38.6, 20.0], [38.7, 20.0], [38.8, 20.0], [38.9, 21.0], [39.0, 22.0], [39.1, 22.0], [39.2, 23.0], [39.3, 23.0], [39.4, 24.0], [39.5, 25.0], [39.6, 25.0], [39.7, 26.0], [39.8, 27.0], [39.9, 28.0], [40.0, 28.0], [40.1, 29.0], [40.2, 30.0], [40.3, 31.0], [40.4, 31.0], [40.5, 32.0], [40.6, 33.0], [40.7, 34.0], [40.8, 34.0], [40.9, 35.0], [41.0, 35.0], [41.1, 36.0], [41.2, 37.0], [41.3, 37.0], [41.4, 38.0], [41.5, 38.0], [41.6, 39.0], [41.7, 40.0], [41.8, 40.0], [41.9, 41.0], [42.0, 41.0], [42.1, 42.0], [42.2, 43.0], [42.3, 43.0], [42.4, 44.0], [42.5, 44.0], [42.6, 45.0], [42.7, 46.0], [42.8, 46.0], [42.9, 47.0], [43.0, 47.0], [43.1, 48.0], [43.2, 49.0], [43.3, 49.0], [43.4, 50.0], [43.5, 51.0], [43.6, 51.0], [43.7, 52.0], [43.8, 53.0], [43.9, 53.0], [44.0, 54.0], [44.1, 54.0], [44.2, 55.0], [44.3, 56.0], [44.4, 56.0], [44.5, 57.0], [44.6, 58.0], [44.7, 58.0], [44.8, 59.0], [44.9, 59.0], [45.0, 60.0], [45.1, 60.0], [45.2, 61.0], [45.3, 61.0], [45.4, 61.0], [45.5, 62.0], [45.6, 62.0], [45.7, 63.0], [45.8, 63.0], [45.9, 64.0], [46.0, 64.0], [46.1, 64.0], [46.2, 65.0], [46.3, 65.0], [46.4, 65.0], [46.5, 66.0], [46.6, 66.0], [46.7, 66.0], [46.8, 67.0], [46.9, 67.0], [47.0, 68.0], [47.1, 68.0], [47.2, 68.0], [47.3, 69.0], [47.4, 69.0], [47.5, 70.0], [47.6, 70.0], [47.7, 70.0], [47.8, 71.0], [47.9, 71.0], [48.0, 71.0], [48.1, 72.0], [48.2, 72.0], [48.3, 73.0], [48.4, 73.0], [48.5, 73.0], [48.6, 73.0], [48.7, 74.0], [48.8, 74.0], [48.9, 74.0], [49.0, 75.0], [49.1, 75.0], [49.2, 75.0], [49.3, 75.0], [49.4, 76.0], [49.5, 76.0], [49.6, 76.0], [49.7, 77.0], [49.8, 77.0], [49.9, 77.0], [50.0, 77.0], [50.1, 78.0], [50.2, 78.0], [50.3, 78.0], [50.4, 78.0], [50.5, 79.0], [50.6, 79.0], [50.7, 79.0], [50.8, 79.0], [50.9, 79.0], [51.0, 80.0], [51.1, 80.0], [51.2, 80.0], [51.3, 80.0], [51.4, 81.0], [51.5, 81.0], [51.6, 81.0], [51.7, 81.0], [51.8, 82.0], [51.9, 82.0], [52.0, 82.0], [52.1, 82.0], [52.2, 82.0], [52.3, 83.0], [52.4, 83.0], [52.5, 83.0], [52.6, 83.0], [52.7, 84.0], [52.8, 84.0], [52.9, 84.0], [53.0, 84.0], [53.1, 84.0], [53.2, 84.0], [53.3, 85.0], [53.4, 85.0], [53.5, 85.0], [53.6, 85.0], [53.7, 85.0], [53.8, 85.0], [53.9, 86.0], [54.0, 86.0], [54.1, 86.0], [54.2, 86.0], [54.3, 86.0], [54.4, 87.0], [54.5, 87.0], [54.6, 87.0], [54.7, 87.0], [54.8, 87.0], [54.9, 88.0], [55.0, 88.0], [55.1, 88.0], [55.2, 88.0], [55.3, 88.0], [55.4, 89.0], [55.5, 89.0], [55.6, 89.0], [55.7, 89.0], [55.8, 89.0], [55.9, 90.0], [56.0, 90.0], [56.1, 90.0], [56.2, 90.0], [56.3, 90.0], [56.4, 91.0], [56.5, 91.0], [56.6, 91.0], [56.7, 91.0], [56.8, 91.0], [56.9, 91.0], [57.0, 92.0], [57.1, 92.0], [57.2, 92.0], [57.3, 92.0], [57.4, 92.0], [57.5, 93.0], [57.6, 93.0], [57.7, 93.0], [57.8, 93.0], [57.9, 93.0], [58.0, 94.0], [58.1, 94.0], [58.2, 94.0], [58.3, 94.0], [58.4, 94.0], [58.5, 94.0], [58.6, 95.0], [58.7, 95.0], [58.8, 95.0], [58.9, 95.0], [59.0, 95.0], [59.1, 95.0], [59.2, 96.0], [59.3, 96.0], [59.4, 96.0], [59.5, 96.0], [59.6, 96.0], [59.7, 96.0], [59.8, 96.0], [59.9, 97.0], [60.0, 97.0], [60.1, 97.0], [60.2, 97.0], [60.3, 97.0], [60.4, 97.0], [60.5, 98.0], [60.6, 98.0], [60.7, 98.0], [60.8, 98.0], [60.9, 98.0], [61.0, 98.0], [61.1, 98.0], [61.2, 99.0], [61.3, 99.0], [61.4, 99.0], [61.5, 99.0], [61.6, 99.0], [61.7, 99.0], [61.8, 100.0], [61.9, 100.0], [62.0, 100.0], [62.1, 100.0], [62.2, 100.0], [62.3, 100.0], [62.4, 100.0], [62.5, 101.0], [62.6, 101.0], [62.7, 101.0], [62.8, 101.0], [62.9, 101.0], [63.0, 102.0], [63.1, 102.0], [63.2, 102.0], [63.3, 102.0], [63.4, 103.0], [63.5, 103.0], [63.6, 103.0], [63.7, 103.0], [63.8, 104.0], [63.9, 104.0], [64.0, 105.0], [64.1, 105.0], [64.2, 105.0], [64.3, 106.0], [64.4, 106.0], [64.5, 107.0], [64.6, 108.0], [64.7, 108.0], [64.8, 109.0], [64.9, 110.0], [65.0, 111.0], [65.1, 112.0], [65.2, 113.0], [65.3, 115.0], [65.4, 116.0], [65.5, 118.0], [65.6, 120.0], [65.7, 121.0], [65.8, 123.0], [65.9, 124.0], [66.0, 126.0], [66.1, 128.0], [66.2, 130.0], [66.3, 131.0], [66.4, 133.0], [66.5, 134.0], [66.6, 136.0], [66.7, 138.0], [66.8, 139.0], [66.9, 141.0], [67.0, 143.0], [67.1, 145.0], [67.2, 148.0], [67.3, 150.0], [67.4, 152.0], [67.5, 155.0], [67.6, 157.0], [67.7, 159.0], [67.8, 161.0], [67.9, 162.0], [68.0, 164.0], [68.1, 165.0], [68.2, 166.0], [68.3, 168.0], [68.4, 170.0], [68.5, 171.0], [68.6, 172.0], [68.7, 174.0], [68.8, 175.0], [68.9, 177.0], [69.0, 178.0], [69.1, 180.0], [69.2, 182.0], [69.3, 183.0], [69.4, 184.0], [69.5, 185.0], [69.6, 187.0], [69.7, 188.0], [69.8, 189.0], [69.9, 191.0], [70.0, 192.0], [70.1, 193.0], [70.2, 194.0], [70.3, 196.0], [70.4, 196.0], [70.5, 197.0], [70.6, 199.0], [70.7, 200.0], [70.8, 201.0], [70.9, 202.0], [71.0, 203.0], [71.1, 204.0], [71.2, 205.0], [71.3, 206.0], [71.4, 207.0], [71.5, 210.0], [71.6, 211.0], [71.7, 213.0], [71.8, 214.0], [71.9, 216.0], [72.0, 219.0], [72.1, 222.0], [72.2, 225.0], [72.3, 228.0], [72.4, 230.0], [72.5, 234.0], [72.6, 237.0], [72.7, 240.0], [72.8, 243.0], [72.9, 249.0], [73.0, 253.0], [73.1, 258.0], [73.2, 262.0], [73.3, 265.0], [73.4, 269.0], [73.5, 273.0], [73.6, 277.0], [73.7, 280.0], [73.8, 283.0], [73.9, 285.0], [74.0, 287.0], [74.1, 288.0], [74.2, 290.0], [74.3, 291.0], [74.4, 293.0], [74.5, 295.0], [74.6, 297.0], [74.7, 298.0], [74.8, 300.0], [74.9, 302.0], [75.0, 303.0], [75.1, 304.0], [75.2, 307.0], [75.3, 309.0], [75.4, 311.0], [75.5, 313.0], [75.6, 316.0], [75.7, 320.0], [75.8, 325.0], [75.9, 330.0], [76.0, 334.0], [76.1, 339.0], [76.2, 347.0], [76.3, 356.0], [76.4, 363.0], [76.5, 370.0], [76.6, 375.0], [76.7, 380.0], [76.8, 384.0], [76.9, 386.0], [77.0, 389.0], [77.1, 391.0], [77.2, 393.0], [77.3, 395.0], [77.4, 396.0], [77.5, 398.0], [77.6, 399.0], [77.7, 402.0], [77.8, 403.0], [77.9, 404.0], [78.0, 406.0], [78.1, 408.0], [78.2, 409.0], [78.3, 411.0], [78.4, 414.0], [78.5, 417.0], [78.6, 420.0], [78.7, 425.0], [78.8, 432.0], [78.9, 436.0], [79.0, 444.0], [79.1, 453.0], [79.2, 462.0], [79.3, 468.0], [79.4, 474.0], [79.5, 479.0], [79.6, 482.0], [79.7, 486.0], [79.8, 488.0], [79.9, 490.0], [80.0, 492.0], [80.1, 495.0], [80.2, 496.0], [80.3, 498.0], [80.4, 500.0], [80.5, 502.0], [80.6, 504.0], [80.7, 506.0], [80.8, 509.0], [80.9, 512.0], [81.0, 517.0], [81.1, 521.0], [81.2, 526.0], [81.3, 531.0], [81.4, 539.0], [81.5, 547.0], [81.6, 555.0], [81.7, 562.0], [81.8, 569.0], [81.9, 574.0], [82.0, 578.0], [82.1, 580.0], [82.2, 584.0], [82.3, 587.0], [82.4, 589.0], [82.5, 591.0], [82.6, 593.0], [82.7, 595.0], [82.8, 597.0], [82.9, 598.0], [83.0, 600.0], [83.1, 603.0], [83.2, 604.0], [83.3, 606.0], [83.4, 608.0], [83.5, 612.0], [83.6, 614.0], [83.7, 618.0], [83.8, 623.0], [83.9, 626.0], [84.0, 633.0], [84.1, 638.0], [84.2, 649.0], [84.3, 660.0], [84.4, 666.0], [84.5, 672.0], [84.6, 677.0], [84.7, 681.0], [84.8, 685.0], [84.9, 688.0], [85.0, 691.0], [85.1, 693.0], [85.2, 696.0], [85.3, 698.0], [85.4, 700.0], [85.5, 704.0], [85.6, 706.0], [85.7, 710.0], [85.8, 714.0], [85.9, 720.0], [86.0, 727.0], [86.1, 735.0], [86.2, 745.0], [86.3, 752.0], [86.4, 761.0], [86.5, 767.0], [86.6, 772.0], [86.7, 777.0], [86.8, 781.0], [86.9, 785.0], [87.0, 789.0], [87.1, 793.0], [87.2, 796.0], [87.3, 799.0], [87.4, 802.0], [87.5, 808.0], [87.6, 815.0], [87.7, 827.0], [87.8, 839.0], [87.9, 845.0], [88.0, 855.0], [88.1, 862.0], [88.2, 868.0], [88.3, 875.0], [88.4, 881.0], [88.5, 886.0], [88.6, 892.0], [88.7, 898.0], [88.8, 908.0], [88.9, 919.0], [89.0, 945.0], [89.1, 957.0], [89.2, 966.0], [89.3, 984.0], [89.4, 994.0], [89.5, 1001.0], [89.6, 1010.0], [89.7, 1020.0], [89.8, 1040.0], [89.9, 1062.0], [90.0, 1078.0], [90.1, 1088.0], [90.2, 1096.0], [90.3, 1106.0], [90.4, 1121.0], [90.5, 1139.0], [90.6, 1167.0], [90.7, 1187.0], [90.8, 1197.0], [90.9, 1207.0], [91.0, 1222.0], [91.1, 1247.0], [91.2, 1273.0], [91.3, 1285.0], [91.4, 1295.0], [91.5, 1301.0], [91.6, 1309.0], [91.7, 1325.0], [91.8, 1362.0], [91.9, 1383.0], [92.0, 1395.0], [92.1, 1404.0], [92.2, 1414.0], [92.3, 1437.0], [92.4, 1469.0], [92.5, 1482.0], [92.6, 1495.0], [92.7, 1502.0], [92.8, 1520.0], [92.9, 1559.0], [93.0, 1584.0], [93.1, 1607.0], [93.2, 1664.0], [93.3, 1686.0], [93.4, 1705.0], [93.5, 1731.0], [93.6, 1753.0], [93.7, 1767.0], [93.8, 1779.0], [93.9, 1794.0], [94.0, 1803.0], [94.1, 1818.0], [94.2, 1837.0], [94.3, 1852.0], [94.4, 1865.0], [94.5, 1882.0], [94.6, 1898.0], [94.7, 1906.0], [94.8, 1936.0], [94.9, 1957.0], [95.0, 1969.0], [95.1, 1987.0], [95.2, 1995.0], [95.3, 2000.0], [95.4, 2011.0], [95.5, 2023.0], [95.6, 2060.0], [95.7, 2078.0], [95.8, 2087.0], [95.9, 2100.0], [96.0, 2113.0], [96.1, 2170.0], [96.2, 2188.0], [96.3, 2201.0], [96.4, 2210.0], [96.5, 2247.0], [96.6, 2290.0], [96.7, 2311.0], [96.8, 2395.0], [96.9, 2447.0], [97.0, 2476.0], [97.1, 2500.0], [97.2, 2545.0], [97.3, 2576.0], [97.4, 2602.0], [97.5, 2661.0], [97.6, 2702.0], [97.7, 2816.0], [97.8, 2898.0], [97.9, 3004.0], [98.0, 3087.0], [98.1, 3151.0], [98.2, 3232.0], [98.3, 3364.0], [98.4, 3405.0], [98.5, 3467.0], [98.6, 3511.0], [98.7, 7235.0], [98.8, 9576.0], [98.9, 9953.0], [99.0, 10037.0], [99.1, 10064.0], [99.2, 10099.0], [99.3, 10138.0], [99.4, 10189.0], [99.5, 10243.0], [99.6, 10347.0], [99.7, 10426.0], [99.8, 10535.0], [99.9, 10783.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 10.0], [0.1, 12.0], [0.2, 12.0], [0.3, 12.0], [0.4, 12.0], [0.5, 12.0], [0.6, 13.0], [0.7, 13.0], [0.8, 13.0], [0.9, 13.0], [1.0, 13.0], [1.1, 13.0], [1.2, 13.0], [1.3, 13.0], [1.4, 13.0], [1.5, 13.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 13.0], [2.1, 13.0], [2.2, 13.0], [2.3, 13.0], [2.4, 13.0], [2.5, 13.0], [2.6, 13.0], [2.7, 13.0], [2.8, 13.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 14.0], [3.7, 14.0], [3.8, 14.0], [3.9, 14.0], [4.0, 14.0], [4.1, 14.0], [4.2, 14.0], [4.3, 14.0], [4.4, 14.0], [4.5, 14.0], [4.6, 14.0], [4.7, 14.0], [4.8, 14.0], [4.9, 14.0], [5.0, 14.0], [5.1, 14.0], [5.2, 14.0], [5.3, 14.0], [5.4, 14.0], [5.5, 14.0], [5.6, 14.0], [5.7, 14.0], [5.8, 14.0], [5.9, 14.0], [6.0, 14.0], [6.1, 14.0], [6.2, 14.0], [6.3, 14.0], [6.4, 14.0], [6.5, 14.0], [6.6, 14.0], [6.7, 15.0], [6.8, 15.0], [6.9, 15.0], [7.0, 15.0], [7.1, 15.0], [7.2, 15.0], [7.3, 15.0], [7.4, 15.0], [7.5, 15.0], [7.6, 15.0], [7.7, 15.0], [7.8, 15.0], [7.9, 15.0], [8.0, 15.0], [8.1, 15.0], [8.2, 15.0], [8.3, 15.0], [8.4, 15.0], [8.5, 15.0], [8.6, 15.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 15.0], [9.2, 15.0], [9.3, 15.0], [9.4, 15.0], [9.5, 15.0], [9.6, 15.0], [9.7, 15.0], [9.8, 15.0], [9.9, 15.0], [10.0, 15.0], [10.1, 15.0], [10.2, 15.0], [10.3, 15.0], [10.4, 15.0], [10.5, 15.0], [10.6, 15.0], [10.7, 15.0], [10.8, 15.0], [10.9, 15.0], [11.0, 15.0], [11.1, 16.0], [11.2, 16.0], [11.3, 16.0], [11.4, 16.0], [11.5, 16.0], [11.6, 16.0], [11.7, 16.0], [11.8, 16.0], [11.9, 16.0], [12.0, 16.0], [12.1, 16.0], [12.2, 16.0], [12.3, 16.0], [12.4, 16.0], [12.5, 16.0], [12.6, 16.0], [12.7, 16.0], [12.8, 16.0], [12.9, 16.0], [13.0, 16.0], [13.1, 16.0], [13.2, 16.0], [13.3, 16.0], [13.4, 16.0], [13.5, 16.0], [13.6, 16.0], [13.7, 16.0], [13.8, 16.0], [13.9, 16.0], [14.0, 16.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 16.0], [14.5, 16.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 16.0], [15.0, 16.0], [15.1, 16.0], [15.2, 16.0], [15.3, 16.0], [15.4, 17.0], [15.5, 17.0], [15.6, 17.0], [15.7, 17.0], [15.8, 17.0], [15.9, 17.0], [16.0, 17.0], [16.1, 17.0], [16.2, 17.0], [16.3, 17.0], [16.4, 17.0], [16.5, 17.0], [16.6, 17.0], [16.7, 17.0], [16.8, 17.0], [16.9, 17.0], [17.0, 17.0], [17.1, 17.0], [17.2, 17.0], [17.3, 17.0], [17.4, 17.0], [17.5, 17.0], [17.6, 17.0], [17.7, 17.0], [17.8, 17.0], [17.9, 17.0], [18.0, 17.0], [18.1, 17.0], [18.2, 17.0], [18.3, 17.0], [18.4, 17.0], [18.5, 17.0], [18.6, 17.0], [18.7, 17.0], [18.8, 17.0], [18.9, 17.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 18.0], [19.4, 18.0], [19.5, 18.0], [19.6, 18.0], [19.7, 18.0], [19.8, 18.0], [19.9, 18.0], [20.0, 18.0], [20.1, 18.0], [20.2, 18.0], [20.3, 18.0], [20.4, 18.0], [20.5, 18.0], [20.6, 18.0], [20.7, 18.0], [20.8, 18.0], [20.9, 18.0], [21.0, 18.0], [21.1, 18.0], [21.2, 18.0], [21.3, 18.0], [21.4, 18.0], [21.5, 18.0], [21.6, 18.0], [21.7, 18.0], [21.8, 18.0], [21.9, 18.0], [22.0, 18.0], [22.1, 18.0], [22.2, 18.0], [22.3, 18.0], [22.4, 18.0], [22.5, 19.0], [22.6, 19.0], [22.7, 19.0], [22.8, 19.0], [22.9, 19.0], [23.0, 19.0], [23.1, 19.0], [23.2, 19.0], [23.3, 19.0], [23.4, 19.0], [23.5, 19.0], [23.6, 19.0], [23.7, 19.0], [23.8, 19.0], [23.9, 19.0], [24.0, 19.0], [24.1, 19.0], [24.2, 19.0], [24.3, 19.0], [24.4, 19.0], [24.5, 19.0], [24.6, 19.0], [24.7, 19.0], [24.8, 19.0], [24.9, 20.0], [25.0, 20.0], [25.1, 20.0], [25.2, 20.0], [25.3, 20.0], [25.4, 20.0], [25.5, 20.0], [25.6, 20.0], [25.7, 20.0], [25.8, 20.0], [25.9, 20.0], [26.0, 20.0], [26.1, 20.0], [26.2, 20.0], [26.3, 20.0], [26.4, 20.0], [26.5, 20.0], [26.6, 20.0], [26.7, 21.0], [26.8, 21.0], [26.9, 21.0], [27.0, 21.0], [27.1, 21.0], [27.2, 21.0], [27.3, 21.0], [27.4, 21.0], [27.5, 21.0], [27.6, 21.0], [27.7, 21.0], [27.8, 21.0], [27.9, 21.0], [28.0, 21.0], [28.1, 21.0], [28.2, 22.0], [28.3, 22.0], [28.4, 22.0], [28.5, 22.0], [28.6, 22.0], [28.7, 22.0], [28.8, 22.0], [28.9, 22.0], [29.0, 22.0], [29.1, 22.0], [29.2, 22.0], [29.3, 23.0], [29.4, 23.0], [29.5, 23.0], [29.6, 23.0], [29.7, 23.0], [29.8, 23.0], [29.9, 23.0], [30.0, 23.0], [30.1, 23.0], [30.2, 24.0], [30.3, 24.0], [30.4, 24.0], [30.5, 24.0], [30.6, 24.0], [30.7, 24.0], [30.8, 24.0], [30.9, 25.0], [31.0, 25.0], [31.1, 25.0], [31.2, 25.0], [31.3, 25.0], [31.4, 25.0], [31.5, 26.0], [31.6, 26.0], [31.7, 26.0], [31.8, 26.0], [31.9, 26.0], [32.0, 27.0], [32.1, 27.0], [32.2, 27.0], [32.3, 27.0], [32.4, 28.0], [32.5, 28.0], [32.6, 28.0], [32.7, 28.0], [32.8, 29.0], [32.9, 29.0], [33.0, 29.0], [33.1, 30.0], [33.2, 30.0], [33.3, 30.0], [33.4, 31.0], [33.5, 31.0], [33.6, 32.0], [33.7, 32.0], [33.8, 33.0], [33.9, 33.0], [34.0, 34.0], [34.1, 34.0], [34.2, 35.0], [34.3, 35.0], [34.4, 36.0], [34.5, 36.0], [34.6, 37.0], [34.7, 37.0], [34.8, 38.0], [34.9, 38.0], [35.0, 39.0], [35.1, 39.0], [35.2, 40.0], [35.3, 41.0], [35.4, 42.0], [35.5, 42.0], [35.6, 43.0], [35.7, 44.0], [35.8, 44.0], [35.9, 45.0], [36.0, 46.0], [36.1, 46.0], [36.2, 47.0], [36.3, 47.0], [36.4, 48.0], [36.5, 48.0], [36.6, 49.0], [36.7, 50.0], [36.8, 50.0], [36.9, 51.0], [37.0, 51.0], [37.1, 52.0], [37.2, 53.0], [37.3, 53.0], [37.4, 54.0], [37.5, 55.0], [37.6, 56.0], [37.7, 56.0], [37.8, 56.0], [37.9, 57.0], [38.0, 58.0], [38.1, 58.0], [38.2, 59.0], [38.3, 59.0], [38.4, 60.0], [38.5, 61.0], [38.6, 61.0], [38.7, 62.0], [38.8, 62.0], [38.9, 63.0], [39.0, 63.0], [39.1, 64.0], [39.2, 64.0], [39.3, 65.0], [39.4, 65.0], [39.5, 66.0], [39.6, 66.0], [39.7, 67.0], [39.8, 67.0], [39.9, 68.0], [40.0, 68.0], [40.1, 69.0], [40.2, 69.0], [40.3, 70.0], [40.4, 70.0], [40.5, 71.0], [40.6, 71.0], [40.7, 72.0], [40.8, 72.0], [40.9, 72.0], [41.0, 73.0], [41.1, 73.0], [41.2, 74.0], [41.3, 74.0], [41.4, 75.0], [41.5, 75.0], [41.6, 76.0], [41.7, 76.0], [41.8, 76.0], [41.9, 77.0], [42.0, 77.0], [42.1, 77.0], [42.2, 77.0], [42.3, 78.0], [42.4, 78.0], [42.5, 79.0], [42.6, 79.0], [42.7, 79.0], [42.8, 80.0], [42.9, 80.0], [43.0, 80.0], [43.1, 81.0], [43.2, 81.0], [43.3, 81.0], [43.4, 82.0], [43.5, 82.0], [43.6, 82.0], [43.7, 83.0], [43.8, 83.0], [43.9, 83.0], [44.0, 84.0], [44.1, 84.0], [44.2, 84.0], [44.3, 84.0], [44.4, 85.0], [44.5, 85.0], [44.6, 85.0], [44.7, 85.0], [44.8, 85.0], [44.9, 86.0], [45.0, 86.0], [45.1, 86.0], [45.2, 86.0], [45.3, 87.0], [45.4, 87.0], [45.5, 87.0], [45.6, 87.0], [45.7, 87.0], [45.8, 87.0], [45.9, 88.0], [46.0, 88.0], [46.1, 88.0], [46.2, 88.0], [46.3, 88.0], [46.4, 88.0], [46.5, 89.0], [46.6, 89.0], [46.7, 89.0], [46.8, 89.0], [46.9, 89.0], [47.0, 89.0], [47.1, 89.0], [47.2, 90.0], [47.3, 90.0], [47.4, 90.0], [47.5, 90.0], [47.6, 90.0], [47.7, 90.0], [47.8, 90.0], [47.9, 90.0], [48.0, 91.0], [48.1, 91.0], [48.2, 91.0], [48.3, 91.0], [48.4, 91.0], [48.5, 91.0], [48.6, 91.0], [48.7, 91.0], [48.8, 92.0], [48.9, 92.0], [49.0, 92.0], [49.1, 92.0], [49.2, 92.0], [49.3, 92.0], [49.4, 92.0], [49.5, 92.0], [49.6, 92.0], [49.7, 93.0], [49.8, 93.0], [49.9, 93.0], [50.0, 93.0], [50.1, 93.0], [50.2, 93.0], [50.3, 93.0], [50.4, 93.0], [50.5, 93.0], [50.6, 94.0], [50.7, 94.0], [50.8, 94.0], [50.9, 94.0], [51.0, 94.0], [51.1, 94.0], [51.2, 94.0], [51.3, 95.0], [51.4, 95.0], [51.5, 95.0], [51.6, 95.0], [51.7, 95.0], [51.8, 95.0], [51.9, 95.0], [52.0, 95.0], [52.1, 96.0], [52.2, 96.0], [52.3, 96.0], [52.4, 96.0], [52.5, 96.0], [52.6, 96.0], [52.7, 96.0], [52.8, 96.0], [52.9, 96.0], [53.0, 97.0], [53.1, 97.0], [53.2, 97.0], [53.3, 97.0], [53.4, 97.0], [53.5, 97.0], [53.6, 97.0], [53.7, 97.0], [53.8, 97.0], [53.9, 97.0], [54.0, 98.0], [54.1, 98.0], [54.2, 98.0], [54.3, 98.0], [54.4, 98.0], [54.5, 98.0], [54.6, 98.0], [54.7, 98.0], [54.8, 98.0], [54.9, 99.0], [55.0, 99.0], [55.1, 99.0], [55.2, 99.0], [55.3, 99.0], [55.4, 99.0], [55.5, 99.0], [55.6, 99.0], [55.7, 99.0], [55.8, 99.0], [55.9, 99.0], [56.0, 100.0], [56.1, 100.0], [56.2, 100.0], [56.3, 100.0], [56.4, 100.0], [56.5, 100.0], [56.6, 100.0], [56.7, 100.0], [56.8, 100.0], [56.9, 100.0], [57.0, 101.0], [57.1, 101.0], [57.2, 101.0], [57.3, 101.0], [57.4, 101.0], [57.5, 101.0], [57.6, 101.0], [57.7, 101.0], [57.8, 101.0], [57.9, 102.0], [58.0, 102.0], [58.1, 102.0], [58.2, 102.0], [58.3, 102.0], [58.4, 102.0], [58.5, 102.0], [58.6, 103.0], [58.7, 103.0], [58.8, 103.0], [58.9, 103.0], [59.0, 103.0], [59.1, 103.0], [59.2, 104.0], [59.3, 104.0], [59.4, 104.0], [59.5, 104.0], [59.6, 105.0], [59.7, 105.0], [59.8, 105.0], [59.9, 105.0], [60.0, 106.0], [60.1, 106.0], [60.2, 106.0], [60.3, 107.0], [60.4, 107.0], [60.5, 108.0], [60.6, 108.0], [60.7, 108.0], [60.8, 109.0], [60.9, 109.0], [61.0, 110.0], [61.1, 111.0], [61.2, 111.0], [61.3, 112.0], [61.4, 113.0], [61.5, 114.0], [61.6, 114.0], [61.7, 115.0], [61.8, 117.0], [61.9, 118.0], [62.0, 120.0], [62.1, 121.0], [62.2, 123.0], [62.3, 124.0], [62.4, 125.0], [62.5, 127.0], [62.6, 129.0], [62.7, 130.0], [62.8, 132.0], [62.9, 134.0], [63.0, 135.0], [63.1, 137.0], [63.2, 138.0], [63.3, 139.0], [63.4, 141.0], [63.5, 143.0], [63.6, 145.0], [63.7, 147.0], [63.8, 150.0], [63.9, 152.0], [64.0, 153.0], [64.1, 155.0], [64.2, 157.0], [64.3, 159.0], [64.4, 161.0], [64.5, 163.0], [64.6, 164.0], [64.7, 166.0], [64.8, 167.0], [64.9, 169.0], [65.0, 170.0], [65.1, 172.0], [65.2, 173.0], [65.3, 175.0], [65.4, 176.0], [65.5, 177.0], [65.6, 178.0], [65.7, 179.0], [65.8, 181.0], [65.9, 182.0], [66.0, 183.0], [66.1, 184.0], [66.2, 185.0], [66.3, 186.0], [66.4, 187.0], [66.5, 188.0], [66.6, 189.0], [66.7, 190.0], [66.8, 191.0], [66.9, 191.0], [67.0, 192.0], [67.1, 193.0], [67.2, 194.0], [67.3, 194.0], [67.4, 195.0], [67.5, 196.0], [67.6, 197.0], [67.7, 198.0], [67.8, 198.0], [67.9, 199.0], [68.0, 200.0], [68.1, 200.0], [68.2, 201.0], [68.3, 202.0], [68.4, 203.0], [68.5, 204.0], [68.6, 206.0], [68.7, 207.0], [68.8, 208.0], [68.9, 209.0], [69.0, 211.0], [69.1, 213.0], [69.2, 215.0], [69.3, 218.0], [69.4, 221.0], [69.5, 224.0], [69.6, 226.0], [69.7, 229.0], [69.8, 232.0], [69.9, 235.0], [70.0, 238.0], [70.1, 242.0], [70.2, 248.0], [70.3, 252.0], [70.4, 256.0], [70.5, 259.0], [70.6, 264.0], [70.7, 268.0], [70.8, 270.0], [70.9, 274.0], [71.0, 277.0], [71.1, 280.0], [71.2, 283.0], [71.3, 285.0], [71.4, 287.0], [71.5, 288.0], [71.6, 290.0], [71.7, 291.0], [71.8, 293.0], [71.9, 294.0], [72.0, 295.0], [72.1, 297.0], [72.2, 298.0], [72.3, 299.0], [72.4, 300.0], [72.5, 301.0], [72.6, 303.0], [72.7, 304.0], [72.8, 305.0], [72.9, 307.0], [73.0, 308.0], [73.1, 310.0], [73.2, 311.0], [73.3, 314.0], [73.4, 317.0], [73.5, 321.0], [73.6, 326.0], [73.7, 332.0], [73.8, 338.0], [73.9, 345.0], [74.0, 352.0], [74.1, 357.0], [74.2, 365.0], [74.3, 372.0], [74.4, 376.0], [74.5, 381.0], [74.6, 384.0], [74.7, 387.0], [74.8, 389.0], [74.9, 391.0], [75.0, 392.0], [75.1, 394.0], [75.2, 396.0], [75.3, 398.0], [75.4, 399.0], [75.5, 400.0], [75.6, 402.0], [75.7, 402.0], [75.8, 404.0], [75.9, 405.0], [76.0, 407.0], [76.1, 408.0], [76.2, 410.0], [76.3, 412.0], [76.4, 414.0], [76.5, 417.0], [76.6, 420.0], [76.7, 425.0], [76.8, 429.0], [76.9, 434.0], [77.0, 439.0], [77.1, 449.0], [77.2, 458.0], [77.3, 466.0], [77.4, 474.0], [77.5, 479.0], [77.6, 483.0], [77.7, 485.0], [77.8, 487.0], [77.9, 491.0], [78.0, 493.0], [78.1, 494.0], [78.2, 496.0], [78.3, 498.0], [78.4, 500.0], [78.5, 502.0], [78.6, 504.0], [78.7, 507.0], [78.8, 509.0], [78.9, 512.0], [79.0, 515.0], [79.1, 520.0], [79.2, 526.0], [79.3, 533.0], [79.4, 538.0], [79.5, 544.0], [79.6, 550.0], [79.7, 557.0], [79.8, 566.0], [79.9, 572.0], [80.0, 577.0], [80.1, 581.0], [80.2, 585.0], [80.3, 589.0], [80.4, 591.0], [80.5, 593.0], [80.6, 595.0], [80.7, 597.0], [80.8, 598.0], [80.9, 600.0], [81.0, 601.0], [81.1, 603.0], [81.2, 604.0], [81.3, 606.0], [81.4, 608.0], [81.5, 609.0], [81.6, 612.0], [81.7, 615.0], [81.8, 618.0], [81.9, 621.0], [82.0, 626.0], [82.1, 632.0], [82.2, 639.0], [82.3, 648.0], [82.4, 658.0], [82.5, 666.0], [82.6, 671.0], [82.7, 676.0], [82.8, 681.0], [82.9, 685.0], [83.0, 687.0], [83.1, 690.0], [83.2, 692.0], [83.3, 694.0], [83.4, 697.0], [83.5, 699.0], [83.6, 701.0], [83.7, 703.0], [83.8, 705.0], [83.9, 707.0], [84.0, 710.0], [84.1, 714.0], [84.2, 719.0], [84.3, 726.0], [84.4, 735.0], [84.5, 743.0], [84.6, 752.0], [84.7, 759.0], [84.8, 767.0], [84.9, 774.0], [85.0, 780.0], [85.1, 784.0], [85.2, 788.0], [85.3, 791.0], [85.4, 794.0], [85.5, 796.0], [85.6, 798.0], [85.7, 801.0], [85.8, 803.0], [85.9, 806.0], [86.0, 810.0], [86.1, 815.0], [86.2, 824.0], [86.3, 837.0], [86.4, 845.0], [86.5, 854.0], [86.6, 862.0], [86.7, 867.0], [86.8, 872.0], [86.9, 880.0], [87.0, 887.0], [87.1, 893.0], [87.2, 896.0], [87.3, 902.0], [87.4, 910.0], [87.5, 926.0], [87.6, 942.0], [87.7, 956.0], [87.8, 968.0], [87.9, 981.0], [88.0, 994.0], [88.1, 1001.0], [88.2, 1006.0], [88.3, 1014.0], [88.4, 1032.0], [88.5, 1049.0], [88.6, 1066.0], [88.7, 1085.0], [88.8, 1091.0], [88.9, 1097.0], [89.0, 1102.0], [89.1, 1108.0], [89.2, 1123.0], [89.3, 1141.0], [89.4, 1163.0], [89.5, 1187.0], [89.6, 1197.0], [89.7, 1203.0], [89.8, 1211.0], [89.9, 1229.0], [90.0, 1246.0], [90.1, 1272.0], [90.2, 1285.0], [90.3, 1291.0], [90.4, 1297.0], [90.5, 1303.0], [90.6, 1311.0], [90.7, 1334.0], [90.8, 1360.0], [90.9, 1382.0], [91.0, 1392.0], [91.1, 1402.0], [91.2, 1409.0], [91.3, 1420.0], [91.4, 1449.0], [91.5, 1470.0], [91.6, 1483.0], [91.7, 1491.0], [91.8, 1497.0], [91.9, 1502.0], [92.0, 1515.0], [92.1, 1561.0], [92.2, 1587.0], [92.3, 1609.0], [92.4, 1668.0], [92.5, 1690.0], [92.6, 1705.0], [92.7, 1731.0], [92.8, 1752.0], [92.9, 1764.0], [93.0, 1777.0], [93.1, 1787.0], [93.2, 1795.0], [93.3, 1803.0], [93.4, 1812.0], [93.5, 1836.0], [93.6, 1856.0], [93.7, 1865.0], [93.8, 1873.0], [93.9, 1882.0], [94.0, 1891.0], [94.1, 1904.0], [94.2, 1925.0], [94.3, 1950.0], [94.4, 1962.0], [94.5, 1976.0], [94.6, 1989.0], [94.7, 1999.0], [94.8, 2007.0], [94.9, 2023.0], [95.0, 2051.0], [95.1, 2067.0], [95.2, 2085.0], [95.3, 2094.0], [95.4, 2101.0], [95.5, 2110.0], [95.6, 2140.0], [95.7, 2179.0], [95.8, 2194.0], [95.9, 2211.0], [96.0, 2234.0], [96.1, 2280.0], [96.2, 2298.0], [96.3, 2318.0], [96.4, 2392.0], [96.5, 2450.0], [96.6, 2470.0], [96.7, 2505.0], [96.8, 2559.0], [96.9, 2591.0], [97.0, 2612.0], [97.1, 2672.0], [97.2, 2698.0], [97.3, 2722.0], [97.4, 2875.0], [97.5, 2971.0], [97.6, 3086.0], [97.7, 3125.0], [97.8, 3185.0], [97.9, 3266.0], [98.0, 3390.0], [98.1, 3408.0], [98.2, 3483.0], [98.3, 3543.0], [98.4, 6960.0], [98.5, 7921.0], [98.6, 9640.0], [98.7, 9969.0], [98.8, 10057.0], [98.9, 10096.0], [99.0, 10130.0], [99.1, 10156.0], [99.2, 10179.0], [99.3, 10236.0], [99.4, 10308.0], [99.5, 10376.0], [99.6, 10439.0], [99.7, 10504.0], [99.8, 10651.0], [99.9, 11142.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 23460.0, "series": [{"data": [[0.0, 23460.0], [600.0, 910.0], [700.0, 744.0], [800.0, 539.0], [900.0, 283.0], [1000.0, 285.0], [1100.0, 233.0], [1200.0, 244.0], [1300.0, 214.0], [1400.0, 234.0], [1500.0, 148.0], [1600.0, 119.0], [1700.0, 230.0], [1800.0, 243.0], [1900.0, 260.0], [2000.0, 229.0], [2100.0, 147.0], [2200.0, 140.0], [2300.0, 63.0], [2400.0, 105.0], [2500.0, 111.0], [2600.0, 78.0], [2700.0, 32.0], [2800.0, 47.0], [2900.0, 34.0], [3000.0, 51.0], [3100.0, 54.0], [3300.0, 49.0], [3200.0, 28.0], [3400.0, 84.0], [3500.0, 16.0], [3700.0, 2.0], [3600.0, 1.0], [3800.0, 5.0], [3900.0, 2.0], [4000.0, 3.0], [4200.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [6700.0, 1.0], [6900.0, 1.0], [6800.0, 1.0], [7000.0, 2.0], [7100.0, 2.0], [7400.0, 5.0], [7200.0, 2.0], [7300.0, 1.0], [7500.0, 4.0], [7800.0, 1.0], [7700.0, 1.0], [8100.0, 3.0], [8000.0, 1.0], [8300.0, 1.0], [8200.0, 3.0], [8600.0, 1.0], [9200.0, 1.0], [9700.0, 7.0], [9500.0, 16.0], [9600.0, 12.0], [9400.0, 2.0], [10000.0, 103.0], [9800.0, 9.0], [9900.0, 18.0], [10100.0, 79.0], [10200.0, 57.0], [10300.0, 31.0], [10700.0, 15.0], [10500.0, 33.0], [10400.0, 38.0], [10600.0, 18.0], [10800.0, 6.0], [10900.0, 3.0], [11100.0, 1.0], [11400.0, 4.0], [11300.0, 4.0], [11600.0, 1.0], [12200.0, 1.0], [12400.0, 2.0], [12300.0, 1.0], [13000.0, 1.0], [13800.0, 1.0], [17200.0, 1.0], [17600.0, 1.0], [19000.0, 1.0], [19700.0, 1.0], [20400.0, 1.0], [19800.0, 1.0], [20300.0, 1.0], [100.0, 3378.0], [200.0, 1549.0], [300.0, 1076.0], [400.0, 1051.0], [500.0, 981.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 21336.0], [100.0, 4612.0], [200.0, 1667.0], [300.0, 1175.0], [400.0, 1121.0], [500.0, 956.0], [600.0, 1022.0], [700.0, 801.0], [800.0, 624.0], [900.0, 304.0], [1000.0, 328.0], [1100.0, 266.0], [1200.0, 305.0], [1300.0, 249.0], [1400.0, 297.0], [1500.0, 149.0], [1600.0, 116.0], [1700.0, 261.0], [1800.0, 318.0], [1900.0, 244.0], [2000.0, 249.0], [2100.0, 178.0], [2200.0, 143.0], [2300.0, 88.0], [2400.0, 93.0], [2500.0, 94.0], [2600.0, 107.0], [2700.0, 55.0], [2800.0, 30.0], [2900.0, 36.0], [3000.0, 45.0], [3100.0, 71.0], [3300.0, 46.0], [3200.0, 37.0], [3400.0, 88.0], [3500.0, 17.0], [3700.0, 3.0], [3800.0, 3.0], [3900.0, 4.0], [4000.0, 8.0], [4100.0, 1.0], [6500.0, 3.0], [6600.0, 2.0], [6900.0, 1.0], [6800.0, 4.0], [6700.0, 1.0], [7000.0, 4.0], [7100.0, 8.0], [7200.0, 5.0], [7300.0, 5.0], [7400.0, 9.0], [7500.0, 2.0], [7600.0, 2.0], [7700.0, 1.0], [7900.0, 4.0], [8000.0, 3.0], [8100.0, 4.0], [8600.0, 1.0], [8200.0, 3.0], [9100.0, 1.0], [9700.0, 3.0], [9400.0, 8.0], [9500.0, 9.0], [9600.0, 10.0], [9300.0, 3.0], [9900.0, 26.0], [9800.0, 5.0], [10000.0, 77.0], [10100.0, 116.0], [10200.0, 68.0], [10500.0, 34.0], [10700.0, 14.0], [10600.0, 19.0], [10300.0, 56.0], [10400.0, 56.0], [10800.0, 6.0], [11000.0, 1.0], [11200.0, 2.0], [10900.0, 6.0], [11100.0, 3.0], [11500.0, 2.0], [11700.0, 1.0], [11300.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [12400.0, 5.0], [12300.0, 1.0], [12700.0, 1.0], [13100.0, 1.0], [13000.0, 1.0], [13200.0, 1.0], [12800.0, 2.0], [13600.0, 1.0], [13700.0, 1.0], [16400.0, 1.0], [16700.0, 2.0], [16900.0, 1.0], [16600.0, 1.0], [16800.0, 1.0], [17500.0, 1.0], [19200.0, 1.0], [19300.0, 1.0], [20100.0, 1.0], [19600.0, 1.0], [20000.0, 1.0], [20200.0, 1.0], [20600.0, 1.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 612.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60468.0, "series": [{"data": [[0.0, 60468.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 9786.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5269.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 612.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 44.92380952380951, "minX": 1.6251141E12, "maxY": 256.0, "series": [{"data": [[1.62511428E12, 249.91994700984094], [1.62511416E12, 254.31003663816952], [1.62511422E12, 256.0]], "isOverall": false, "label": "JavaTest_peek", "isController": false}, {"data": [[1.62511428E12, 63.61606688476915]], "isOverall": false, "label": "JavaTest_cool", "isController": false}, {"data": [[1.6251141E12, 64.0], [1.62511416E12, 44.92380952380951]], "isOverall": false, "label": "JavaTest_warm", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511428E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "maxY": 17220.0, "series": [{"data": [[3.0, 17220.0], [4.0, 9968.5], [5.0, 10218.0], [6.0, 5443.0], [7.0, 9401.0], [8.0, 676.0], [13.0, 684.0], [14.0, 8562.5], [15.0, 689.0], [16.0, 5496.5], [17.0, 5538.5], [18.0, 9289.666666666666], [19.0, 608.0], [20.0, 612.0], [21.0, 9530.333333333334], [22.0, 4263.0], [23.0, 8772.999999999998], [24.0, 10976.0], [25.0, 178.0], [26.0, 2892.6666666666665], [27.0, 10.0], [28.0, 2690.0], [29.0, 10.0], [30.0, 2044.5], [32.0, 2978.6666666666665], [33.0, 17.0], [35.0, 240.66666666666669], [34.0, 95.87499999999999], [37.0, 2953.0], [36.0, 11.000000000000002], [38.0, 2083.25], [39.0, 8138.0], [40.0, 698.0], [41.0, 7582.0], [43.0, 784.0], [42.0, 2045.5], [44.0, 787.0], [46.0, 874.0], [48.0, 716.0], [49.0, 8.0], [51.0, 404.5], [52.0, 7407.000000000001], [53.0, 8.0], [54.0, 9.0], [55.0, 25.22222222222222], [56.0, 229.00000000000003], [57.0, 45.75], [59.0, 278.0], [58.0, 1712.8333333333333], [60.0, 869.0], [61.0, 52.0], [63.0, 81.0], [62.0, 81.5], [64.0, 180.96902106567546], [65.0, 10220.0], [68.0, 10262.666666666666], [75.0, 10362.0], [79.0, 85.0], [76.0, 10418.0], [80.0, 67.0], [82.0, 58.58333333333334], [83.0, 7022.333333333333], [84.0, 10.5], [86.0, 10042.0], [94.0, 10309.0], [98.0, 10142.75], [96.0, 10160.0], [103.0, 10169.0], [101.0, 10280.0], [100.0, 10160.0], [107.0, 10243.0], [111.0, 10261.5], [116.0, 11.0], [117.0, 6844.333333333333], [119.0, 28.0], [118.0, 10475.0], [120.0, 874.0769230769231], [121.0, 111.0], [123.0, 172.0], [126.0, 10510.0], [129.0, 11.0], [133.0, 6770.333333333333], [131.0, 10097.5], [136.0, 10077.0], [148.0, 10341.0], [147.0, 10256.5], [145.0, 10143.0], [155.0, 10414.0], [154.0, 10401.0], [172.0, 10011.5], [171.0, 10071.0], [169.0, 10018.0], [182.0, 898.0], [181.0, 9577.0], [180.0, 9653.0], [179.0, 9759.0], [178.0, 10089.600000000002], [191.0, 963.0], [190.0, 1122.0], [189.0, 1016.0], [188.0, 1006.0], [186.0, 955.0], [184.0, 951.0], [199.0, 1079.0], [197.0, 1044.0], [192.0, 984.0], [207.0, 953.0], [205.0, 1092.0], [204.0, 1001.0], [202.0, 996.0], [201.0, 997.0], [200.0, 1083.0], [214.0, 990.0], [212.0, 1001.0], [210.0, 1009.0], [209.0, 1006.0], [223.0, 970.0], [222.0, 966.0], [221.0, 950.0], [220.0, 946.0], [219.0, 946.0], [218.0, 901.0], [230.0, 896.0], [224.0, 969.0], [237.0, 884.0], [236.0, 886.6666666666666], [247.0, 801.0], [246.0, 167.0], [244.0, 880.0], [243.0, 48.0], [254.0, 275.0], [253.0, 277.35714285714283], [249.0, 782.0], [248.0, 8.0], [256.0, 479.89948193734415], [1.0, 16008.666666666666]], "isOverall": false, "label": "post", "isController": false}, {"data": [[209.75449732662733, 437.4959306766417]], "isOverall": false, "label": "post-Aggregated", "isController": false}, {"data": [[2.0, 15897.0], [3.0, 15259.5], [5.0, 682.0], [7.0, 695.0], [8.0, 8586.0], [9.0, 4976.5], [10.0, 4959.0], [11.0, 5840.333333333333], [12.0, 6830.0], [13.0, 3774.5], [14.0, 7069.0], [15.0, 8574.0], [16.0, 7224.0], [17.0, 8893.5], [19.0, 7390.0], [20.0, 2474.6666666666665], [21.0, 23.6], [22.0, 186.25], [23.0, 10460.333333333334], [24.0, 2648.0], [25.0, 3915.4], [26.0, 2899.0], [27.0, 1267.5714285714284], [28.0, 176.75], [29.0, 133.66666666666669], [30.0, 1004.7777777777778], [31.0, 2046.75], [32.0, 127.71428571428571], [33.0, 2091.5], [34.0, 1829.4], [35.0, 8180.0], [36.0, 761.3333333333334], [37.0, 23.666666666666668], [39.0, 381.5], [38.0, 123.0], [41.0, 7138.571428571429], [40.0, 4062.5], [43.0, 4427.5], [42.0, 35.2], [45.0, 16751.0], [44.0, 7995.0], [47.0, 6160.666666666667], [46.0, 7923.0], [49.0, 233.5], [48.0, 16687.0], [50.0, 798.0], [51.0, 32.714285714285715], [53.0, 292.8333333333333], [52.0, 8936.714285714286], [54.0, 3726.0], [55.0, 36.72727272727273], [57.0, 276.0], [56.0, 199.40000000000003], [58.0, 2738.5], [59.0, 18.333333333333332], [61.0, 4310.8], [60.0, 2054.8], [63.0, 10232.333333333334], [62.0, 85.0], [64.0, 215.22466614296874], [74.0, 10331.0], [72.0, 10310.0], [79.0, 37.5], [76.0, 10489.5], [80.0, 95.0], [82.0, 66.88888888888889], [83.0, 7943.5], [84.0, 2083.2], [88.0, 47.0], [95.0, 26.0], [94.0, 10120.0], [101.0, 6837.666666666667], [102.0, 6823.333333333333], [100.0, 10112.0], [107.0, 10284.0], [106.0, 10376.0], [104.0, 10209.0], [109.0, 26.0], [110.0, 24.0], [111.0, 10273.666666666666], [108.0, 10284.0], [113.0, 19.0], [112.0, 10174.0], [116.0, 42.0], [117.0, 108.0], [119.0, 3484.3333333333335], [118.0, 10298.0], [120.0, 621.8421052631579], [121.0, 22.0], [124.0, 212.0], [125.0, 27.333333333333332], [127.0, 25.0], [126.0, 10510.5], [132.0, 126.0], [133.0, 10031.0], [131.0, 10147.0], [136.0, 10354.0], [149.0, 10346.0], [148.0, 10254.0], [147.0, 10243.0], [146.0, 10132.0], [145.0, 10083.0], [144.0, 10248.0], [155.0, 10456.666666666666], [154.0, 10500.0], [173.0, 10048.0], [172.0, 10023.0], [178.0, 10060.0], [187.0, 1009.0], [186.0, 962.0], [184.0, 906.0], [198.0, 1059.0], [196.0, 1034.0], [195.0, 1006.0], [194.0, 1011.0], [193.0, 1009.0], [206.0, 942.0], [203.0, 1002.0], [215.0, 1002.0], [213.0, 934.0], [211.0, 1062.0], [208.0, 1004.0], [217.0, 908.0], [216.0, 993.0], [229.0, 936.0], [228.0, 904.0], [227.0, 898.0], [226.0, 896.0], [225.0, 893.0], [239.0, 886.0], [238.0, 802.0], [237.0, 887.0], [236.0, 898.0], [246.0, 264.14285714285717], [245.0, 897.0], [242.0, 886.0], [241.0, 891.0], [240.0, 809.0], [254.0, 786.0], [253.0, 91.58333333333334], [252.0, 97.0], [251.0, 16.0], [250.0, 792.0], [248.0, 275.55555555555554], [256.0, 551.0699996532944]], "isOverall": false, "label": "get", "isController": false}, {"data": [[209.36302661915727, 500.9061779501173]], "isOverall": false, "label": "get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 256.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 16318.3, "minX": 1.6251141E12, "maxY": 806781.1166666667, "series": [{"data": [[1.6251141E12, 97534.13333333333], [1.62511428E12, 437432.01666666666], [1.62511416E12, 420942.3333333333], [1.62511422E12, 806781.1166666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6251141E12, 16318.3], [1.62511428E12, 74192.11666666667], [1.62511416E12, 70539.05], [1.62511422E12, 135672.68333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511428E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 324.68008429926124, "minX": 1.6251141E12, "maxY": 744.2322113803316, "series": [{"data": [[1.6251141E12, 405.64103796251715], [1.62511428E12, 324.68008429926124], [1.62511416E12, 699.488664147586], [1.62511422E12, 367.34429244740636]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.6251141E12, 468.7432496447194], [1.62511428E12, 397.0099486857285], [1.62511416E12, 744.2322113803316], [1.62511422E12, 434.2255708287787]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511428E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 324.6489989462577, "minX": 1.6251141E12, "maxY": 744.2131345247243, "series": [{"data": [[1.6251141E12, 405.60980297933645], [1.62511428E12, 324.6489989462577], [1.62511416E12, 699.4652144921107], [1.62511422E12, 367.31336935279967]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.6251141E12, 468.7209853150167], [1.62511428E12, 396.98460571787615], [1.62511416E12, 744.2131345247243], [1.62511422E12, 434.20210502099206]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511428E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6251141E12, "maxY": 44.277119848413044, "series": [{"data": [[1.6251141E12, 0.0], [1.62511428E12, 0.0], [1.62511416E12, 0.0], [1.62511422E12, 0.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.6251141E12, 44.277119848413044], [1.62511428E12, 9.359932977275104], [1.62511416E12, 10.967547418046264], [1.62511422E12, 10.362742278714043]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511428E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.6251141E12, "maxY": 20635.0, "series": [{"data": [[1.6251141E12, 10788.0], [1.62511428E12, 20635.0], [1.62511416E12, 20456.0], [1.62511422E12, 20008.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6251141E12, 781.0], [1.62511428E12, 173.0], [1.62511416E12, 2012.3999999999996], [1.62511422E12, 804.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6251141E12, 1350.3499999999985], [1.62511428E12, 1004.9800000000032], [1.62511416E12, 10039.720000000005], [1.62511422E12, 2100.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6251141E12, 811.0], [1.62511428E12, 265.0], [1.62511416E12, 2472.0], [1.62511422E12, 1087.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6251141E12, 4.0], [1.62511428E12, 4.0], [1.62511416E12, 5.0], [1.62511422E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6251141E12, 404.0], [1.62511428E12, 21.0], [1.62511416E12, 108.0], [1.62511422E12, 89.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511428E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 14941.5, "series": [{"data": [[2.0, 14941.5], [3.0, 13866.0], [15.0, 7264.0], [24.0, 9759.0], [29.0, 8150.0], [38.0, 10942.0], [57.0, 893.0], [66.0, 1192.5], [65.0, 953.0], [68.0, 15.5], [75.0, 700.0], [72.0, 40.5], [76.0, 678.5], [80.0, 798.0], [83.0, 794.0], [82.0, 714.0], [85.0, 14.0], [91.0, 689.0], [94.0, 589.0], [95.0, 584.0], [103.0, 584.0], [101.0, 706.0], [100.0, 14.0], [106.0, 698.0], [105.0, 502.0], [114.0, 495.0], [122.0, 510.0], [127.0, 498.0], [132.0, 507.0], [133.0, 608.0], [130.0, 74.0], [134.0, 13.0], [139.0, 417.0], [150.0, 14.5], [155.0, 14.0], [175.0, 32.0], [172.0, 29.0], [176.0, 400.0], [185.0, 303.0], [192.0, 14.0], [201.0, 295.0], [206.0, 105.0], [222.0, 95.0], [216.0, 14.0], [218.0, 13.0], [239.0, 303.0], [243.0, 16.0], [244.0, 803.0], [249.0, 15.0], [260.0, 16.0], [285.0, 15.0], [303.0, 98.0], [299.0, 18.0], [297.0, 17.0], [318.0, 194.5], [309.0, 199.0], [311.0, 300.0], [327.0, 225.0], [328.0, 94.0], [345.0, 97.0], [337.0, 77.0], [336.0, 87.5], [346.0, 100.0], [340.0, 68.5], [343.0, 16.0], [364.0, 18.0], [354.0, 70.5], [367.0, 52.0], [360.0, 382.0], [355.0, 603.0], [365.0, 18.0], [369.0, 179.0], [374.0, 91.0], [368.0, 216.0], [375.0, 100.0], [382.0, 18.0], [377.0, 15.0], [389.0, 82.0], [388.0, 88.0], [384.0, 691.5], [398.0, 14.0], [408.0, 363.5], [403.0, 21.5], [412.0, 84.0], [413.0, 89.0], [406.0, 16.0], [415.0, 16.0], [425.0, 98.0], [431.0, 50.5], [426.0, 606.5], [416.0, 685.5], [424.0, 16.0], [436.0, 234.5], [442.0, 401.5], [438.0, 16.0], [445.0, 63.0], [453.0, 64.0], [459.0, 17.0], [458.0, 17.0], [452.0, 16.0], [469.0, 100.0], [470.0, 206.5], [477.0, 20.0], [468.0, 15.0], [474.0, 17.0], [491.0, 234.0], [489.0, 95.0], [493.0, 168.0], [490.0, 95.0], [480.0, 50.5], [508.0, 19.0], [502.0, 45.5], [542.0, 186.5], [537.0, 20.0], [534.0, 17.0], [522.0, 17.0], [523.0, 16.0], [566.0, 47.0], [545.0, 107.0], [563.0, 17.0], [554.0, 95.0], [553.0, 17.0], [602.0, 128.0], [604.0, 84.0], [585.0, 21.0], [584.0, 31.5], [591.0, 14.0], [623.0, 82.0], [636.0, 88.0], [608.0, 214.5], [639.0, 70.0], [634.0, 65.0], [614.0, 75.5], [645.0, 72.0], [646.0, 93.0], [640.0, 144.5], [659.0, 125.0], [661.0, 166.0], [652.0, 88.5], [648.0, 85.5], [641.0, 83.0], [699.0, 104.0], [678.0, 108.0], [675.0, 72.0], [685.0, 337.0], [684.0, 32.0], [705.0, 86.0], [713.0, 62.0], [722.0, 44.0], [714.0, 98.0], [720.0, 382.5], [748.0, 58.0], [757.0, 83.0], [764.0, 104.0], [763.0, 21.0], [768.0, 41.5], [831.0, 93.0], [987.0, 100.0], [1.0, 13204.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[553.0, 10441.0], [604.0, 10238.0], [591.0, 10387.5], [634.0, 10736.0], [614.0, 10432.0], [38.0, 10272.0], [684.0, 10473.0], [675.0, 10794.0], [42.0, 10330.0], [722.0, 10271.0], [44.0, 10282.5], [763.0, 10325.0], [768.0, 10422.5], [831.0, 10220.0], [987.0, 10142.0], [216.0, 10206.5], [244.0, 10340.0], [285.0, 10748.0], [299.0, 10146.5], [337.0, 10059.5], [364.0, 10047.5], [24.0, 10065.0], [403.0, 7195.0], [28.0, 10216.5], [469.0, 10443.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 987.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 14941.5, "series": [{"data": [[2.0, 14941.5], [3.0, 13866.0], [15.0, 7264.0], [24.0, 9759.0], [29.0, 8150.0], [38.0, 10942.0], [57.0, 893.0], [66.0, 1192.5], [65.0, 953.0], [68.0, 15.5], [75.0, 700.0], [72.0, 40.5], [76.0, 678.5], [80.0, 798.0], [83.0, 794.0], [82.0, 714.0], [85.0, 14.0], [91.0, 689.0], [94.0, 589.0], [95.0, 584.0], [103.0, 584.0], [101.0, 706.0], [100.0, 14.0], [106.0, 698.0], [105.0, 502.0], [114.0, 495.0], [122.0, 510.0], [127.0, 498.0], [132.0, 507.0], [133.0, 608.0], [130.0, 74.0], [134.0, 13.0], [139.0, 417.0], [150.0, 14.5], [155.0, 14.0], [175.0, 32.0], [172.0, 29.0], [176.0, 400.0], [185.0, 303.0], [192.0, 14.0], [201.0, 295.0], [206.0, 104.5], [222.0, 95.0], [216.0, 14.0], [218.0, 13.0], [239.0, 303.0], [243.0, 16.0], [244.0, 802.5], [249.0, 15.0], [260.0, 16.0], [285.0, 15.0], [303.0, 98.0], [299.0, 18.0], [297.0, 17.0], [318.0, 194.5], [309.0, 199.0], [311.0, 300.0], [327.0, 225.0], [328.0, 94.0], [345.0, 96.0], [337.0, 77.0], [336.0, 87.5], [346.0, 100.0], [340.0, 68.5], [343.0, 16.0], [364.0, 18.0], [354.0, 70.5], [367.0, 52.0], [360.0, 382.0], [355.0, 603.0], [365.0, 18.0], [369.0, 179.0], [374.0, 91.0], [368.0, 216.0], [375.0, 100.0], [382.0, 18.0], [377.0, 15.0], [389.0, 82.0], [388.0, 88.0], [384.0, 691.5], [398.0, 14.0], [408.0, 363.5], [403.0, 21.5], [412.0, 84.0], [413.0, 89.0], [406.0, 16.0], [415.0, 16.0], [425.0, 98.0], [431.0, 50.5], [426.0, 606.5], [416.0, 685.5], [424.0, 16.0], [436.0, 234.5], [442.0, 401.5], [438.0, 16.0], [445.0, 63.0], [453.0, 64.0], [459.0, 17.0], [458.0, 17.0], [452.0, 16.0], [469.0, 100.0], [470.0, 206.5], [477.0, 20.0], [468.0, 15.0], [474.0, 17.0], [491.0, 234.0], [489.0, 95.0], [493.0, 168.0], [490.0, 95.0], [480.0, 50.5], [508.0, 19.0], [502.0, 45.5], [542.0, 186.5], [537.0, 20.0], [534.0, 17.0], [522.0, 17.0], [523.0, 16.0], [566.0, 47.0], [545.0, 107.0], [563.0, 17.0], [554.0, 95.0], [553.0, 17.0], [602.0, 128.0], [604.0, 84.0], [585.0, 21.0], [584.0, 31.5], [591.0, 14.0], [623.0, 82.0], [636.0, 88.0], [608.0, 214.5], [639.0, 70.0], [634.0, 65.0], [614.0, 75.5], [645.0, 72.0], [646.0, 93.0], [640.0, 144.5], [659.0, 125.0], [661.0, 166.0], [652.0, 88.5], [648.0, 85.5], [641.0, 83.0], [699.0, 104.0], [678.0, 108.0], [675.0, 72.0], [685.0, 337.0], [684.0, 32.0], [705.0, 86.0], [713.0, 62.0], [722.0, 44.0], [714.0, 98.0], [720.0, 382.5], [748.0, 58.0], [757.0, 83.0], [764.0, 104.0], [763.0, 20.0], [768.0, 41.5], [831.0, 93.0], [987.0, 100.0], [1.0, 13204.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[553.0, 10441.0], [604.0, 10238.0], [591.0, 10387.5], [634.0, 10736.0], [614.0, 10432.0], [38.0, 10272.0], [684.0, 10473.0], [675.0, 10794.0], [42.0, 10330.0], [722.0, 10271.0], [44.0, 10282.5], [763.0, 10325.0], [768.0, 10422.5], [831.0, 10220.0], [987.0, 10142.0], [216.0, 10206.5], [244.0, 10339.5], [285.0, 10748.0], [299.0, 10146.5], [337.0, 10059.5], [364.0, 10047.5], [24.0, 10065.0], [403.0, 7195.0], [28.0, 10216.5], [469.0, 10443.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 987.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 70.93333333333334, "minX": 1.6251141E12, "maxY": 579.75, "series": [{"data": [[1.6251141E12, 70.93333333333334], [1.62511428E12, 313.05], [1.62511416E12, 305.18333333333334], [1.62511422E12, 579.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511428E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.7333333333333333, "minX": 1.6251141E12, "maxY": 576.7666666666667, "series": [{"data": [[1.6251141E12, 69.86666666666666], [1.62511428E12, 310.8333333333333], [1.62511416E12, 301.25], [1.62511422E12, 576.7666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62511428E12, 6.483333333333333], [1.62511416E12, 0.7333333333333333], [1.62511422E12, 2.9833333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511428E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.6251141E12, "maxY": 288.71666666666664, "series": [{"data": [[1.62511428E12, 3.566666666666667], [1.62511416E12, 0.31666666666666665], [1.62511422E12, 1.7333333333333334]], "isOverall": false, "label": "get-failure", "isController": false}, {"data": [[1.6251141E12, 35.18333333333333], [1.62511428E12, 155.58333333333334], [1.62511416E12, 151.7], [1.62511422E12, 288.05]], "isOverall": false, "label": "get-success", "isController": false}, {"data": [[1.6251141E12, 34.68333333333333], [1.62511428E12, 155.25], [1.62511416E12, 149.55], [1.62511422E12, 288.71666666666664]], "isOverall": false, "label": "post-success", "isController": false}, {"data": [[1.62511428E12, 2.9166666666666665], [1.62511416E12, 0.4166666666666667], [1.62511422E12, 1.25]], "isOverall": false, "label": "post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511428E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.7333333333333333, "minX": 1.6251141E12, "maxY": 576.7666666666667, "series": [{"data": [[1.6251141E12, 69.86666666666666], [1.62511428E12, 310.8333333333333], [1.62511416E12, 301.25], [1.62511422E12, 576.7666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62511428E12, 6.483333333333333], [1.62511416E12, 0.7333333333333333], [1.62511422E12, 2.9833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511428E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

