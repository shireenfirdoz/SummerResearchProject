/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 21434.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 8.0], [17.3, 8.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 9.0], [21.1, 9.0], [21.2, 9.0], [21.3, 9.0], [21.4, 9.0], [21.5, 9.0], [21.6, 9.0], [21.7, 9.0], [21.8, 9.0], [21.9, 9.0], [22.0, 9.0], [22.1, 9.0], [22.2, 9.0], [22.3, 9.0], [22.4, 9.0], [22.5, 9.0], [22.6, 9.0], [22.7, 9.0], [22.8, 9.0], [22.9, 9.0], [23.0, 9.0], [23.1, 10.0], [23.2, 10.0], [23.3, 10.0], [23.4, 10.0], [23.5, 10.0], [23.6, 10.0], [23.7, 10.0], [23.8, 10.0], [23.9, 10.0], [24.0, 10.0], [24.1, 10.0], [24.2, 10.0], [24.3, 10.0], [24.4, 10.0], [24.5, 10.0], [24.6, 10.0], [24.7, 10.0], [24.8, 10.0], [24.9, 10.0], [25.0, 10.0], [25.1, 10.0], [25.2, 10.0], [25.3, 10.0], [25.4, 10.0], [25.5, 10.0], [25.6, 10.0], [25.7, 10.0], [25.8, 10.0], [25.9, 10.0], [26.0, 10.0], [26.1, 10.0], [26.2, 10.0], [26.3, 10.0], [26.4, 10.0], [26.5, 10.0], [26.6, 10.0], [26.7, 10.0], [26.8, 10.0], [26.9, 10.0], [27.0, 10.0], [27.1, 10.0], [27.2, 10.0], [27.3, 10.0], [27.4, 10.0], [27.5, 10.0], [27.6, 10.0], [27.7, 10.0], [27.8, 10.0], [27.9, 11.0], [28.0, 11.0], [28.1, 11.0], [28.2, 11.0], [28.3, 11.0], [28.4, 11.0], [28.5, 11.0], [28.6, 11.0], [28.7, 11.0], [28.8, 11.0], [28.9, 11.0], [29.0, 11.0], [29.1, 11.0], [29.2, 11.0], [29.3, 11.0], [29.4, 11.0], [29.5, 11.0], [29.6, 11.0], [29.7, 11.0], [29.8, 11.0], [29.9, 11.0], [30.0, 11.0], [30.1, 11.0], [30.2, 11.0], [30.3, 11.0], [30.4, 11.0], [30.5, 11.0], [30.6, 11.0], [30.7, 11.0], [30.8, 11.0], [30.9, 11.0], [31.0, 11.0], [31.1, 11.0], [31.2, 11.0], [31.3, 11.0], [31.4, 11.0], [31.5, 12.0], [31.6, 12.0], [31.7, 12.0], [31.8, 12.0], [31.9, 12.0], [32.0, 12.0], [32.1, 12.0], [32.2, 12.0], [32.3, 12.0], [32.4, 12.0], [32.5, 12.0], [32.6, 12.0], [32.7, 12.0], [32.8, 12.0], [32.9, 12.0], [33.0, 12.0], [33.1, 12.0], [33.2, 12.0], [33.3, 12.0], [33.4, 12.0], [33.5, 12.0], [33.6, 12.0], [33.7, 12.0], [33.8, 12.0], [33.9, 12.0], [34.0, 12.0], [34.1, 12.0], [34.2, 12.0], [34.3, 12.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 13.0], [34.9, 13.0], [35.0, 13.0], [35.1, 13.0], [35.2, 13.0], [35.3, 13.0], [35.4, 13.0], [35.5, 13.0], [35.6, 13.0], [35.7, 13.0], [35.8, 13.0], [35.9, 13.0], [36.0, 13.0], [36.1, 13.0], [36.2, 13.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 14.0], [36.8, 14.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 15.0], [38.5, 15.0], [38.6, 15.0], [38.7, 15.0], [38.8, 15.0], [38.9, 15.0], [39.0, 15.0], [39.1, 15.0], [39.2, 15.0], [39.3, 15.0], [39.4, 15.0], [39.5, 15.0], [39.6, 15.0], [39.7, 16.0], [39.8, 16.0], [39.9, 16.0], [40.0, 16.0], [40.1, 16.0], [40.2, 16.0], [40.3, 16.0], [40.4, 16.0], [40.5, 16.0], [40.6, 16.0], [40.7, 17.0], [40.8, 17.0], [40.9, 17.0], [41.0, 17.0], [41.1, 17.0], [41.2, 17.0], [41.3, 17.0], [41.4, 17.0], [41.5, 17.0], [41.6, 18.0], [41.7, 18.0], [41.8, 18.0], [41.9, 18.0], [42.0, 18.0], [42.1, 18.0], [42.2, 19.0], [42.3, 19.0], [42.4, 19.0], [42.5, 19.0], [42.6, 19.0], [42.7, 20.0], [42.8, 20.0], [42.9, 20.0], [43.0, 20.0], [43.1, 21.0], [43.2, 21.0], [43.3, 21.0], [43.4, 21.0], [43.5, 22.0], [43.6, 22.0], [43.7, 22.0], [43.8, 23.0], [43.9, 23.0], [44.0, 24.0], [44.1, 24.0], [44.2, 24.0], [44.3, 25.0], [44.4, 25.0], [44.5, 26.0], [44.6, 26.0], [44.7, 27.0], [44.8, 27.0], [44.9, 28.0], [45.0, 28.0], [45.1, 29.0], [45.2, 29.0], [45.3, 30.0], [45.4, 30.0], [45.5, 31.0], [45.6, 32.0], [45.7, 32.0], [45.8, 33.0], [45.9, 33.0], [46.0, 34.0], [46.1, 34.0], [46.2, 35.0], [46.3, 35.0], [46.4, 35.0], [46.5, 36.0], [46.6, 37.0], [46.7, 37.0], [46.8, 38.0], [46.9, 38.0], [47.0, 39.0], [47.1, 39.0], [47.2, 40.0], [47.3, 40.0], [47.4, 41.0], [47.5, 42.0], [47.6, 42.0], [47.7, 43.0], [47.8, 44.0], [47.9, 44.0], [48.0, 45.0], [48.1, 46.0], [48.2, 46.0], [48.3, 47.0], [48.4, 47.0], [48.5, 48.0], [48.6, 48.0], [48.7, 49.0], [48.8, 50.0], [48.9, 50.0], [49.0, 51.0], [49.1, 52.0], [49.2, 52.0], [49.3, 53.0], [49.4, 53.0], [49.5, 54.0], [49.6, 54.0], [49.7, 55.0], [49.8, 55.0], [49.9, 56.0], [50.0, 56.0], [50.1, 57.0], [50.2, 57.0], [50.3, 58.0], [50.4, 58.0], [50.5, 59.0], [50.6, 59.0], [50.7, 60.0], [50.8, 60.0], [50.9, 60.0], [51.0, 61.0], [51.1, 61.0], [51.2, 62.0], [51.3, 62.0], [51.4, 62.0], [51.5, 63.0], [51.6, 63.0], [51.7, 63.0], [51.8, 64.0], [51.9, 64.0], [52.0, 64.0], [52.1, 65.0], [52.2, 65.0], [52.3, 65.0], [52.4, 65.0], [52.5, 66.0], [52.6, 66.0], [52.7, 66.0], [52.8, 66.0], [52.9, 67.0], [53.0, 67.0], [53.1, 67.0], [53.2, 68.0], [53.3, 68.0], [53.4, 68.0], [53.5, 68.0], [53.6, 69.0], [53.7, 69.0], [53.8, 69.0], [53.9, 70.0], [54.0, 70.0], [54.1, 70.0], [54.2, 71.0], [54.3, 71.0], [54.4, 71.0], [54.5, 71.0], [54.6, 72.0], [54.7, 72.0], [54.8, 72.0], [54.9, 73.0], [55.0, 73.0], [55.1, 73.0], [55.2, 74.0], [55.3, 74.0], [55.4, 74.0], [55.5, 74.0], [55.6, 75.0], [55.7, 75.0], [55.8, 75.0], [55.9, 75.0], [56.0, 76.0], [56.1, 76.0], [56.2, 76.0], [56.3, 77.0], [56.4, 77.0], [56.5, 77.0], [56.6, 77.0], [56.7, 78.0], [56.8, 78.0], [56.9, 78.0], [57.0, 78.0], [57.1, 79.0], [57.2, 79.0], [57.3, 79.0], [57.4, 79.0], [57.5, 79.0], [57.6, 80.0], [57.7, 80.0], [57.8, 80.0], [57.9, 80.0], [58.0, 81.0], [58.1, 81.0], [58.2, 81.0], [58.3, 81.0], [58.4, 82.0], [58.5, 82.0], [58.6, 82.0], [58.7, 82.0], [58.8, 82.0], [58.9, 83.0], [59.0, 83.0], [59.1, 83.0], [59.2, 83.0], [59.3, 83.0], [59.4, 84.0], [59.5, 84.0], [59.6, 84.0], [59.7, 84.0], [59.8, 84.0], [59.9, 85.0], [60.0, 85.0], [60.1, 85.0], [60.2, 85.0], [60.3, 85.0], [60.4, 86.0], [60.5, 86.0], [60.6, 86.0], [60.7, 86.0], [60.8, 86.0], [60.9, 87.0], [61.0, 87.0], [61.1, 87.0], [61.2, 87.0], [61.3, 87.0], [61.4, 88.0], [61.5, 88.0], [61.6, 88.0], [61.7, 88.0], [61.8, 88.0], [61.9, 88.0], [62.0, 89.0], [62.1, 89.0], [62.2, 89.0], [62.3, 89.0], [62.4, 89.0], [62.5, 90.0], [62.6, 90.0], [62.7, 90.0], [62.8, 90.0], [62.9, 90.0], [63.0, 90.0], [63.1, 91.0], [63.2, 91.0], [63.3, 91.0], [63.4, 91.0], [63.5, 91.0], [63.6, 91.0], [63.7, 92.0], [63.8, 92.0], [63.9, 92.0], [64.0, 92.0], [64.1, 92.0], [64.2, 92.0], [64.3, 93.0], [64.4, 93.0], [64.5, 93.0], [64.6, 93.0], [64.7, 93.0], [64.8, 94.0], [64.9, 94.0], [65.0, 94.0], [65.1, 94.0], [65.2, 94.0], [65.3, 94.0], [65.4, 95.0], [65.5, 95.0], [65.6, 95.0], [65.7, 95.0], [65.8, 95.0], [65.9, 96.0], [66.0, 96.0], [66.1, 96.0], [66.2, 96.0], [66.3, 96.0], [66.4, 96.0], [66.5, 97.0], [66.6, 97.0], [66.7, 97.0], [66.8, 97.0], [66.9, 97.0], [67.0, 97.0], [67.1, 98.0], [67.2, 98.0], [67.3, 98.0], [67.4, 98.0], [67.5, 98.0], [67.6, 99.0], [67.7, 99.0], [67.8, 99.0], [67.9, 99.0], [68.0, 99.0], [68.1, 100.0], [68.2, 100.0], [68.3, 100.0], [68.4, 100.0], [68.5, 100.0], [68.6, 100.0], [68.7, 101.0], [68.8, 101.0], [68.9, 101.0], [69.0, 101.0], [69.1, 102.0], [69.2, 102.0], [69.3, 103.0], [69.4, 103.0], [69.5, 103.0], [69.6, 104.0], [69.7, 104.0], [69.8, 104.0], [69.9, 105.0], [70.0, 105.0], [70.1, 106.0], [70.2, 107.0], [70.3, 108.0], [70.4, 109.0], [70.5, 110.0], [70.6, 111.0], [70.7, 112.0], [70.8, 113.0], [70.9, 115.0], [71.0, 116.0], [71.1, 118.0], [71.2, 120.0], [71.3, 122.0], [71.4, 125.0], [71.5, 127.0], [71.6, 129.0], [71.7, 131.0], [71.8, 134.0], [71.9, 136.0], [72.0, 138.0], [72.1, 141.0], [72.2, 144.0], [72.3, 148.0], [72.4, 151.0], [72.5, 154.0], [72.6, 157.0], [72.7, 159.0], [72.8, 162.0], [72.9, 164.0], [73.0, 165.0], [73.1, 168.0], [73.2, 171.0], [73.3, 173.0], [73.4, 175.0], [73.5, 177.0], [73.6, 179.0], [73.7, 181.0], [73.8, 183.0], [73.9, 185.0], [74.0, 187.0], [74.1, 189.0], [74.2, 190.0], [74.3, 193.0], [74.4, 195.0], [74.5, 197.0], [74.6, 200.0], [74.7, 202.0], [74.8, 205.0], [74.9, 208.0], [75.0, 212.0], [75.1, 218.0], [75.2, 222.0], [75.3, 228.0], [75.4, 234.0], [75.5, 242.0], [75.6, 250.0], [75.7, 257.0], [75.8, 262.0], [75.9, 267.0], [76.0, 273.0], [76.1, 277.0], [76.2, 282.0], [76.3, 285.0], [76.4, 289.0], [76.5, 292.0], [76.6, 295.0], [76.7, 298.0], [76.8, 300.0], [76.9, 303.0], [77.0, 306.0], [77.1, 310.0], [77.2, 316.0], [77.3, 321.0], [77.4, 326.0], [77.5, 334.0], [77.6, 342.0], [77.7, 352.0], [77.8, 361.0], [77.9, 367.0], [78.0, 373.0], [78.1, 378.0], [78.2, 382.0], [78.3, 385.0], [78.4, 389.0], [78.5, 392.0], [78.6, 396.0], [78.7, 399.0], [78.8, 402.0], [78.9, 405.0], [79.0, 407.0], [79.1, 411.0], [79.2, 414.0], [79.3, 419.0], [79.4, 424.0], [79.5, 430.0], [79.6, 436.0], [79.7, 448.0], [79.8, 458.0], [79.9, 466.0], [80.0, 473.0], [80.1, 479.0], [80.2, 483.0], [80.3, 486.0], [80.4, 489.0], [80.5, 491.0], [80.6, 494.0], [80.7, 495.0], [80.8, 497.0], [80.9, 500.0], [81.0, 502.0], [81.1, 505.0], [81.2, 507.0], [81.3, 510.0], [81.4, 513.0], [81.5, 516.0], [81.6, 520.0], [81.7, 525.0], [81.8, 533.0], [81.9, 545.0], [82.0, 554.0], [82.1, 563.0], [82.2, 570.0], [82.3, 576.0], [82.4, 580.0], [82.5, 584.0], [82.6, 586.0], [82.7, 589.0], [82.8, 592.0], [82.9, 595.0], [83.0, 598.0], [83.1, 601.0], [83.2, 604.0], [83.3, 608.0], [83.4, 612.0], [83.5, 618.0], [83.6, 627.0], [83.7, 638.0], [83.8, 652.0], [83.9, 662.0], [84.0, 671.0], [84.1, 679.0], [84.2, 685.0], [84.3, 691.0], [84.4, 696.0], [84.5, 700.0], [84.6, 705.0], [84.7, 710.0], [84.8, 720.0], [84.9, 732.0], [85.0, 748.0], [85.1, 757.0], [85.2, 769.0], [85.3, 779.0], [85.4, 786.0], [85.5, 793.0], [85.6, 801.0], [85.7, 806.0], [85.8, 817.0], [85.9, 849.0], [86.0, 876.0], [86.1, 891.0], [86.2, 905.0], [86.3, 924.0], [86.4, 958.0], [86.5, 982.0], [86.6, 998.0], [86.7, 1010.0], [86.8, 1037.0], [86.9, 1083.0], [87.0, 1100.0], [87.1, 1133.0], [87.2, 1187.0], [87.3, 1200.0], [87.4, 1211.0], [87.5, 1248.0], [87.6, 1283.0], [87.7, 1293.0], [87.8, 1305.0], [87.9, 1327.0], [88.0, 1370.0], [88.1, 1389.0], [88.2, 1400.0], [88.3, 1417.0], [88.4, 1478.0], [88.5, 1503.0], [88.6, 1553.0], [88.7, 1598.0], [88.8, 1624.0], [88.9, 1684.0], [89.0, 1699.0], [89.1, 1711.0], [89.2, 1736.0], [89.3, 1779.0], [89.4, 1793.0], [89.5, 1804.0], [89.6, 1826.0], [89.7, 1883.0], [89.8, 1899.0], [89.9, 1915.0], [90.0, 1970.0], [90.1, 1990.0], [90.2, 2001.0], [90.3, 2023.0], [90.4, 2076.0], [90.5, 2094.0], [90.6, 2108.0], [90.7, 2158.0], [90.8, 2183.0], [90.9, 2199.0], [91.0, 2238.0], [91.1, 2291.0], [91.2, 2335.0], [91.3, 2392.0], [91.4, 2409.0], [91.5, 2480.0], [91.6, 2528.0], [91.7, 2602.0], [91.8, 2674.0], [91.9, 2710.0], [92.0, 2761.0], [92.1, 2784.0], [92.2, 2808.0], [92.3, 2855.0], [92.4, 2876.0], [92.5, 2901.0], [92.6, 2927.0], [92.7, 2974.0], [92.8, 3040.0], [92.9, 3171.0], [93.0, 3221.0], [93.1, 3308.0], [93.2, 3387.0], [93.3, 3427.0], [93.4, 3478.0], [93.5, 3500.0], [93.6, 3516.0], [93.7, 3534.0], [93.8, 3582.0], [93.9, 3601.0], [94.0, 3621.0], [94.1, 3654.0], [94.2, 3688.0], [94.3, 3709.0], [94.4, 3750.0], [94.5, 3812.0], [94.6, 3892.0], [94.7, 3956.0], [94.8, 4003.0], [94.9, 4076.0], [95.0, 4155.0], [95.1, 4228.0], [95.2, 4302.0], [95.3, 4368.0], [95.4, 4476.0], [95.5, 4639.0], [95.6, 4772.0], [95.7, 4879.0], [95.8, 4974.0], [95.9, 5041.0], [96.0, 5095.0], [96.1, 5156.0], [96.2, 5205.0], [96.3, 5253.0], [96.4, 5279.0], [96.5, 5327.0], [96.6, 5376.0], [96.7, 5435.0], [96.8, 5463.0], [96.9, 5536.0], [97.0, 5601.0], [97.1, 5661.0], [97.2, 5705.0], [97.3, 5747.0], [97.4, 5767.0], [97.5, 5811.0], [97.6, 5844.0], [97.7, 5871.0], [97.8, 5931.0], [97.9, 6034.0], [98.0, 6273.0], [98.1, 6543.0], [98.2, 9023.0], [98.3, 9993.0], [98.4, 10033.0], [98.5, 10065.0], [98.6, 10083.0], [98.7, 10094.0], [98.8, 10106.0], [98.9, 10142.0], [99.0, 10184.0], [99.1, 10205.0], [99.2, 10256.0], [99.3, 10290.0], [99.4, 10332.0], [99.5, 10393.0], [99.6, 10429.0], [99.7, 10496.0], [99.8, 10611.0], [99.9, 11572.0], [100.0, 21434.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 10.0], [0.1, 12.0], [0.2, 12.0], [0.3, 12.0], [0.4, 12.0], [0.5, 13.0], [0.6, 13.0], [0.7, 13.0], [0.8, 13.0], [0.9, 13.0], [1.0, 13.0], [1.1, 13.0], [1.2, 13.0], [1.3, 13.0], [1.4, 13.0], [1.5, 13.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 14.0], [2.0, 14.0], [2.1, 14.0], [2.2, 14.0], [2.3, 14.0], [2.4, 14.0], [2.5, 14.0], [2.6, 14.0], [2.7, 14.0], [2.8, 14.0], [2.9, 14.0], [3.0, 14.0], [3.1, 14.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 14.0], [3.7, 14.0], [3.8, 14.0], [3.9, 14.0], [4.0, 14.0], [4.1, 14.0], [4.2, 14.0], [4.3, 15.0], [4.4, 15.0], [4.5, 15.0], [4.6, 15.0], [4.7, 15.0], [4.8, 15.0], [4.9, 15.0], [5.0, 15.0], [5.1, 15.0], [5.2, 15.0], [5.3, 15.0], [5.4, 15.0], [5.5, 15.0], [5.6, 15.0], [5.7, 15.0], [5.8, 15.0], [5.9, 15.0], [6.0, 15.0], [6.1, 15.0], [6.2, 15.0], [6.3, 15.0], [6.4, 15.0], [6.5, 15.0], [6.6, 15.0], [6.7, 15.0], [6.8, 15.0], [6.9, 15.0], [7.0, 15.0], [7.1, 15.0], [7.2, 15.0], [7.3, 15.0], [7.4, 16.0], [7.5, 16.0], [7.6, 16.0], [7.7, 16.0], [7.8, 16.0], [7.9, 16.0], [8.0, 16.0], [8.1, 16.0], [8.2, 16.0], [8.3, 16.0], [8.4, 16.0], [8.5, 16.0], [8.6, 16.0], [8.7, 16.0], [8.8, 16.0], [8.9, 16.0], [9.0, 16.0], [9.1, 16.0], [9.2, 16.0], [9.3, 16.0], [9.4, 16.0], [9.5, 16.0], [9.6, 16.0], [9.7, 16.0], [9.8, 16.0], [9.9, 16.0], [10.0, 16.0], [10.1, 16.0], [10.2, 16.0], [10.3, 16.0], [10.4, 16.0], [10.5, 16.0], [10.6, 16.0], [10.7, 16.0], [10.8, 16.0], [10.9, 16.0], [11.0, 16.0], [11.1, 17.0], [11.2, 17.0], [11.3, 17.0], [11.4, 17.0], [11.5, 17.0], [11.6, 17.0], [11.7, 17.0], [11.8, 17.0], [11.9, 17.0], [12.0, 17.0], [12.1, 17.0], [12.2, 17.0], [12.3, 17.0], [12.4, 17.0], [12.5, 17.0], [12.6, 17.0], [12.7, 17.0], [12.8, 17.0], [12.9, 17.0], [13.0, 17.0], [13.1, 17.0], [13.2, 17.0], [13.3, 17.0], [13.4, 17.0], [13.5, 17.0], [13.6, 17.0], [13.7, 17.0], [13.8, 17.0], [13.9, 17.0], [14.0, 17.0], [14.1, 17.0], [14.2, 17.0], [14.3, 17.0], [14.4, 17.0], [14.5, 17.0], [14.6, 17.0], [14.7, 17.0], [14.8, 17.0], [14.9, 18.0], [15.0, 18.0], [15.1, 18.0], [15.2, 18.0], [15.3, 18.0], [15.4, 18.0], [15.5, 18.0], [15.6, 18.0], [15.7, 18.0], [15.8, 18.0], [15.9, 18.0], [16.0, 18.0], [16.1, 18.0], [16.2, 18.0], [16.3, 18.0], [16.4, 18.0], [16.5, 18.0], [16.6, 18.0], [16.7, 18.0], [16.8, 18.0], [16.9, 18.0], [17.0, 18.0], [17.1, 18.0], [17.2, 18.0], [17.3, 18.0], [17.4, 18.0], [17.5, 18.0], [17.6, 18.0], [17.7, 18.0], [17.8, 18.0], [17.9, 18.0], [18.0, 18.0], [18.1, 18.0], [18.2, 19.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 19.0], [18.7, 19.0], [18.8, 19.0], [18.9, 19.0], [19.0, 19.0], [19.1, 19.0], [19.2, 19.0], [19.3, 19.0], [19.4, 19.0], [19.5, 19.0], [19.6, 19.0], [19.7, 19.0], [19.8, 19.0], [19.9, 19.0], [20.0, 19.0], [20.1, 19.0], [20.2, 19.0], [20.3, 19.0], [20.4, 19.0], [20.5, 19.0], [20.6, 19.0], [20.7, 19.0], [20.8, 19.0], [20.9, 19.0], [21.0, 19.0], [21.1, 19.0], [21.2, 19.0], [21.3, 19.0], [21.4, 20.0], [21.5, 20.0], [21.6, 20.0], [21.7, 20.0], [21.8, 20.0], [21.9, 20.0], [22.0, 20.0], [22.1, 20.0], [22.2, 20.0], [22.3, 20.0], [22.4, 20.0], [22.5, 20.0], [22.6, 20.0], [22.7, 20.0], [22.8, 20.0], [22.9, 20.0], [23.0, 20.0], [23.1, 20.0], [23.2, 20.0], [23.3, 20.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 20.0], [24.1, 21.0], [24.2, 21.0], [24.3, 21.0], [24.4, 21.0], [24.5, 21.0], [24.6, 21.0], [24.7, 21.0], [24.8, 21.0], [24.9, 21.0], [25.0, 21.0], [25.1, 21.0], [25.2, 21.0], [25.3, 21.0], [25.4, 21.0], [25.5, 21.0], [25.6, 21.0], [25.7, 21.0], [25.8, 21.0], [25.9, 21.0], [26.0, 21.0], [26.1, 21.0], [26.2, 21.0], [26.3, 21.0], [26.4, 22.0], [26.5, 22.0], [26.6, 22.0], [26.7, 22.0], [26.8, 22.0], [26.9, 22.0], [27.0, 22.0], [27.1, 22.0], [27.2, 22.0], [27.3, 22.0], [27.4, 22.0], [27.5, 22.0], [27.6, 22.0], [27.7, 22.0], [27.8, 22.0], [27.9, 22.0], [28.0, 22.0], [28.1, 22.0], [28.2, 22.0], [28.3, 23.0], [28.4, 23.0], [28.5, 23.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 23.0], [29.1, 23.0], [29.2, 23.0], [29.3, 23.0], [29.4, 23.0], [29.5, 23.0], [29.6, 23.0], [29.7, 23.0], [29.8, 23.0], [29.9, 23.0], [30.0, 23.0], [30.1, 24.0], [30.2, 24.0], [30.3, 24.0], [30.4, 24.0], [30.5, 24.0], [30.6, 24.0], [30.7, 24.0], [30.8, 24.0], [30.9, 24.0], [31.0, 24.0], [31.1, 24.0], [31.2, 24.0], [31.3, 24.0], [31.4, 25.0], [31.5, 25.0], [31.6, 25.0], [31.7, 25.0], [31.8, 25.0], [31.9, 25.0], [32.0, 25.0], [32.1, 25.0], [32.2, 25.0], [32.3, 25.0], [32.4, 25.0], [32.5, 25.0], [32.6, 25.0], [32.7, 26.0], [32.8, 26.0], [32.9, 26.0], [33.0, 26.0], [33.1, 26.0], [33.2, 26.0], [33.3, 26.0], [33.4, 26.0], [33.5, 26.0], [33.6, 26.0], [33.7, 27.0], [33.8, 27.0], [33.9, 27.0], [34.0, 27.0], [34.1, 27.0], [34.2, 27.0], [34.3, 27.0], [34.4, 27.0], [34.5, 28.0], [34.6, 28.0], [34.7, 28.0], [34.8, 28.0], [34.9, 28.0], [35.0, 28.0], [35.1, 28.0], [35.2, 28.0], [35.3, 29.0], [35.4, 29.0], [35.5, 29.0], [35.6, 29.0], [35.7, 29.0], [35.8, 30.0], [35.9, 30.0], [36.0, 30.0], [36.1, 30.0], [36.2, 30.0], [36.3, 30.0], [36.4, 30.0], [36.5, 31.0], [36.6, 31.0], [36.7, 31.0], [36.8, 31.0], [36.9, 31.0], [37.0, 32.0], [37.1, 32.0], [37.2, 32.0], [37.3, 32.0], [37.4, 33.0], [37.5, 33.0], [37.6, 33.0], [37.7, 33.0], [37.8, 34.0], [37.9, 34.0], [38.0, 34.0], [38.1, 34.0], [38.2, 35.0], [38.3, 35.0], [38.4, 35.0], [38.5, 36.0], [38.6, 36.0], [38.7, 36.0], [38.8, 37.0], [38.9, 37.0], [39.0, 37.0], [39.1, 38.0], [39.2, 38.0], [39.3, 38.0], [39.4, 39.0], [39.5, 39.0], [39.6, 39.0], [39.7, 40.0], [39.8, 40.0], [39.9, 41.0], [40.0, 41.0], [40.1, 42.0], [40.2, 42.0], [40.3, 43.0], [40.4, 43.0], [40.5, 44.0], [40.6, 44.0], [40.7, 45.0], [40.8, 45.0], [40.9, 46.0], [41.0, 46.0], [41.1, 47.0], [41.2, 48.0], [41.3, 48.0], [41.4, 49.0], [41.5, 49.0], [41.6, 50.0], [41.7, 51.0], [41.8, 51.0], [41.9, 52.0], [42.0, 53.0], [42.1, 53.0], [42.2, 54.0], [42.3, 54.0], [42.4, 55.0], [42.5, 56.0], [42.6, 56.0], [42.7, 57.0], [42.8, 58.0], [42.9, 58.0], [43.0, 59.0], [43.1, 59.0], [43.2, 60.0], [43.3, 60.0], [43.4, 61.0], [43.5, 61.0], [43.6, 62.0], [43.7, 62.0], [43.8, 63.0], [43.9, 63.0], [44.0, 64.0], [44.1, 64.0], [44.2, 65.0], [44.3, 65.0], [44.4, 66.0], [44.5, 66.0], [44.6, 67.0], [44.7, 67.0], [44.8, 67.0], [44.9, 68.0], [45.0, 68.0], [45.1, 69.0], [45.2, 69.0], [45.3, 70.0], [45.4, 70.0], [45.5, 71.0], [45.6, 71.0], [45.7, 71.0], [45.8, 72.0], [45.9, 72.0], [46.0, 73.0], [46.1, 73.0], [46.2, 73.0], [46.3, 74.0], [46.4, 74.0], [46.5, 75.0], [46.6, 75.0], [46.7, 75.0], [46.8, 76.0], [46.9, 76.0], [47.0, 76.0], [47.1, 77.0], [47.2, 77.0], [47.3, 77.0], [47.4, 78.0], [47.5, 78.0], [47.6, 78.0], [47.7, 79.0], [47.8, 79.0], [47.9, 79.0], [48.0, 80.0], [48.1, 80.0], [48.2, 80.0], [48.3, 80.0], [48.4, 81.0], [48.5, 81.0], [48.6, 81.0], [48.7, 81.0], [48.8, 82.0], [48.9, 82.0], [49.0, 82.0], [49.1, 82.0], [49.2, 82.0], [49.3, 83.0], [49.4, 83.0], [49.5, 83.0], [49.6, 84.0], [49.7, 84.0], [49.8, 84.0], [49.9, 84.0], [50.0, 84.0], [50.1, 85.0], [50.2, 85.0], [50.3, 85.0], [50.4, 85.0], [50.5, 85.0], [50.6, 86.0], [50.7, 86.0], [50.8, 86.0], [50.9, 86.0], [51.0, 86.0], [51.1, 86.0], [51.2, 87.0], [51.3, 87.0], [51.4, 87.0], [51.5, 87.0], [51.6, 87.0], [51.7, 87.0], [51.8, 88.0], [51.9, 88.0], [52.0, 88.0], [52.1, 88.0], [52.2, 88.0], [52.3, 88.0], [52.4, 89.0], [52.5, 89.0], [52.6, 89.0], [52.7, 89.0], [52.8, 89.0], [52.9, 89.0], [53.0, 89.0], [53.1, 90.0], [53.2, 90.0], [53.3, 90.0], [53.4, 90.0], [53.5, 90.0], [53.6, 90.0], [53.7, 90.0], [53.8, 91.0], [53.9, 91.0], [54.0, 91.0], [54.1, 91.0], [54.2, 91.0], [54.3, 91.0], [54.4, 91.0], [54.5, 91.0], [54.6, 92.0], [54.7, 92.0], [54.8, 92.0], [54.9, 92.0], [55.0, 92.0], [55.1, 92.0], [55.2, 92.0], [55.3, 92.0], [55.4, 93.0], [55.5, 93.0], [55.6, 93.0], [55.7, 93.0], [55.8, 93.0], [55.9, 93.0], [56.0, 93.0], [56.1, 93.0], [56.2, 94.0], [56.3, 94.0], [56.4, 94.0], [56.5, 94.0], [56.6, 94.0], [56.7, 94.0], [56.8, 94.0], [56.9, 94.0], [57.0, 95.0], [57.1, 95.0], [57.2, 95.0], [57.3, 95.0], [57.4, 95.0], [57.5, 95.0], [57.6, 95.0], [57.7, 96.0], [57.8, 96.0], [57.9, 96.0], [58.0, 96.0], [58.1, 96.0], [58.2, 96.0], [58.3, 96.0], [58.4, 96.0], [58.5, 96.0], [58.6, 97.0], [58.7, 97.0], [58.8, 97.0], [58.9, 97.0], [59.0, 97.0], [59.1, 97.0], [59.2, 97.0], [59.3, 97.0], [59.4, 97.0], [59.5, 97.0], [59.6, 98.0], [59.7, 98.0], [59.8, 98.0], [59.9, 98.0], [60.0, 98.0], [60.1, 98.0], [60.2, 98.0], [60.3, 98.0], [60.4, 99.0], [60.5, 99.0], [60.6, 99.0], [60.7, 99.0], [60.8, 99.0], [60.9, 99.0], [61.0, 99.0], [61.1, 99.0], [61.2, 99.0], [61.3, 99.0], [61.4, 99.0], [61.5, 100.0], [61.6, 100.0], [61.7, 100.0], [61.8, 100.0], [61.9, 100.0], [62.0, 100.0], [62.1, 100.0], [62.2, 100.0], [62.3, 100.0], [62.4, 101.0], [62.5, 101.0], [62.6, 101.0], [62.7, 101.0], [62.8, 101.0], [62.9, 101.0], [63.0, 101.0], [63.1, 101.0], [63.2, 102.0], [63.3, 102.0], [63.4, 102.0], [63.5, 102.0], [63.6, 102.0], [63.7, 102.0], [63.8, 102.0], [63.9, 103.0], [64.0, 103.0], [64.1, 103.0], [64.2, 103.0], [64.3, 103.0], [64.4, 103.0], [64.5, 104.0], [64.6, 104.0], [64.7, 104.0], [64.8, 104.0], [64.9, 104.0], [65.0, 105.0], [65.1, 105.0], [65.2, 105.0], [65.3, 105.0], [65.4, 105.0], [65.5, 106.0], [65.6, 106.0], [65.7, 106.0], [65.8, 107.0], [65.9, 107.0], [66.0, 107.0], [66.1, 108.0], [66.2, 108.0], [66.3, 108.0], [66.4, 109.0], [66.5, 109.0], [66.6, 110.0], [66.7, 110.0], [66.8, 111.0], [66.9, 112.0], [67.0, 113.0], [67.1, 113.0], [67.2, 114.0], [67.3, 116.0], [67.4, 117.0], [67.5, 118.0], [67.6, 119.0], [67.7, 121.0], [67.8, 122.0], [67.9, 124.0], [68.0, 125.0], [68.1, 127.0], [68.2, 129.0], [68.3, 131.0], [68.4, 133.0], [68.5, 135.0], [68.6, 137.0], [68.7, 140.0], [68.8, 144.0], [68.9, 147.0], [69.0, 150.0], [69.1, 153.0], [69.2, 156.0], [69.3, 159.0], [69.4, 161.0], [69.5, 164.0], [69.6, 166.0], [69.7, 168.0], [69.8, 170.0], [69.9, 172.0], [70.0, 174.0], [70.1, 176.0], [70.2, 177.0], [70.3, 178.0], [70.4, 180.0], [70.5, 182.0], [70.6, 183.0], [70.7, 185.0], [70.8, 186.0], [70.9, 187.0], [71.0, 188.0], [71.1, 189.0], [71.2, 191.0], [71.3, 192.0], [71.4, 193.0], [71.5, 194.0], [71.6, 195.0], [71.7, 197.0], [71.8, 198.0], [71.9, 199.0], [72.0, 201.0], [72.1, 202.0], [72.2, 204.0], [72.3, 206.0], [72.4, 210.0], [72.5, 215.0], [72.6, 221.0], [72.7, 228.0], [72.8, 234.0], [72.9, 240.0], [73.0, 245.0], [73.1, 251.0], [73.2, 257.0], [73.3, 263.0], [73.4, 268.0], [73.5, 273.0], [73.6, 278.0], [73.7, 282.0], [73.8, 287.0], [73.9, 290.0], [74.0, 292.0], [74.1, 295.0], [74.2, 297.0], [74.3, 300.0], [74.4, 301.0], [74.5, 303.0], [74.6, 306.0], [74.7, 308.0], [74.8, 311.0], [74.9, 316.0], [75.0, 321.0], [75.1, 326.0], [75.2, 333.0], [75.3, 342.0], [75.4, 353.0], [75.5, 362.0], [75.6, 369.0], [75.7, 376.0], [75.8, 380.0], [75.9, 384.0], [76.0, 387.0], [76.1, 391.0], [76.2, 393.0], [76.3, 396.0], [76.4, 399.0], [76.5, 401.0], [76.6, 404.0], [76.7, 406.0], [76.8, 410.0], [76.9, 413.0], [77.0, 417.0], [77.1, 422.0], [77.2, 429.0], [77.3, 435.0], [77.4, 444.0], [77.5, 455.0], [77.6, 465.0], [77.7, 471.0], [77.8, 477.0], [77.9, 481.0], [78.0, 485.0], [78.1, 487.0], [78.2, 491.0], [78.3, 493.0], [78.4, 495.0], [78.5, 497.0], [78.6, 499.0], [78.7, 501.0], [78.8, 503.0], [78.9, 505.0], [79.0, 508.0], [79.1, 510.0], [79.2, 512.0], [79.3, 515.0], [79.4, 518.0], [79.5, 522.0], [79.6, 527.0], [79.7, 534.0], [79.8, 545.0], [79.9, 556.0], [80.0, 565.0], [80.1, 572.0], [80.2, 577.0], [80.3, 581.0], [80.4, 584.0], [80.5, 586.0], [80.6, 589.0], [80.7, 591.0], [80.8, 594.0], [80.9, 596.0], [81.0, 598.0], [81.1, 600.0], [81.2, 601.0], [81.3, 603.0], [81.4, 606.0], [81.5, 608.0], [81.6, 611.0], [81.7, 615.0], [81.8, 620.0], [81.9, 628.0], [82.0, 638.0], [82.1, 654.0], [82.2, 664.0], [82.3, 671.0], [82.4, 677.0], [82.5, 683.0], [82.6, 688.0], [82.7, 692.0], [82.8, 695.0], [82.9, 698.0], [83.0, 701.0], [83.1, 704.0], [83.2, 708.0], [83.3, 715.0], [83.4, 722.0], [83.5, 736.0], [83.6, 754.0], [83.7, 764.0], [83.8, 773.0], [83.9, 782.0], [84.0, 787.0], [84.1, 792.0], [84.2, 798.0], [84.3, 803.0], [84.4, 810.0], [84.5, 820.0], [84.6, 846.0], [84.7, 876.0], [84.8, 889.0], [84.9, 898.0], [85.0, 908.0], [85.1, 921.0], [85.2, 947.0], [85.3, 978.0], [85.4, 989.0], [85.5, 1002.0], [85.6, 1020.0], [85.7, 1059.0], [85.8, 1092.0], [85.9, 1110.0], [86.0, 1160.0], [86.1, 1192.0], [86.2, 1204.0], [86.3, 1214.0], [86.4, 1241.0], [86.5, 1273.0], [86.6, 1286.0], [86.7, 1296.0], [86.8, 1306.0], [86.9, 1320.0], [87.0, 1346.0], [87.1, 1375.0], [87.2, 1394.0], [87.3, 1404.0], [87.4, 1424.0], [87.5, 1475.0], [87.6, 1497.0], [87.7, 1510.0], [87.8, 1585.0], [87.9, 1611.0], [88.0, 1682.0], [88.1, 1704.0], [88.2, 1720.0], [88.3, 1772.0], [88.4, 1791.0], [88.5, 1807.0], [88.6, 1856.0], [88.7, 1884.0], [88.8, 1904.0], [88.9, 1945.0], [89.0, 1980.0], [89.1, 1996.0], [89.2, 2006.0], [89.3, 2026.0], [89.4, 2067.0], [89.5, 2089.0], [89.6, 2101.0], [89.7, 2109.0], [89.8, 2165.0], [89.9, 2189.0], [90.0, 2206.0], [90.1, 2255.0], [90.2, 2300.0], [90.3, 2355.0], [90.4, 2394.0], [90.5, 2404.0], [90.6, 2422.0], [90.7, 2485.0], [90.8, 2517.0], [90.9, 2595.0], [91.0, 2655.0], [91.1, 2696.0], [91.2, 2734.0], [91.3, 2777.0], [91.4, 2810.0], [91.5, 2860.0], [91.6, 2886.0], [91.7, 2914.0], [91.8, 2952.0], [91.9, 2995.0], [92.0, 3066.0], [92.1, 3166.0], [92.2, 3212.0], [92.3, 3297.0], [92.4, 3390.0], [92.5, 3438.0], [92.6, 3484.0], [92.7, 3503.0], [92.8, 3526.0], [92.9, 3565.0], [93.0, 3590.0], [93.1, 3602.0], [93.2, 3620.0], [93.3, 3663.0], [93.4, 3694.0], [93.5, 3706.0], [93.6, 3734.0], [93.7, 3785.0], [93.8, 3835.0], [93.9, 3890.0], [94.0, 3951.0], [94.1, 3999.0], [94.2, 4057.0], [94.3, 4117.0], [94.4, 4180.0], [94.5, 4220.0], [94.6, 4277.0], [94.7, 4348.0], [94.8, 4436.0], [94.9, 4514.0], [95.0, 4662.0], [95.1, 4812.0], [95.2, 4879.0], [95.3, 4958.0], [95.4, 5014.0], [95.5, 5066.0], [95.6, 5101.0], [95.7, 5153.0], [95.8, 5200.0], [95.9, 5250.0], [96.0, 5276.0], [96.1, 5301.0], [96.2, 5352.0], [96.3, 5369.0], [96.4, 5405.0], [96.5, 5454.0], [96.6, 5466.0], [96.7, 5538.0], [96.8, 5567.0], [96.9, 5654.0], [97.0, 5690.0], [97.1, 5746.0], [97.2, 5765.0], [97.3, 5797.0], [97.4, 5851.0], [97.5, 5861.0], [97.6, 5883.0], [97.7, 5936.0], [97.8, 5958.0], [97.9, 6059.0], [98.0, 6354.0], [98.1, 6638.0], [98.2, 8903.0], [98.3, 9839.0], [98.4, 10042.0], [98.5, 10075.0], [98.6, 10095.0], [98.7, 10105.0], [98.8, 10134.0], [98.9, 10167.0], [99.0, 10192.0], [99.1, 10219.0], [99.2, 10263.0], [99.3, 10295.0], [99.4, 10344.0], [99.5, 10394.0], [99.6, 10448.0], [99.7, 10513.0], [99.8, 10587.0], [99.9, 11088.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 33338.0, "series": [{"data": [[0.0, 33338.0], [100.0, 3192.0], [200.0, 1082.0], [300.0, 946.0], [400.0, 1066.0], [500.0, 1048.0], [600.0, 710.0], [700.0, 535.0], [800.0, 288.0], [900.0, 218.0], [1000.0, 190.0], [1100.0, 141.0], [1200.0, 219.0], [1300.0, 225.0], [1400.0, 148.0], [1500.0, 106.0], [1600.0, 146.0], [1700.0, 225.0], [1800.0, 162.0], [1900.0, 185.0], [2000.0, 182.0], [2100.0, 172.0], [2200.0, 109.0], [2300.0, 107.0], [2400.0, 95.0], [2500.0, 74.0], [2600.0, 96.0], [2700.0, 146.0], [2800.0, 154.0], [2900.0, 131.0], [3000.0, 46.0], [3100.0, 44.0], [3300.0, 81.0], [3200.0, 64.0], [3400.0, 125.0], [3500.0, 190.0], [3600.0, 181.0], [3700.0, 112.0], [3800.0, 66.0], [3900.0, 83.0], [4000.0, 68.0], [4300.0, 67.0], [4200.0, 70.0], [4100.0, 62.0], [4600.0, 29.0], [4500.0, 32.0], [4400.0, 42.0], [4800.0, 48.0], [4700.0, 40.0], [5000.0, 88.0], [5100.0, 85.0], [4900.0, 56.0], [5200.0, 125.0], [5300.0, 106.0], [5600.0, 94.0], [5400.0, 94.0], [5500.0, 70.0], [5700.0, 140.0], [5800.0, 142.0], [5900.0, 59.0], [6000.0, 29.0], [6100.0, 16.0], [6200.0, 16.0], [6300.0, 20.0], [6400.0, 21.0], [6500.0, 10.0], [6600.0, 21.0], [6700.0, 4.0], [7200.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [8400.0, 1.0], [8600.0, 4.0], [9200.0, 5.0], [9000.0, 8.0], [8800.0, 1.0], [8900.0, 6.0], [9100.0, 5.0], [9600.0, 8.0], [9700.0, 3.0], [9400.0, 4.0], [9500.0, 3.0], [9300.0, 5.0], [10000.0, 217.0], [10200.0, 128.0], [10100.0, 162.0], [9900.0, 9.0], [9800.0, 4.0], [10600.0, 19.0], [10500.0, 39.0], [10300.0, 89.0], [10400.0, 92.0], [10700.0, 6.0], [11000.0, 5.0], [11100.0, 3.0], [10800.0, 13.0], [10900.0, 1.0], [11200.0, 1.0], [11400.0, 2.0], [11600.0, 3.0], [11500.0, 3.0], [11700.0, 6.0], [11300.0, 3.0], [12200.0, 2.0], [11900.0, 3.0], [11800.0, 1.0], [12100.0, 1.0], [12600.0, 1.0], [12500.0, 1.0], [12400.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [14200.0, 1.0], [14500.0, 1.0], [14600.0, 2.0], [15200.0, 1.0], [15700.0, 1.0], [15800.0, 1.0], [15600.0, 2.0], [16100.0, 1.0], [16000.0, 1.0], [15900.0, 1.0], [16200.0, 1.0], [16400.0, 1.0], [16500.0, 1.0], [17600.0, 1.0], [18300.0, 1.0], [18100.0, 1.0], [18700.0, 1.0], [18900.0, 1.0], [19800.0, 1.0], [20100.0, 1.0], [21100.0, 1.0], [21200.0, 1.0], [21400.0, 1.0], [20500.0, 1.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 30278.0], [100.0, 5190.0], [200.0, 1167.0], [300.0, 1046.0], [400.0, 1080.0], [500.0, 1216.0], [600.0, 924.0], [700.0, 632.0], [800.0, 341.0], [900.0, 267.0], [1000.0, 185.0], [1100.0, 150.0], [1200.0, 291.0], [1300.0, 254.0], [1400.0, 183.0], [1500.0, 109.0], [1600.0, 111.0], [1700.0, 187.0], [1800.0, 162.0], [1900.0, 173.0], [2000.0, 225.0], [2100.0, 193.0], [2200.0, 110.0], [2300.0, 127.0], [2400.0, 155.0], [2500.0, 69.0], [2600.0, 107.0], [2700.0, 121.0], [2800.0, 133.0], [2900.0, 131.0], [3000.0, 63.0], [3100.0, 70.0], [3300.0, 52.0], [3200.0, 64.0], [3400.0, 127.0], [3500.0, 202.0], [3700.0, 139.0], [3600.0, 180.0], [3800.0, 100.0], [3900.0, 84.0], [4000.0, 87.0], [4200.0, 99.0], [4300.0, 62.0], [4100.0, 83.0], [4600.0, 32.0], [4500.0, 41.0], [4400.0, 57.0], [4800.0, 66.0], [4700.0, 29.0], [5000.0, 109.0], [5100.0, 98.0], [4900.0, 74.0], [5200.0, 145.0], [5300.0, 142.0], [5400.0, 142.0], [5500.0, 90.0], [5600.0, 83.0], [5800.0, 161.0], [5700.0, 142.0], [5900.0, 108.0], [6000.0, 38.0], [6100.0, 9.0], [6200.0, 17.0], [6300.0, 22.0], [6400.0, 16.0], [6500.0, 18.0], [6600.0, 22.0], [6700.0, 9.0], [6800.0, 1.0], [7400.0, 3.0], [7300.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [8000.0, 1.0], [8500.0, 5.0], [8600.0, 4.0], [8900.0, 7.0], [8800.0, 3.0], [9000.0, 9.0], [9200.0, 1.0], [9100.0, 3.0], [9600.0, 4.0], [9700.0, 9.0], [9500.0, 6.0], [9400.0, 6.0], [9300.0, 2.0], [9900.0, 9.0], [10000.0, 161.0], [10200.0, 134.0], [10100.0, 188.0], [9800.0, 7.0], [10600.0, 21.0], [10700.0, 5.0], [10400.0, 83.0], [10500.0, 66.0], [10300.0, 100.0], [10900.0, 4.0], [11000.0, 7.0], [11200.0, 3.0], [10800.0, 8.0], [11100.0, 4.0], [11500.0, 5.0], [11600.0, 3.0], [11300.0, 2.0], [11700.0, 1.0], [12000.0, 2.0], [11900.0, 3.0], [12200.0, 1.0], [11800.0, 2.0], [12700.0, 1.0], [12400.0, 1.0], [13200.0, 1.0], [12900.0, 2.0], [12800.0, 1.0], [13000.0, 1.0], [13400.0, 1.0], [13500.0, 1.0], [15700.0, 1.0], [16300.0, 1.0], [16000.0, 1.0], [16400.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [16800.0, 1.0], [20100.0, 1.0], [20200.0, 1.0], [20300.0, 1.0], [20500.0, 1.0], [20600.0, 2.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1151.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 78428.0, "series": [{"data": [[0.0, 78428.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8125.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10584.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1151.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 63.48199588477368, "minX": 1.62511476E12, "maxY": 512.0, "series": [{"data": [[1.62511488E12, 508.09676654515204], [1.62511476E12, 488.90727134532483], [1.62511482E12, 512.0]], "isOverall": false, "label": "JavaTest_peek", "isController": false}, {"data": [[1.62511488E12, 63.51127320954913], [1.62511494E12, 63.839639949547056]], "isOverall": false, "label": "JavaTest_cool", "isController": false}, {"data": [[1.62511476E12, 63.48199588477368]], "isOverall": false, "label": "JavaTest_warm", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511494E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "maxY": 20322.0, "series": [{"data": [[2.0, 18726.0], [3.0, 14407.0], [4.0, 14032.333333333334], [5.0, 17628.0], [6.0, 11378.0], [7.0, 11336.0], [8.0, 10935.5], [9.0, 10184.0], [10.0, 2364.0], [11.0, 685.0], [12.0, 7672.0], [15.0, 626.0], [17.0, 72.0], [18.0, 5238.0], [20.0, 5419.5], [21.0, 614.0], [22.0, 340.5], [23.0, 345.0], [25.0, 229.33333333333331], [26.0, 7.0], [27.0, 2700.75], [29.0, 8391.2], [30.0, 87.0], [31.0, 13.0], [32.0, 35.25], [35.0, 639.0], [34.0, 730.0], [37.0, 705.0], [36.0, 1317.6666666666667], [39.0, 202.25], [38.0, 9.0], [41.0, 779.0], [40.0, 10154.5], [43.0, 213.5], [45.0, 119.14285714285714], [44.0, 388.0], [47.0, 52.00000000000001], [46.0, 187.2], [49.0, 113.42857142857144], [51.0, 1565.3076923076924], [50.0, 35.2], [53.0, 318.5], [52.0, 3619.666666666667], [55.0, 5343.0], [54.0, 50.666666666666664], [57.0, 10448.0], [56.0, 24.6], [58.0, 7689.375000000001], [59.0, 33.0], [61.0, 72.0], [60.0, 54.66666666666667], [62.0, 50.0], [63.0, 16.333333333333332], [64.0, 130.9581570286787], [72.0, 10317.5], [77.0, 10136.666666666666], [76.0, 10190.5], [83.0, 10451.0], [81.0, 10437.0], [85.0, 10614.0], [94.0, 10138.0], [98.0, 1766.6666666666667], [99.0, 93.5], [96.0, 10040.0], [100.0, 144.0], [101.0, 115.25], [102.0, 10619.0], [106.0, 10086.0], [105.0, 10689.333333333334], [104.0, 10624.0], [108.0, 10033.0], [115.0, 10061.0], [113.0, 10150.0], [112.0, 10140.0], [119.0, 9977.0], [118.0, 10069.0], [117.0, 10017.0], [120.0, 9972.0], [124.0, 10028.0], [131.0, 10172.0], [143.0, 174.25], [142.0, 10046.0], [145.0, 168.5], [146.0, 94.0], [148.0, 10562.0], [144.0, 10262.0], [156.0, 10494.0], [155.0, 10463.75], [163.0, 10122.0], [162.0, 10086.0], [161.0, 10167.0], [175.0, 10307.0], [179.0, 10279.0], [198.0, 10247.25], [197.0, 10039.0], [195.0, 10253.0], [194.0, 10073.0], [200.0, 173.85714285714286], [201.0, 14.5], [206.0, 10421.666666666666], [205.0, 10333.0], [203.0, 10434.0], [202.0, 10339.0], [214.0, 10408.0], [212.0, 10078.0], [211.0, 10071.0], [209.0, 10149.0], [208.0, 10244.0], [222.0, 10344.0], [221.0, 10311.5], [220.0, 10042.0], [228.0, 10026.0], [238.0, 10184.75], [236.0, 10251.0], [247.0, 10105.0], [242.0, 10262.0], [241.0, 10392.666666666666], [252.0, 5026.0], [253.0, 298.0], [251.0, 10058.0], [256.0, 300.0], [257.0, 226.2], [258.0, 205.0], [260.0, 474.0], [261.0, 206.0], [270.0, 10128.5], [267.0, 10546.0], [287.0, 9899.0], [286.0, 9885.0], [285.0, 10503.8], [278.0, 10364.0], [277.0, 10361.0], [275.0, 10393.0], [274.0, 10308.0], [272.0, 10249.0], [303.0, 9601.0], [301.0, 9686.0], [296.0, 11179.0], [295.0, 9772.0], [294.0, 9764.0], [289.0, 9852.0], [317.0, 5015.5], [314.0, 282.0], [316.0, 280.0], [318.0, 392.0], [319.0, 403.75], [315.0, 9373.0], [310.0, 10380.0], [308.0, 9519.0], [307.0, 11701.0], [304.0, 9613.0], [322.0, 9650.0], [321.0, 5019.5], [335.0, 9404.0], [333.0, 9421.0], [330.0, 9172.0], [327.0, 9504.0], [326.0, 9210.0], [323.0, 9301.0], [320.0, 9306.0], [350.0, 9012.0], [351.0, 9023.0], [348.0, 9291.0], [347.0, 9262.0], [345.0, 9039.0], [344.0, 9036.0], [341.0, 9350.0], [339.0, 9038.0], [338.0, 9335.0], [337.0, 9121.0], [367.0, 9003.0], [366.0, 8962.0], [362.0, 9120.0], [361.0, 9124.0], [359.0, 8929.0], [356.0, 8931.0], [354.0, 9203.0], [353.0, 8996.0], [381.0, 444.0], [377.0, 381.0], [378.0, 4823.0], [380.0, 5303.0], [383.0, 9083.0], [382.0, 8889.0], [373.0, 8916.0], [370.0, 9437.0], [369.0, 10056.0], [368.0, 8905.0], [398.0, 9204.0], [396.0, 676.0], [394.0, 644.0], [393.0, 581.0], [392.0, 578.0], [391.0, 10054.0], [388.0, 9467.0], [385.0, 9645.0], [384.0, 9815.0], [414.0, 8617.0], [413.0, 8616.0], [409.0, 598.0], [406.0, 593.0], [404.0, 581.0], [401.0, 10136.0], [400.0, 10071.0], [431.0, 20104.0], [429.0, 697.0], [423.0, 633.0], [422.0, 578.0], [421.0, 580.0], [419.0, 529.0], [418.0, 522.0], [416.0, 8631.0], [444.0, 742.0], [442.0, 693.0], [441.0, 689.0], [440.0, 691.0], [439.0, 690.0], [435.0, 633.0], [433.0, 74.0], [461.0, 409.8888888888889], [462.0, 335.75], [456.0, 652.0], [455.0, 723.0], [451.0, 705.0], [450.0, 677.0], [449.0, 6844.666666666667], [448.0, 8484.0], [478.0, 784.0], [476.0, 779.0], [475.0, 781.0], [473.0, 78.0], [470.0, 836.0], [469.0, 837.0], [467.0, 801.0], [464.0, 776.0], [494.0, 606.5], [495.0, 388.0], [493.0, 70.66666666666667], [492.0, 360.6], [491.0, 399.5], [490.0, 7.0], [489.0, 769.0], [488.0, 744.5], [486.0, 143.83333333333334], [481.0, 786.0], [480.0, 783.0], [510.0, 364.0], [498.0, 96.47058823529412], [500.0, 406.0], [503.0, 764.5], [497.0, 756.0], [501.0, 749.0], [511.0, 772.0], [509.0, 93.5], [508.0, 243.3], [499.0, 347.5], [507.0, 118.22222222222223], [506.0, 775.0], [505.0, 777.0], [504.0, 767.0], [512.0, 779.3759541984751], [1.0, 14448.5]], "isOverall": false, "label": "post", "isController": false}, {"data": [[392.03152242706255, 649.5383107735615]], "isOverall": false, "label": "post-Aggregated", "isController": false}, {"data": [[2.0, 10701.5], [3.0, 10337.0], [5.0, 11892.0], [6.0, 11965.0], [7.0, 699.0], [8.0, 622.0], [9.0, 616.0], [10.0, 5481.0], [11.0, 8845.0], [12.0, 7460.0], [13.0, 480.5], [14.0, 394.0], [15.0, 5159.0], [16.0, 363.0], [17.0, 361.0], [18.0, 5474.5], [19.0, 270.0], [20.0, 10261.0], [21.0, 87.0], [22.0, 2410.3846153846157], [24.0, 2810.75], [25.0, 14.0], [26.0, 80.25], [27.0, 28.666666666666668], [28.0, 244.33333333333331], [29.0, 6471.2], [30.0, 180.0], [31.0, 4868.333333333333], [32.0, 197.625], [33.0, 58.0], [34.0, 26.0], [35.0, 114.33333333333333], [36.0, 424.5], [37.0, 67.0], [38.0, 126.625], [39.0, 29.0], [40.0, 6516.625], [42.0, 781.0], [43.0, 25.75], [45.0, 24.0], [44.0, 86.66666666666667], [46.0, 65.25], [47.0, 39.17647058823529], [48.0, 5287.0], [49.0, 35.4375], [51.0, 47.4], [50.0, 35.75000000000001], [53.0, 45.0], [54.0, 215.75], [55.0, 98.0], [57.0, 2918.0], [56.0, 115.22222222222221], [58.0, 10390.25], [59.0, 49.333333333333336], [61.0, 232.75], [60.0, 81.0], [63.0, 41.333333333333336], [62.0, 227.25], [64.0, 155.11167592085718], [73.0, 10378.0], [78.0, 10324.5], [77.0, 10066.0], [76.0, 10091.0], [83.0, 10451.5], [81.0, 10430.0], [84.0, 10204.0], [94.0, 10106.5], [92.0, 10126.0], [98.0, 136.0], [99.0, 103.875], [101.0, 99.375], [102.0, 4191.1], [107.0, 10008.0], [109.0, 10075.0], [114.0, 10164.0], [112.0, 10059.0], [116.0, 10092.0], [121.0, 9902.0], [131.0, 10132.333333333334], [129.0, 10042.0], [141.0, 203.0], [143.0, 1259.2222222222222], [145.0, 2657.25], [146.0, 1059.5454545454545], [149.0, 10387.0], [148.0, 10376.333333333334], [147.0, 10192.0], [144.0, 10273.0], [152.0, 129.0], [159.0, 10151.0], [158.0, 10236.0], [157.0, 10240.0], [156.0, 10466.5], [167.0, 10389.0], [166.0, 9992.0], [165.0, 10034.0], [164.0, 10044.0], [160.0, 10160.0], [175.0, 10034.0], [174.0, 10383.0], [181.0, 10293.0], [180.0, 10287.0], [179.0, 10229.666666666666], [199.0, 225.5], [198.0, 10342.0], [197.0, 10101.0], [194.0, 10213.0], [200.0, 193.45454545454544], [201.0, 246.0], [205.0, 263.0], [207.0, 10246.0], [206.0, 10394.0], [203.0, 10350.0], [213.0, 10092.0], [210.0, 10163.0], [221.0, 10204.0], [230.0, 10153.5], [238.0, 10217.333333333334], [246.0, 10197.0], [245.0, 10191.0], [244.0, 10282.0], [243.0, 10278.0], [241.0, 10376.0], [252.0, 365.0], [253.0, 2258.2], [255.0, 173.0], [250.0, 10069.0], [249.0, 10156.0], [248.0, 10142.0], [256.0, 244.375], [257.0, 316.6666666666667], [258.0, 222.33333333333334], [261.0, 342.5], [262.0, 212.0], [268.0, 10082.0], [267.0, 10145.0], [285.0, 10484.75], [282.0, 10394.0], [280.0, 10350.0], [278.0, 10360.0], [277.0, 10244.0], [276.0, 10249.0], [275.0, 10376.0], [274.0, 10087.0], [291.0, 9792.0], [302.0, 9707.0], [300.0, 11168.0], [299.0, 9785.0], [298.0, 9795.0], [297.0, 9812.0], [293.0, 11822.0], [292.0, 9839.0], [290.0, 9807.0], [288.0, 9861.0], [317.0, 300.6666666666667], [313.0, 4952.0], [316.0, 2270.0], [306.0, 10536.0], [305.0, 10539.0], [318.0, 2630.5], [319.0, 2555.5], [314.0, 9473.0], [312.0, 9467.0], [311.0, 11710.0], [309.0, 9530.0], [322.0, 260.0], [334.0, 9107.0], [332.0, 9127.0], [331.0, 9171.0], [329.0, 9508.0], [328.0, 9508.0], [325.0, 9600.0], [324.0, 9591.0], [349.0, 9302.0], [346.0, 9077.0], [344.0, 9083.0], [340.0, 9344.0], [336.0, 9098.0], [365.0, 9714.0], [364.0, 9013.0], [363.0, 8921.0], [360.0, 9023.0], [358.0, 9075.0], [356.0, 9002.0], [352.0, 9004.0], [381.0, 866.0500000000001], [377.0, 3271.6666666666665], [378.0, 394.5], [380.0, 389.0], [379.0, 8923.0], [376.0, 8993.5], [374.0, 9003.0], [372.0, 8923.0], [371.0, 8954.0], [397.0, 20322.0], [395.0, 658.0], [391.0, 9573.0], [389.0, 9496.0], [387.0, 9491.0], [386.0, 9500.0], [415.0, 8583.0], [412.0, 9894.0], [411.0, 8594.0], [410.0, 9783.0], [408.0, 665.0], [407.0, 603.0], [405.0, 596.0], [403.0, 578.0], [402.0, 8667.0], [430.0, 761.0], [428.0, 702.0], [427.0, 663.0], [426.0, 8585.0], [425.0, 650.0], [424.0, 667.0], [420.0, 537.0], [417.0, 8639.0], [446.0, 769.0], [447.0, 760.0], [445.0, 758.0], [443.0, 707.0], [438.0, 669.0], [437.0, 671.0], [436.0, 647.0], [434.0, 640.0], [432.0, 8529.0], [462.0, 493.2], [461.0, 495.05263157894734], [463.0, 782.0], [460.0, 706.0], [459.0, 705.0], [458.0, 703.0], [457.0, 659.0], [454.0, 783.0], [449.0, 18.0], [453.0, 702.0], [452.0, 702.0], [479.0, 792.0], [477.0, 789.0], [475.0, 786.0], [474.0, 783.0], [473.0, 33.0], [472.0, 82.0], [471.0, 850.0], [466.0, 810.0], [465.0, 801.0], [494.0, 546.0], [495.0, 537.8], [493.0, 55.166666666666664], [492.0, 36.0], [491.0, 511.2], [490.0, 778.5], [489.0, 758.0], [488.0, 17.0], [487.0, 274.0], [483.0, 794.0], [482.0, 805.0], [486.0, 182.8], [485.0, 807.0], [510.0, 251.33333333333331], [496.0, 660.75], [497.0, 612.0], [498.0, 237.04545454545462], [499.0, 13.0], [500.0, 534.0], [501.0, 744.5], [502.0, 767.5], [505.0, 465.33333333333337], [506.0, 575.0], [507.0, 101.86206896551722], [511.0, 514.6666666666666], [509.0, 41.333333333333336], [508.0, 202.25], [512.0, 863.1723424481422], [1.0, 11010.0]], "isOverall": false, "label": "get", "isController": false}, {"data": [[391.60565436956307, 711.8524753077637]], "isOverall": false, "label": "get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 512.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 30242.35, "minX": 1.62511476E12, "maxY": 877375.65, "series": [{"data": [[1.62511488E12, 877375.65], [1.62511476E12, 182294.8], [1.62511494E12, 405803.95], [1.62511482E12, 804961.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62511488E12, 149179.61666666667], [1.62511476E12, 30242.35], [1.62511494E12, 68023.8], [1.62511482E12, 135546.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511494E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 88.52975576195385, "minX": 1.62511476E12, "maxY": 986.1374819936595, "series": [{"data": [[1.62511488E12, 633.250183188523], [1.62511476E12, 938.0398618123828], [1.62511494E12, 88.52975576195385], [1.62511482E12, 886.3346558564771]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62511488E12, 686.663917741006], [1.62511476E12, 970.8742632612956], [1.62511494E12, 100.41279669762635], [1.62511482E12, 986.1374819936595]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511494E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 88.49134273592425, "minX": 1.62511476E12, "maxY": 986.116104868915, "series": [{"data": [[1.62511488E12, 633.214487595518], [1.62511476E12, 938.0186021791104], [1.62511494E12, 88.49134273592425], [1.62511482E12, 886.3009027657953]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62511488E12, 686.6382900986486], [1.62511476E12, 970.843811394895], [1.62511494E12, 100.3867675725261], [1.62511482E12, 986.116104868915]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511494E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62511476E12, "maxY": 29.659135559921356, "series": [{"data": [[1.62511488E12, 0.0], [1.62511476E12, 0.0], [1.62511494E12, 0.0], [1.62511482E12, 0.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62511488E12, 11.898689910746963], [1.62511476E12, 29.659135559921356], [1.62511494E12, 11.116500401330082], [1.62511482E12, 10.605992509363345]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511494E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.62511476E12, "maxY": 21434.0, "series": [{"data": [[1.62511488E12, 20693.0], [1.62511476E12, 12267.0], [1.62511494E12, 14278.0], [1.62511482E12, 21434.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62511488E12, 408.0], [1.62511476E12, 2106.0], [1.62511494E12, 114.0], [1.62511482E12, 3508.4000000000087]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62511488E12, 9305.960000000006], [1.62511476E12, 2701.0], [1.62511494E12, 902.5799999999981], [1.62511482E12, 5769.980000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62511488E12, 699.0], [1.62511476E12, 2398.0], [1.62511494E12, 203.0], [1.62511482E12, 4811.9000000000015]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62511488E12, 4.0], [1.62511476E12, 6.0], [1.62511494E12, 4.0], [1.62511482E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62511488E12, 39.0], [1.62511476E12, 604.0], [1.62511494E12, 21.0], [1.62511482E12, 76.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511494E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 18726.0, "series": [{"data": [[2.0, 10041.0], [3.0, 11786.0], [36.0, 9735.5], [50.0, 10275.0], [58.0, 10089.0], [63.0, 9098.0], [71.0, 516.0], [79.0, 10142.0], [91.0, 683.0], [95.0, 604.0], [92.0, 10151.0], [100.0, 609.0], [102.0, 688.5], [107.0, 567.0], [105.0, 114.0], [111.0, 508.0], [109.0, 500.0], [108.0, 25.0], [114.0, 610.0], [117.0, 511.0], [119.0, 516.5], [116.0, 504.0], [122.0, 516.5], [124.0, 505.0], [128.0, 15.0], [141.0, 275.5], [136.0, 473.5], [142.0, 406.5], [138.0, 160.5], [140.0, 697.0], [150.0, 467.5], [161.0, 406.0], [170.0, 319.5], [172.0, 304.5], [174.0, 14.0], [183.0, 308.0], [189.0, 87.0], [194.0, 307.0], [203.0, 16.0], [210.0, 303.0], [220.0, 895.5], [229.0, 1999.0], [227.0, 86.0], [251.0, 1896.0], [248.0, 24.0], [264.0, 2001.0], [261.0, 2109.0], [263.0, 664.0], [277.0, 1824.0], [273.0, 2004.0], [288.0, 1166.5], [293.0, 1611.0], [318.0, 94.0], [312.0, 81.0], [321.0, 2027.0], [339.0, 504.0], [343.0, 53.0], [364.0, 93.0], [365.0, 81.0], [396.0, 47.0], [388.0, 71.5], [424.0, 802.5], [437.0, 99.0], [461.0, 928.0], [500.0, 106.5], [527.0, 89.0], [541.0, 36.0], [526.0, 126.0], [525.0, 93.0], [548.0, 25.5], [573.0, 38.0], [552.0, 24.5], [557.0, 77.0], [556.0, 43.5], [571.0, 28.0], [553.0, 315.0], [572.0, 89.0], [558.0, 21.0], [592.0, 75.0], [587.0, 19.0], [590.0, 107.0], [605.0, 17.0], [601.0, 16.0], [594.0, 19.0], [622.0, 78.0], [625.0, 62.0], [619.0, 80.0], [617.0, 94.0], [637.0, 21.0], [610.0, 450.0], [618.0, 278.0], [632.0, 82.5], [626.0, 17.0], [671.0, 90.0], [641.0, 20.0], [662.0, 65.0], [651.0, 88.0], [640.0, 100.0], [654.0, 18.0], [657.0, 93.0], [656.0, 87.0], [666.0, 17.0], [667.0, 411.0], [669.0, 96.0], [645.0, 102.0], [646.0, 96.0], [664.0, 255.0], [665.0, 91.0], [690.0, 280.0], [694.0, 128.0], [672.0, 66.5], [698.0, 95.0], [687.0, 27.0], [679.0, 18.0], [688.0, 55.0], [705.0, 22.0], [713.0, 92.0], [712.0, 73.0], [714.0, 83.0], [709.0, 54.0], [734.0, 57.0], [723.0, 21.0], [716.0, 22.0], [710.0, 18.0], [753.0, 17.0], [765.0, 33.0], [755.0, 103.0], [767.0, 72.0], [752.0, 29.0], [761.0, 24.0], [787.0, 38.0], [794.0, 23.0], [798.0, 93.0], [791.0, 24.0], [778.0, 24.0], [777.0, 20.0], [784.0, 19.0], [803.0, 32.0], [806.0, 59.0], [810.0, 71.0], [825.0, 20.0], [822.0, 24.5], [818.0, 22.0], [811.0, 60.0], [824.0, 53.5], [845.0, 41.0], [847.0, 90.0], [858.0, 21.0], [856.0, 20.0], [889.0, 24.0], [875.0, 30.5], [894.0, 23.0], [885.0, 19.0], [906.0, 41.0], [898.0, 22.0], [950.0, 80.0], [932.0, 20.0], [955.0, 22.0], [935.0, 21.0], [987.0, 41.0], [998.0, 24.0], [1003.0, 56.0], [1035.0, 49.0], [1042.0, 56.0], [1029.0, 89.0], [1040.0, 35.0], [1056.0, 23.0], [1156.0, 57.0], [1.0, 14148.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 10063.0], [605.0, 10359.0], [679.0, 10472.0], [723.0, 10488.0], [716.0, 10318.5], [767.0, 10327.0], [3.0, 10885.0], [822.0, 10040.0], [818.0, 10311.0], [50.0, 10267.5], [847.0, 10117.0], [845.0, 10317.5], [875.0, 10221.0], [894.0, 10072.0], [950.0, 10225.0], [58.0, 10391.5], [932.0, 10453.0], [987.0, 10332.5], [998.0, 10312.0], [1035.0, 10311.5], [1042.0, 10295.0], [1029.0, 10167.0], [1156.0, 10185.0], [79.0, 10331.5], [92.0, 10318.0], [108.0, 10246.0], [189.0, 10087.5], [227.0, 10099.0], [248.0, 18726.0], [343.0, 10106.0], [364.0, 10122.0], [396.0, 10193.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1156.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 18726.0, "series": [{"data": [[2.0, 10040.5], [3.0, 11786.0], [36.0, 9735.5], [50.0, 10275.0], [58.0, 10089.0], [63.0, 9098.0], [71.0, 516.0], [79.0, 10142.0], [91.0, 683.0], [95.0, 604.0], [92.0, 10151.0], [100.0, 609.0], [102.0, 688.5], [107.0, 567.0], [105.0, 114.0], [111.0, 508.0], [109.0, 500.0], [108.0, 25.0], [114.0, 610.0], [117.0, 511.0], [119.0, 516.5], [116.0, 504.0], [122.0, 516.5], [124.0, 505.0], [128.0, 15.0], [141.0, 275.5], [136.0, 473.5], [142.0, 406.5], [138.0, 160.0], [140.0, 697.0], [150.0, 467.5], [161.0, 406.0], [170.0, 318.5], [172.0, 304.5], [174.0, 14.0], [183.0, 308.0], [189.0, 87.0], [194.0, 307.0], [203.0, 16.0], [210.0, 303.0], [220.0, 895.5], [229.0, 1999.0], [227.0, 86.0], [251.0, 1896.0], [248.0, 24.0], [264.0, 2001.0], [261.0, 2109.0], [263.0, 664.0], [277.0, 1824.0], [273.0, 2004.0], [288.0, 1166.5], [293.0, 1611.0], [318.0, 93.5], [312.0, 81.0], [321.0, 2027.0], [339.0, 504.0], [343.0, 53.0], [364.0, 93.0], [365.0, 81.0], [396.0, 47.0], [388.0, 71.5], [424.0, 802.5], [437.0, 99.0], [461.0, 928.0], [500.0, 106.5], [527.0, 89.0], [541.0, 36.0], [526.0, 126.0], [525.0, 93.0], [548.0, 25.0], [573.0, 38.0], [552.0, 24.5], [557.0, 77.0], [556.0, 43.5], [571.0, 28.0], [553.0, 315.0], [572.0, 89.0], [558.0, 21.0], [592.0, 75.0], [587.0, 19.0], [590.0, 107.0], [605.0, 17.0], [601.0, 16.0], [594.0, 19.0], [622.0, 78.0], [625.0, 62.0], [619.0, 80.0], [617.0, 94.0], [637.0, 21.0], [610.0, 450.0], [618.0, 278.0], [632.0, 82.5], [626.0, 17.0], [671.0, 90.0], [641.0, 20.0], [662.0, 65.0], [651.0, 88.0], [640.0, 100.0], [654.0, 18.0], [657.0, 93.0], [656.0, 87.0], [666.0, 17.0], [667.0, 411.0], [669.0, 96.0], [645.0, 102.0], [646.0, 96.0], [664.0, 255.0], [665.0, 91.0], [690.0, 279.5], [694.0, 128.0], [672.0, 66.5], [698.0, 95.0], [687.0, 27.0], [679.0, 18.0], [688.0, 55.0], [705.0, 22.0], [713.0, 92.0], [712.0, 73.0], [714.0, 83.0], [709.0, 54.0], [734.0, 57.0], [723.0, 21.0], [716.0, 22.0], [710.0, 18.0], [753.0, 16.0], [765.0, 33.0], [755.0, 103.0], [767.0, 72.0], [752.0, 29.0], [761.0, 24.0], [787.0, 38.0], [794.0, 23.0], [798.0, 93.0], [791.0, 24.0], [778.0, 24.0], [777.0, 20.0], [784.0, 19.0], [803.0, 32.0], [806.0, 59.0], [810.0, 71.0], [825.0, 20.0], [822.0, 24.5], [818.0, 22.0], [811.0, 60.0], [824.0, 53.5], [845.0, 41.0], [847.0, 90.0], [858.0, 21.0], [856.0, 20.0], [889.0, 24.0], [875.0, 30.5], [894.0, 23.0], [885.0, 19.0], [906.0, 41.0], [898.0, 22.0], [950.0, 79.0], [932.0, 20.0], [955.0, 22.0], [935.0, 21.0], [987.0, 41.0], [998.0, 24.0], [1003.0, 56.0], [1035.0, 49.0], [1042.0, 56.0], [1029.0, 89.0], [1040.0, 35.0], [1056.0, 23.0], [1156.0, 57.0], [1.0, 14148.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 10063.0], [605.0, 10359.0], [679.0, 10472.0], [723.0, 10488.0], [716.0, 10318.5], [767.0, 10327.0], [3.0, 10885.0], [822.0, 10040.0], [818.0, 10311.0], [50.0, 10267.5], [847.0, 10117.0], [845.0, 10317.5], [875.0, 10221.0], [894.0, 10072.0], [950.0, 10225.0], [58.0, 10391.5], [932.0, 10453.0], [987.0, 10332.5], [998.0, 10312.0], [1035.0, 10311.5], [1042.0, 10295.0], [1029.0, 10167.0], [1156.0, 10185.0], [79.0, 10331.5], [92.0, 10318.0], [108.0, 10246.0], [189.0, 10087.5], [227.0, 10099.0], [248.0, 18726.0], [343.0, 10106.0], [364.0, 10122.0], [396.0, 10193.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1156.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 139.11666666666667, "minX": 1.62511476E12, "maxY": 630.2833333333333, "series": [{"data": [[1.62511488E12, 630.2833333333333], [1.62511476E12, 139.11666666666667], [1.62511494E12, 289.6333333333333], [1.62511482E12, 579.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511494E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.62511476E12, "maxY": 622.6333333333333, "series": [{"data": [[1.62511488E12, 622.6333333333333], [1.62511476E12, 130.58333333333334], [1.62511494E12, 290.68333333333334], [1.62511482E12, 575.05]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62511488E12, 15.116666666666667], [1.62511494E12, 0.016666666666666666], [1.62511482E12, 4.05]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511494E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.62511476E12, "maxY": 311.3333333333333, "series": [{"data": [[1.62511488E12, 7.983333333333333], [1.62511482E12, 1.8833333333333333]], "isOverall": false, "label": "get-failure", "isController": false}, {"data": [[1.62511488E12, 311.3333333333333], [1.62511476E12, 67.86666666666666], [1.62511494E12, 145.35], [1.62511482E12, 287.3666666666667]], "isOverall": false, "label": "get-success", "isController": false}, {"data": [[1.62511488E12, 311.3], [1.62511476E12, 62.71666666666667], [1.62511494E12, 145.33333333333334], [1.62511482E12, 287.68333333333334]], "isOverall": false, "label": "post-success", "isController": false}, {"data": [[1.62511488E12, 7.133333333333334], [1.62511494E12, 0.016666666666666666], [1.62511482E12, 2.1666666666666665]], "isOverall": false, "label": "post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511494E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.62511476E12, "maxY": 622.6333333333333, "series": [{"data": [[1.62511488E12, 622.6333333333333], [1.62511476E12, 130.58333333333334], [1.62511494E12, 290.68333333333334], [1.62511482E12, 575.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62511488E12, 15.116666666666667], [1.62511494E12, 0.016666666666666666], [1.62511482E12, 4.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511494E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

