/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 19870.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 7.0], [12.6, 7.0], [12.7, 7.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 7.0], [14.9, 7.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 8.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 8.0], [24.3, 8.0], [24.4, 8.0], [24.5, 8.0], [24.6, 8.0], [24.7, 8.0], [24.8, 8.0], [24.9, 8.0], [25.0, 8.0], [25.1, 8.0], [25.2, 8.0], [25.3, 8.0], [25.4, 8.0], [25.5, 8.0], [25.6, 8.0], [25.7, 8.0], [25.8, 8.0], [25.9, 8.0], [26.0, 8.0], [26.1, 8.0], [26.2, 8.0], [26.3, 8.0], [26.4, 8.0], [26.5, 8.0], [26.6, 8.0], [26.7, 8.0], [26.8, 8.0], [26.9, 8.0], [27.0, 8.0], [27.1, 8.0], [27.2, 8.0], [27.3, 8.0], [27.4, 8.0], [27.5, 8.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 9.0], [28.3, 9.0], [28.4, 9.0], [28.5, 9.0], [28.6, 9.0], [28.7, 9.0], [28.8, 9.0], [28.9, 9.0], [29.0, 9.0], [29.1, 9.0], [29.2, 9.0], [29.3, 9.0], [29.4, 9.0], [29.5, 9.0], [29.6, 9.0], [29.7, 9.0], [29.8, 9.0], [29.9, 9.0], [30.0, 9.0], [30.1, 9.0], [30.2, 9.0], [30.3, 9.0], [30.4, 9.0], [30.5, 9.0], [30.6, 9.0], [30.7, 9.0], [30.8, 9.0], [30.9, 9.0], [31.0, 9.0], [31.1, 9.0], [31.2, 9.0], [31.3, 9.0], [31.4, 9.0], [31.5, 9.0], [31.6, 9.0], [31.7, 9.0], [31.8, 9.0], [31.9, 9.0], [32.0, 9.0], [32.1, 9.0], [32.2, 9.0], [32.3, 9.0], [32.4, 9.0], [32.5, 9.0], [32.6, 9.0], [32.7, 9.0], [32.8, 9.0], [32.9, 9.0], [33.0, 9.0], [33.1, 10.0], [33.2, 10.0], [33.3, 10.0], [33.4, 10.0], [33.5, 10.0], [33.6, 10.0], [33.7, 10.0], [33.8, 10.0], [33.9, 10.0], [34.0, 10.0], [34.1, 10.0], [34.2, 10.0], [34.3, 10.0], [34.4, 10.0], [34.5, 10.0], [34.6, 10.0], [34.7, 10.0], [34.8, 10.0], [34.9, 10.0], [35.0, 10.0], [35.1, 10.0], [35.2, 10.0], [35.3, 10.0], [35.4, 10.0], [35.5, 10.0], [35.6, 10.0], [35.7, 10.0], [35.8, 10.0], [35.9, 10.0], [36.0, 10.0], [36.1, 10.0], [36.2, 10.0], [36.3, 10.0], [36.4, 10.0], [36.5, 10.0], [36.6, 10.0], [36.7, 10.0], [36.8, 10.0], [36.9, 10.0], [37.0, 10.0], [37.1, 11.0], [37.2, 11.0], [37.3, 11.0], [37.4, 11.0], [37.5, 11.0], [37.6, 11.0], [37.7, 11.0], [37.8, 11.0], [37.9, 11.0], [38.0, 11.0], [38.1, 11.0], [38.2, 11.0], [38.3, 11.0], [38.4, 11.0], [38.5, 11.0], [38.6, 11.0], [38.7, 11.0], [38.8, 11.0], [38.9, 11.0], [39.0, 11.0], [39.1, 11.0], [39.2, 11.0], [39.3, 11.0], [39.4, 11.0], [39.5, 11.0], [39.6, 11.0], [39.7, 11.0], [39.8, 11.0], [39.9, 11.0], [40.0, 11.0], [40.1, 12.0], [40.2, 12.0], [40.3, 12.0], [40.4, 12.0], [40.5, 12.0], [40.6, 12.0], [40.7, 12.0], [40.8, 12.0], [40.9, 12.0], [41.0, 12.0], [41.1, 12.0], [41.2, 12.0], [41.3, 12.0], [41.4, 12.0], [41.5, 12.0], [41.6, 12.0], [41.7, 12.0], [41.8, 12.0], [41.9, 12.0], [42.0, 12.0], [42.1, 12.0], [42.2, 13.0], [42.3, 13.0], [42.4, 13.0], [42.5, 13.0], [42.6, 13.0], [42.7, 13.0], [42.8, 13.0], [42.9, 13.0], [43.0, 13.0], [43.1, 13.0], [43.2, 13.0], [43.3, 13.0], [43.4, 13.0], [43.5, 14.0], [43.6, 14.0], [43.7, 14.0], [43.8, 14.0], [43.9, 14.0], [44.0, 14.0], [44.1, 14.0], [44.2, 14.0], [44.3, 14.0], [44.4, 14.0], [44.5, 15.0], [44.6, 15.0], [44.7, 15.0], [44.8, 15.0], [44.9, 15.0], [45.0, 15.0], [45.1, 15.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 17.0], [45.7, 17.0], [45.8, 17.0], [45.9, 17.0], [46.0, 18.0], [46.1, 18.0], [46.2, 18.0], [46.3, 19.0], [46.4, 19.0], [46.5, 20.0], [46.6, 21.0], [46.7, 22.0], [46.8, 23.0], [46.9, 24.0], [47.0, 26.0], [47.1, 28.0], [47.2, 31.0], [47.3, 33.0], [47.4, 35.0], [47.5, 37.0], [47.6, 39.0], [47.7, 40.0], [47.8, 42.0], [47.9, 44.0], [48.0, 46.0], [48.1, 48.0], [48.2, 49.0], [48.3, 52.0], [48.4, 53.0], [48.5, 54.0], [48.6, 55.0], [48.7, 56.0], [48.8, 57.0], [48.9, 58.0], [49.0, 59.0], [49.1, 60.0], [49.2, 60.0], [49.3, 61.0], [49.4, 62.0], [49.5, 63.0], [49.6, 63.0], [49.7, 64.0], [49.8, 64.0], [49.9, 65.0], [50.0, 66.0], [50.1, 66.0], [50.2, 67.0], [50.3, 67.0], [50.4, 68.0], [50.5, 68.0], [50.6, 69.0], [50.7, 69.0], [50.8, 70.0], [50.9, 70.0], [51.0, 70.0], [51.1, 71.0], [51.2, 71.0], [51.3, 72.0], [51.4, 72.0], [51.5, 72.0], [51.6, 73.0], [51.7, 73.0], [51.8, 73.0], [51.9, 74.0], [52.0, 74.0], [52.1, 74.0], [52.2, 75.0], [52.3, 75.0], [52.4, 75.0], [52.5, 75.0], [52.6, 76.0], [52.7, 76.0], [52.8, 76.0], [52.9, 76.0], [53.0, 76.0], [53.1, 77.0], [53.2, 77.0], [53.3, 77.0], [53.4, 77.0], [53.5, 78.0], [53.6, 78.0], [53.7, 78.0], [53.8, 78.0], [53.9, 78.0], [54.0, 79.0], [54.1, 79.0], [54.2, 79.0], [54.3, 79.0], [54.4, 80.0], [54.5, 80.0], [54.6, 80.0], [54.7, 80.0], [54.8, 80.0], [54.9, 80.0], [55.0, 81.0], [55.1, 81.0], [55.2, 81.0], [55.3, 81.0], [55.4, 81.0], [55.5, 81.0], [55.6, 82.0], [55.7, 82.0], [55.8, 82.0], [55.9, 82.0], [56.0, 82.0], [56.1, 82.0], [56.2, 83.0], [56.3, 83.0], [56.4, 83.0], [56.5, 83.0], [56.6, 83.0], [56.7, 84.0], [56.8, 84.0], [56.9, 84.0], [57.0, 84.0], [57.1, 84.0], [57.2, 84.0], [57.3, 84.0], [57.4, 84.0], [57.5, 85.0], [57.6, 85.0], [57.7, 85.0], [57.8, 85.0], [57.9, 85.0], [58.0, 85.0], [58.1, 85.0], [58.2, 86.0], [58.3, 86.0], [58.4, 86.0], [58.5, 86.0], [58.6, 86.0], [58.7, 86.0], [58.8, 86.0], [58.9, 87.0], [59.0, 87.0], [59.1, 87.0], [59.2, 87.0], [59.3, 87.0], [59.4, 87.0], [59.5, 87.0], [59.6, 88.0], [59.7, 88.0], [59.8, 88.0], [59.9, 88.0], [60.0, 88.0], [60.1, 88.0], [60.2, 89.0], [60.3, 89.0], [60.4, 89.0], [60.5, 89.0], [60.6, 89.0], [60.7, 89.0], [60.8, 89.0], [60.9, 89.0], [61.0, 90.0], [61.1, 90.0], [61.2, 90.0], [61.3, 90.0], [61.4, 90.0], [61.5, 90.0], [61.6, 91.0], [61.7, 91.0], [61.8, 91.0], [61.9, 91.0], [62.0, 91.0], [62.1, 91.0], [62.2, 91.0], [62.3, 91.0], [62.4, 92.0], [62.5, 92.0], [62.6, 92.0], [62.7, 92.0], [62.8, 92.0], [62.9, 92.0], [63.0, 92.0], [63.1, 92.0], [63.2, 93.0], [63.3, 93.0], [63.4, 93.0], [63.5, 93.0], [63.6, 93.0], [63.7, 93.0], [63.8, 93.0], [63.9, 94.0], [64.0, 94.0], [64.1, 94.0], [64.2, 94.0], [64.3, 94.0], [64.4, 94.0], [64.5, 94.0], [64.6, 94.0], [64.7, 94.0], [64.8, 95.0], [64.9, 95.0], [65.0, 95.0], [65.1, 95.0], [65.2, 95.0], [65.3, 95.0], [65.4, 95.0], [65.5, 96.0], [65.6, 96.0], [65.7, 96.0], [65.8, 96.0], [65.9, 96.0], [66.0, 96.0], [66.1, 96.0], [66.2, 97.0], [66.3, 97.0], [66.4, 97.0], [66.5, 97.0], [66.6, 97.0], [66.7, 97.0], [66.8, 97.0], [66.9, 97.0], [67.0, 98.0], [67.1, 98.0], [67.2, 98.0], [67.3, 98.0], [67.4, 98.0], [67.5, 98.0], [67.6, 98.0], [67.7, 99.0], [67.8, 99.0], [67.9, 99.0], [68.0, 99.0], [68.1, 99.0], [68.2, 99.0], [68.3, 99.0], [68.4, 99.0], [68.5, 100.0], [68.6, 100.0], [68.7, 100.0], [68.8, 100.0], [68.9, 100.0], [69.0, 100.0], [69.1, 100.0], [69.2, 101.0], [69.3, 101.0], [69.4, 101.0], [69.5, 101.0], [69.6, 101.0], [69.7, 102.0], [69.8, 102.0], [69.9, 102.0], [70.0, 102.0], [70.1, 103.0], [70.2, 103.0], [70.3, 103.0], [70.4, 103.0], [70.5, 104.0], [70.6, 104.0], [70.7, 105.0], [70.8, 105.0], [70.9, 106.0], [71.0, 106.0], [71.1, 107.0], [71.2, 108.0], [71.3, 109.0], [71.4, 109.0], [71.5, 111.0], [71.6, 112.0], [71.7, 114.0], [71.8, 116.0], [71.9, 119.0], [72.0, 126.0], [72.1, 142.0], [72.2, 161.0], [72.3, 166.0], [72.4, 169.0], [72.5, 172.0], [72.6, 174.0], [72.7, 175.0], [72.8, 177.0], [72.9, 179.0], [73.0, 180.0], [73.1, 182.0], [73.2, 184.0], [73.3, 185.0], [73.4, 187.0], [73.5, 188.0], [73.6, 189.0], [73.7, 191.0], [73.8, 192.0], [73.9, 193.0], [74.0, 195.0], [74.1, 196.0], [74.2, 197.0], [74.3, 198.0], [74.4, 199.0], [74.5, 200.0], [74.6, 201.0], [74.7, 202.0], [74.8, 203.0], [74.9, 205.0], [75.0, 206.0], [75.1, 208.0], [75.2, 210.0], [75.3, 214.0], [75.4, 218.0], [75.5, 224.0], [75.6, 237.0], [75.7, 264.0], [75.8, 273.0], [75.9, 278.0], [76.0, 281.0], [76.1, 284.0], [76.2, 285.0], [76.3, 288.0], [76.4, 291.0], [76.5, 292.0], [76.6, 294.0], [76.7, 296.0], [76.8, 298.0], [76.9, 299.0], [77.0, 301.0], [77.1, 302.0], [77.2, 305.0], [77.3, 307.0], [77.4, 310.0], [77.5, 312.0], [77.6, 315.0], [77.7, 319.0], [77.8, 325.0], [77.9, 372.0], [78.0, 378.0], [78.1, 383.0], [78.2, 388.0], [78.3, 391.0], [78.4, 395.0], [78.5, 398.0], [78.6, 400.0], [78.7, 403.0], [78.8, 407.0], [78.9, 410.0], [79.0, 414.0], [79.1, 417.0], [79.2, 424.0], [79.3, 439.0], [79.4, 471.0], [79.5, 482.0], [79.6, 487.0], [79.7, 490.0], [79.8, 493.0], [79.9, 495.0], [80.0, 496.0], [80.1, 498.0], [80.2, 501.0], [80.3, 502.0], [80.4, 504.0], [80.5, 505.0], [80.6, 507.0], [80.7, 510.0], [80.8, 512.0], [80.9, 515.0], [81.0, 521.0], [81.1, 530.0], [81.2, 562.0], [81.3, 574.0], [81.4, 580.0], [81.5, 584.0], [81.6, 587.0], [81.7, 589.0], [81.8, 590.0], [81.9, 592.0], [82.0, 594.0], [82.1, 597.0], [82.2, 599.0], [82.3, 600.0], [82.4, 602.0], [82.5, 604.0], [82.6, 606.0], [82.7, 608.0], [82.8, 610.0], [82.9, 612.0], [83.0, 615.0], [83.1, 617.0], [83.2, 620.0], [83.3, 638.0], [83.4, 672.0], [83.5, 677.0], [83.6, 681.0], [83.7, 684.0], [83.8, 686.0], [83.9, 688.0], [84.0, 690.0], [84.1, 692.0], [84.2, 694.0], [84.3, 696.0], [84.4, 697.0], [84.5, 698.0], [84.6, 699.0], [84.7, 701.0], [84.8, 702.0], [84.9, 703.0], [85.0, 705.0], [85.1, 707.0], [85.2, 709.0], [85.3, 711.0], [85.4, 714.0], [85.5, 717.0], [85.6, 722.0], [85.7, 733.0], [85.8, 765.0], [85.9, 776.0], [86.0, 780.0], [86.1, 783.0], [86.2, 786.0], [86.3, 789.0], [86.4, 791.0], [86.5, 793.0], [86.6, 796.0], [86.7, 797.0], [86.8, 799.0], [86.9, 800.0], [87.0, 802.0], [87.1, 803.0], [87.2, 804.0], [87.3, 806.0], [87.4, 808.0], [87.5, 811.0], [87.6, 814.0], [87.7, 818.0], [87.8, 827.0], [87.9, 862.0], [88.0, 874.0], [88.1, 880.0], [88.2, 883.0], [88.3, 886.0], [88.4, 888.0], [88.5, 889.0], [88.6, 892.0], [88.7, 895.0], [88.8, 896.0], [88.9, 899.0], [89.0, 901.0], [89.1, 904.0], [89.2, 907.0], [89.3, 911.0], [89.4, 914.0], [89.5, 936.0], [89.6, 970.0], [89.7, 979.0], [89.8, 984.0], [89.9, 986.0], [90.0, 989.0], [90.1, 992.0], [90.2, 995.0], [90.3, 999.0], [90.4, 1001.0], [90.5, 1004.0], [90.6, 1006.0], [90.7, 1008.0], [90.8, 1011.0], [90.9, 1015.0], [91.0, 1029.0], [91.1, 1067.0], [91.2, 1074.0], [91.3, 1078.0], [91.4, 1082.0], [91.5, 1085.0], [91.6, 1089.0], [91.7, 1093.0], [91.8, 1096.0], [91.9, 1099.0], [92.0, 1102.0], [92.1, 1106.0], [92.2, 1110.0], [92.3, 1116.0], [92.4, 1163.0], [92.5, 1176.0], [92.6, 1181.0], [92.7, 1187.0], [92.8, 1191.0], [92.9, 1193.0], [93.0, 1198.0], [93.1, 1201.0], [93.2, 1205.0], [93.3, 1208.0], [93.4, 1215.0], [93.5, 1266.0], [93.6, 1277.0], [93.7, 1287.0], [93.8, 1293.0], [93.9, 1300.0], [94.0, 1305.0], [94.1, 1312.0], [94.2, 1374.0], [94.3, 1388.0], [94.4, 1394.0], [94.5, 1401.0], [94.6, 1411.0], [94.7, 1473.0], [94.8, 1483.0], [94.9, 1491.0], [95.0, 1500.0], [95.1, 1509.0], [95.2, 1566.0], [95.3, 1583.0], [95.4, 1594.0], [95.5, 1607.0], [95.6, 1680.0], [95.7, 1692.0], [95.8, 1711.0], [95.9, 1776.0], [96.0, 1789.0], [96.1, 1797.0], [96.2, 1813.0], [96.3, 1874.0], [96.4, 1884.0], [96.5, 1888.0], [96.6, 1897.0], [96.7, 1913.0], [96.8, 1973.0], [96.9, 1994.0], [97.0, 2059.0], [97.1, 2091.0], [97.2, 2174.0], [97.3, 2196.0], [97.4, 2272.0], [97.5, 2290.0], [97.6, 2303.0], [97.7, 2362.0], [97.8, 2380.0], [97.9, 2395.0], [98.0, 2435.0], [98.1, 2490.0], [98.2, 2502.0], [98.3, 2569.0], [98.4, 2584.0], [98.5, 2601.0], [98.6, 2669.0], [98.7, 2695.0], [98.8, 2789.0], [98.9, 2980.0], [99.0, 3075.0], [99.1, 3170.0], [99.2, 3482.0], [99.3, 3685.0], [99.4, 3809.0], [99.5, 7325.0], [99.6, 8580.0], [99.7, 9079.0], [99.8, 10207.0], [99.9, 10528.0], [100.0, 18235.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 10.0], [0.1, 11.0], [0.2, 11.0], [0.3, 11.0], [0.4, 11.0], [0.5, 11.0], [0.6, 12.0], [0.7, 12.0], [0.8, 12.0], [0.9, 12.0], [1.0, 12.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 12.0], [1.6, 12.0], [1.7, 12.0], [1.8, 12.0], [1.9, 12.0], [2.0, 12.0], [2.1, 12.0], [2.2, 12.0], [2.3, 12.0], [2.4, 12.0], [2.5, 12.0], [2.6, 12.0], [2.7, 12.0], [2.8, 12.0], [2.9, 12.0], [3.0, 12.0], [3.1, 12.0], [3.2, 12.0], [3.3, 12.0], [3.4, 12.0], [3.5, 12.0], [3.6, 13.0], [3.7, 13.0], [3.8, 13.0], [3.9, 13.0], [4.0, 13.0], [4.1, 13.0], [4.2, 13.0], [4.3, 13.0], [4.4, 13.0], [4.5, 13.0], [4.6, 13.0], [4.7, 13.0], [4.8, 13.0], [4.9, 13.0], [5.0, 13.0], [5.1, 13.0], [5.2, 13.0], [5.3, 13.0], [5.4, 13.0], [5.5, 13.0], [5.6, 13.0], [5.7, 13.0], [5.8, 13.0], [5.9, 13.0], [6.0, 13.0], [6.1, 13.0], [6.2, 13.0], [6.3, 13.0], [6.4, 13.0], [6.5, 13.0], [6.6, 13.0], [6.7, 13.0], [6.8, 13.0], [6.9, 13.0], [7.0, 13.0], [7.1, 13.0], [7.2, 13.0], [7.3, 13.0], [7.4, 13.0], [7.5, 13.0], [7.6, 13.0], [7.7, 13.0], [7.8, 13.0], [7.9, 13.0], [8.0, 13.0], [8.1, 13.0], [8.2, 13.0], [8.3, 13.0], [8.4, 13.0], [8.5, 13.0], [8.6, 13.0], [8.7, 13.0], [8.8, 13.0], [8.9, 13.0], [9.0, 13.0], [9.1, 13.0], [9.2, 14.0], [9.3, 14.0], [9.4, 14.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 14.0], [10.2, 14.0], [10.3, 14.0], [10.4, 14.0], [10.5, 14.0], [10.6, 14.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 14.0], [12.4, 14.0], [12.5, 14.0], [12.6, 14.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 14.0], [13.7, 14.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 15.0], [17.7, 15.0], [17.8, 15.0], [17.9, 15.0], [18.0, 15.0], [18.1, 15.0], [18.2, 15.0], [18.3, 15.0], [18.4, 15.0], [18.5, 15.0], [18.6, 15.0], [18.7, 15.0], [18.8, 15.0], [18.9, 15.0], [19.0, 15.0], [19.1, 15.0], [19.2, 15.0], [19.3, 15.0], [19.4, 15.0], [19.5, 15.0], [19.6, 15.0], [19.7, 15.0], [19.8, 15.0], [19.9, 15.0], [20.0, 15.0], [20.1, 15.0], [20.2, 15.0], [20.3, 15.0], [20.4, 15.0], [20.5, 15.0], [20.6, 15.0], [20.7, 15.0], [20.8, 15.0], [20.9, 15.0], [21.0, 15.0], [21.1, 15.0], [21.2, 15.0], [21.3, 15.0], [21.4, 16.0], [21.5, 16.0], [21.6, 16.0], [21.7, 16.0], [21.8, 16.0], [21.9, 16.0], [22.0, 16.0], [22.1, 16.0], [22.2, 16.0], [22.3, 16.0], [22.4, 16.0], [22.5, 16.0], [22.6, 16.0], [22.7, 16.0], [22.8, 16.0], [22.9, 16.0], [23.0, 16.0], [23.1, 16.0], [23.2, 16.0], [23.3, 16.0], [23.4, 16.0], [23.5, 16.0], [23.6, 16.0], [23.7, 16.0], [23.8, 16.0], [23.9, 16.0], [24.0, 16.0], [24.1, 16.0], [24.2, 16.0], [24.3, 16.0], [24.4, 16.0], [24.5, 16.0], [24.6, 16.0], [24.7, 16.0], [24.8, 16.0], [24.9, 16.0], [25.0, 16.0], [25.1, 16.0], [25.2, 16.0], [25.3, 16.0], [25.4, 16.0], [25.5, 16.0], [25.6, 16.0], [25.7, 16.0], [25.8, 16.0], [25.9, 16.0], [26.0, 16.0], [26.1, 16.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 17.0], [26.7, 17.0], [26.8, 17.0], [26.9, 17.0], [27.0, 17.0], [27.1, 17.0], [27.2, 17.0], [27.3, 17.0], [27.4, 17.0], [27.5, 17.0], [27.6, 17.0], [27.7, 17.0], [27.8, 17.0], [27.9, 17.0], [28.0, 17.0], [28.1, 17.0], [28.2, 17.0], [28.3, 17.0], [28.4, 17.0], [28.5, 17.0], [28.6, 17.0], [28.7, 17.0], [28.8, 17.0], [28.9, 17.0], [29.0, 17.0], [29.1, 17.0], [29.2, 17.0], [29.3, 17.0], [29.4, 17.0], [29.5, 17.0], [29.6, 17.0], [29.7, 17.0], [29.8, 17.0], [29.9, 17.0], [30.0, 17.0], [30.1, 18.0], [30.2, 18.0], [30.3, 18.0], [30.4, 18.0], [30.5, 18.0], [30.6, 18.0], [30.7, 18.0], [30.8, 18.0], [30.9, 18.0], [31.0, 18.0], [31.1, 18.0], [31.2, 18.0], [31.3, 18.0], [31.4, 18.0], [31.5, 18.0], [31.6, 18.0], [31.7, 18.0], [31.8, 18.0], [31.9, 18.0], [32.0, 18.0], [32.1, 18.0], [32.2, 18.0], [32.3, 18.0], [32.4, 18.0], [32.5, 18.0], [32.6, 18.0], [32.7, 19.0], [32.8, 19.0], [32.9, 19.0], [33.0, 19.0], [33.1, 19.0], [33.2, 19.0], [33.3, 19.0], [33.4, 19.0], [33.5, 19.0], [33.6, 19.0], [33.7, 19.0], [33.8, 19.0], [33.9, 19.0], [34.0, 19.0], [34.1, 19.0], [34.2, 19.0], [34.3, 19.0], [34.4, 20.0], [34.5, 20.0], [34.6, 20.0], [34.7, 20.0], [34.8, 20.0], [34.9, 20.0], [35.0, 20.0], [35.1, 20.0], [35.2, 20.0], [35.3, 20.0], [35.4, 20.0], [35.5, 21.0], [35.6, 21.0], [35.7, 21.0], [35.8, 21.0], [35.9, 21.0], [36.0, 21.0], [36.1, 21.0], [36.2, 22.0], [36.3, 22.0], [36.4, 22.0], [36.5, 22.0], [36.6, 22.0], [36.7, 22.0], [36.8, 23.0], [36.9, 23.0], [37.0, 23.0], [37.1, 23.0], [37.2, 24.0], [37.3, 24.0], [37.4, 24.0], [37.5, 25.0], [37.6, 25.0], [37.7, 26.0], [37.8, 27.0], [37.9, 27.0], [38.0, 28.0], [38.1, 29.0], [38.2, 30.0], [38.3, 31.0], [38.4, 34.0], [38.5, 35.0], [38.6, 38.0], [38.7, 41.0], [38.8, 43.0], [38.9, 46.0], [39.0, 48.0], [39.1, 50.0], [39.2, 51.0], [39.3, 52.0], [39.4, 53.0], [39.5, 55.0], [39.6, 56.0], [39.7, 57.0], [39.8, 58.0], [39.9, 59.0], [40.0, 60.0], [40.1, 61.0], [40.2, 62.0], [40.3, 63.0], [40.4, 64.0], [40.5, 64.0], [40.6, 65.0], [40.7, 66.0], [40.8, 67.0], [40.9, 67.0], [41.0, 68.0], [41.1, 68.0], [41.2, 69.0], [41.3, 69.0], [41.4, 70.0], [41.5, 70.0], [41.6, 71.0], [41.7, 71.0], [41.8, 72.0], [41.9, 72.0], [42.0, 73.0], [42.1, 73.0], [42.2, 73.0], [42.3, 74.0], [42.4, 74.0], [42.5, 75.0], [42.6, 75.0], [42.7, 75.0], [42.8, 76.0], [42.9, 76.0], [43.0, 76.0], [43.1, 77.0], [43.2, 77.0], [43.3, 77.0], [43.4, 78.0], [43.5, 78.0], [43.6, 78.0], [43.7, 79.0], [43.8, 79.0], [43.9, 79.0], [44.0, 80.0], [44.1, 80.0], [44.2, 80.0], [44.3, 81.0], [44.4, 81.0], [44.5, 81.0], [44.6, 81.0], [44.7, 82.0], [44.8, 82.0], [44.9, 82.0], [45.0, 83.0], [45.1, 83.0], [45.2, 83.0], [45.3, 83.0], [45.4, 84.0], [45.5, 84.0], [45.6, 84.0], [45.7, 84.0], [45.8, 84.0], [45.9, 85.0], [46.0, 85.0], [46.1, 85.0], [46.2, 85.0], [46.3, 85.0], [46.4, 86.0], [46.5, 86.0], [46.6, 86.0], [46.7, 86.0], [46.8, 86.0], [46.9, 87.0], [47.0, 87.0], [47.1, 87.0], [47.2, 87.0], [47.3, 87.0], [47.4, 87.0], [47.5, 87.0], [47.6, 88.0], [47.7, 88.0], [47.8, 88.0], [47.9, 88.0], [48.0, 88.0], [48.1, 88.0], [48.2, 88.0], [48.3, 89.0], [48.4, 89.0], [48.5, 89.0], [48.6, 89.0], [48.7, 89.0], [48.8, 89.0], [48.9, 89.0], [49.0, 89.0], [49.1, 89.0], [49.2, 90.0], [49.3, 90.0], [49.4, 90.0], [49.5, 90.0], [49.6, 90.0], [49.7, 90.0], [49.8, 90.0], [49.9, 90.0], [50.0, 90.0], [50.1, 90.0], [50.2, 91.0], [50.3, 91.0], [50.4, 91.0], [50.5, 91.0], [50.6, 91.0], [50.7, 91.0], [50.8, 91.0], [50.9, 91.0], [51.0, 91.0], [51.1, 91.0], [51.2, 91.0], [51.3, 92.0], [51.4, 92.0], [51.5, 92.0], [51.6, 92.0], [51.7, 92.0], [51.8, 92.0], [51.9, 92.0], [52.0, 92.0], [52.1, 92.0], [52.2, 92.0], [52.3, 93.0], [52.4, 93.0], [52.5, 93.0], [52.6, 93.0], [52.7, 93.0], [52.8, 93.0], [52.9, 93.0], [53.0, 93.0], [53.1, 93.0], [53.2, 93.0], [53.3, 93.0], [53.4, 94.0], [53.5, 94.0], [53.6, 94.0], [53.7, 94.0], [53.8, 94.0], [53.9, 94.0], [54.0, 94.0], [54.1, 94.0], [54.2, 94.0], [54.3, 94.0], [54.4, 94.0], [54.5, 94.0], [54.6, 95.0], [54.7, 95.0], [54.8, 95.0], [54.9, 95.0], [55.0, 95.0], [55.1, 95.0], [55.2, 95.0], [55.3, 95.0], [55.4, 95.0], [55.5, 95.0], [55.6, 95.0], [55.7, 96.0], [55.8, 96.0], [55.9, 96.0], [56.0, 96.0], [56.1, 96.0], [56.2, 96.0], [56.3, 96.0], [56.4, 96.0], [56.5, 96.0], [56.6, 96.0], [56.7, 97.0], [56.8, 97.0], [56.9, 97.0], [57.0, 97.0], [57.1, 97.0], [57.2, 97.0], [57.3, 97.0], [57.4, 97.0], [57.5, 97.0], [57.6, 97.0], [57.7, 97.0], [57.8, 98.0], [57.9, 98.0], [58.0, 98.0], [58.1, 98.0], [58.2, 98.0], [58.3, 98.0], [58.4, 98.0], [58.5, 98.0], [58.6, 98.0], [58.7, 98.0], [58.8, 98.0], [58.9, 98.0], [59.0, 99.0], [59.1, 99.0], [59.2, 99.0], [59.3, 99.0], [59.4, 99.0], [59.5, 99.0], [59.6, 99.0], [59.7, 99.0], [59.8, 99.0], [59.9, 99.0], [60.0, 99.0], [60.1, 99.0], [60.2, 99.0], [60.3, 100.0], [60.4, 100.0], [60.5, 100.0], [60.6, 100.0], [60.7, 100.0], [60.8, 100.0], [60.9, 100.0], [61.0, 100.0], [61.1, 100.0], [61.2, 100.0], [61.3, 100.0], [61.4, 100.0], [61.5, 100.0], [61.6, 101.0], [61.7, 101.0], [61.8, 101.0], [61.9, 101.0], [62.0, 101.0], [62.1, 101.0], [62.2, 101.0], [62.3, 101.0], [62.4, 101.0], [62.5, 101.0], [62.6, 102.0], [62.7, 102.0], [62.8, 102.0], [62.9, 102.0], [63.0, 102.0], [63.1, 102.0], [63.2, 102.0], [63.3, 102.0], [63.4, 102.0], [63.5, 103.0], [63.6, 103.0], [63.7, 103.0], [63.8, 103.0], [63.9, 103.0], [64.0, 103.0], [64.1, 104.0], [64.2, 104.0], [64.3, 104.0], [64.4, 104.0], [64.5, 104.0], [64.6, 105.0], [64.7, 105.0], [64.8, 105.0], [64.9, 105.0], [65.0, 106.0], [65.1, 106.0], [65.2, 106.0], [65.3, 107.0], [65.4, 107.0], [65.5, 107.0], [65.6, 108.0], [65.7, 108.0], [65.8, 108.0], [65.9, 109.0], [66.0, 110.0], [66.1, 110.0], [66.2, 111.0], [66.3, 112.0], [66.4, 113.0], [66.5, 114.0], [66.6, 115.0], [66.7, 116.0], [66.8, 120.0], [66.9, 123.0], [67.0, 127.0], [67.1, 138.0], [67.2, 152.0], [67.3, 164.0], [67.4, 167.0], [67.5, 170.0], [67.6, 173.0], [67.7, 174.0], [67.8, 177.0], [67.9, 178.0], [68.0, 179.0], [68.1, 180.0], [68.2, 181.0], [68.3, 182.0], [68.4, 184.0], [68.5, 184.0], [68.6, 185.0], [68.7, 186.0], [68.8, 187.0], [68.9, 188.0], [69.0, 189.0], [69.1, 189.0], [69.2, 190.0], [69.3, 191.0], [69.4, 192.0], [69.5, 193.0], [69.6, 193.0], [69.7, 194.0], [69.8, 195.0], [69.9, 196.0], [70.0, 197.0], [70.1, 198.0], [70.2, 198.0], [70.3, 199.0], [70.4, 199.0], [70.5, 200.0], [70.6, 201.0], [70.7, 202.0], [70.8, 203.0], [70.9, 204.0], [71.0, 205.0], [71.1, 206.0], [71.2, 208.0], [71.3, 209.0], [71.4, 211.0], [71.5, 213.0], [71.6, 215.0], [71.7, 219.0], [71.8, 223.0], [71.9, 233.0], [72.0, 255.0], [72.1, 268.0], [72.2, 276.0], [72.3, 280.0], [72.4, 282.0], [72.5, 284.0], [72.6, 287.0], [72.7, 289.0], [72.8, 291.0], [72.9, 292.0], [73.0, 294.0], [73.1, 295.0], [73.2, 297.0], [73.3, 298.0], [73.4, 300.0], [73.5, 302.0], [73.6, 304.0], [73.7, 306.0], [73.8, 308.0], [73.9, 310.0], [74.0, 313.0], [74.1, 316.0], [74.2, 319.0], [74.3, 325.0], [74.4, 340.0], [74.5, 371.0], [74.6, 377.0], [74.7, 382.0], [74.8, 386.0], [74.9, 388.0], [75.0, 391.0], [75.1, 394.0], [75.2, 397.0], [75.3, 398.0], [75.4, 400.0], [75.5, 403.0], [75.6, 405.0], [75.7, 410.0], [75.8, 414.0], [75.9, 417.0], [76.0, 421.0], [76.1, 432.0], [76.2, 472.0], [76.3, 479.0], [76.4, 485.0], [76.5, 489.0], [76.6, 492.0], [76.7, 495.0], [76.8, 497.0], [76.9, 499.0], [77.0, 500.0], [77.1, 502.0], [77.2, 504.0], [77.3, 505.0], [77.4, 507.0], [77.5, 509.0], [77.6, 511.0], [77.7, 513.0], [77.8, 515.0], [77.9, 519.0], [78.0, 525.0], [78.1, 536.0], [78.2, 568.0], [78.3, 578.0], [78.4, 582.0], [78.5, 585.0], [78.6, 587.0], [78.7, 590.0], [78.8, 592.0], [78.9, 595.0], [79.0, 597.0], [79.1, 598.0], [79.2, 600.0], [79.3, 602.0], [79.4, 603.0], [79.5, 606.0], [79.6, 607.0], [79.7, 610.0], [79.8, 612.0], [79.9, 615.0], [80.0, 617.0], [80.1, 621.0], [80.2, 630.0], [80.3, 660.0], [80.4, 673.0], [80.5, 678.0], [80.6, 683.0], [80.7, 686.0], [80.8, 688.0], [80.9, 690.0], [81.0, 691.0], [81.1, 694.0], [81.2, 696.0], [81.3, 697.0], [81.4, 698.0], [81.5, 699.0], [81.6, 700.0], [81.7, 701.0], [81.8, 702.0], [81.9, 704.0], [82.0, 705.0], [82.1, 707.0], [82.2, 709.0], [82.3, 711.0], [82.4, 713.0], [82.5, 717.0], [82.6, 727.0], [82.7, 755.0], [82.8, 773.0], [82.9, 778.0], [83.0, 782.0], [83.1, 786.0], [83.2, 788.0], [83.3, 790.0], [83.4, 792.0], [83.5, 794.0], [83.6, 796.0], [83.7, 797.0], [83.8, 798.0], [83.9, 800.0], [84.0, 801.0], [84.1, 803.0], [84.2, 804.0], [84.3, 806.0], [84.4, 807.0], [84.5, 809.0], [84.6, 811.0], [84.7, 813.0], [84.8, 815.0], [84.9, 819.0], [85.0, 824.0], [85.1, 852.0], [85.2, 873.0], [85.3, 879.0], [85.4, 882.0], [85.5, 884.0], [85.6, 886.0], [85.7, 888.0], [85.8, 890.0], [85.9, 892.0], [86.0, 893.0], [86.1, 895.0], [86.2, 897.0], [86.3, 898.0], [86.4, 899.0], [86.5, 901.0], [86.6, 902.0], [86.7, 904.0], [86.8, 906.0], [86.9, 909.0], [87.0, 913.0], [87.1, 919.0], [87.2, 933.0], [87.3, 971.0], [87.4, 980.0], [87.5, 984.0], [87.6, 987.0], [87.7, 990.0], [87.8, 993.0], [87.9, 995.0], [88.0, 998.0], [88.1, 1000.0], [88.2, 1002.0], [88.3, 1005.0], [88.4, 1008.0], [88.5, 1011.0], [88.6, 1015.0], [88.7, 1020.0], [88.8, 1052.0], [88.9, 1074.0], [89.0, 1079.0], [89.1, 1083.0], [89.2, 1086.0], [89.3, 1089.0], [89.4, 1092.0], [89.5, 1094.0], [89.6, 1096.0], [89.7, 1098.0], [89.8, 1100.0], [89.9, 1102.0], [90.0, 1103.0], [90.1, 1106.0], [90.2, 1111.0], [90.3, 1116.0], [90.4, 1132.0], [90.5, 1147.0], [90.6, 1165.0], [90.7, 1178.0], [90.8, 1185.0], [90.9, 1189.0], [91.0, 1192.0], [91.1, 1195.0], [91.2, 1196.0], [91.3, 1200.0], [91.4, 1202.0], [91.5, 1205.0], [91.6, 1210.0], [91.7, 1214.0], [91.8, 1225.0], [91.9, 1266.0], [92.0, 1280.0], [92.1, 1288.0], [92.2, 1292.0], [92.3, 1299.0], [92.4, 1306.0], [92.5, 1313.0], [92.6, 1361.0], [92.7, 1383.0], [92.8, 1391.0], [92.9, 1395.0], [93.0, 1399.0], [93.1, 1403.0], [93.2, 1407.0], [93.3, 1445.0], [93.4, 1480.0], [93.5, 1490.0], [93.6, 1496.0], [93.7, 1501.0], [93.8, 1506.0], [93.9, 1512.0], [94.0, 1568.0], [94.1, 1586.0], [94.2, 1595.0], [94.3, 1603.0], [94.4, 1608.0], [94.5, 1644.0], [94.6, 1686.0], [94.7, 1693.0], [94.8, 1704.0], [94.9, 1750.0], [95.0, 1784.0], [95.1, 1796.0], [95.2, 1801.0], [95.3, 1807.0], [95.4, 1822.0], [95.5, 1883.0], [95.6, 1887.0], [95.7, 1893.0], [95.8, 1896.0], [95.9, 1900.0], [96.0, 1904.0], [96.1, 1933.0], [96.2, 1980.0], [96.3, 1987.0], [96.4, 1994.0], [96.5, 2005.0], [96.6, 2088.0], [96.7, 2101.0], [96.8, 2186.0], [96.9, 2211.0], [97.0, 2284.0], [97.1, 2295.0], [97.2, 2305.0], [97.3, 2312.0], [97.4, 2367.0], [97.5, 2388.0], [97.6, 2397.0], [97.7, 2433.0], [97.8, 2484.0], [97.9, 2497.0], [98.0, 2508.0], [98.1, 2570.0], [98.2, 2586.0], [98.3, 2598.0], [98.4, 2624.0], [98.5, 2698.0], [98.6, 2797.0], [98.7, 2981.0], [98.8, 3033.0], [98.9, 3194.0], [99.0, 3500.0], [99.1, 3693.0], [99.2, 6913.0], [99.3, 7434.0], [99.4, 8404.0], [99.5, 9016.0], [99.6, 9836.0], [99.7, 10206.0], [99.8, 10491.0], [99.9, 11596.0], [100.0, 19870.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 18133.0, "series": [{"data": [[0.0, 18133.0], [600.0, 627.0], [700.0, 581.0], [800.0, 555.0], [900.0, 374.0], [1000.0, 417.0], [1100.0, 303.0], [1200.0, 224.0], [1300.0, 156.0], [1400.0, 135.0], [1500.0, 119.0], [1600.0, 82.0], [1700.0, 98.0], [1800.0, 128.0], [1900.0, 86.0], [2000.0, 57.0], [2100.0, 42.0], [2200.0, 74.0], [2300.0, 89.0], [2400.0, 67.0], [2500.0, 83.0], [2600.0, 58.0], [2800.0, 9.0], [2700.0, 29.0], [2900.0, 21.0], [3000.0, 33.0], [3100.0, 19.0], [3300.0, 11.0], [3200.0, 6.0], [3400.0, 8.0], [3500.0, 14.0], [3600.0, 11.0], [3700.0, 18.0], [3800.0, 9.0], [6800.0, 9.0], [6900.0, 7.0], [7000.0, 2.0], [7200.0, 1.0], [7400.0, 3.0], [7300.0, 4.0], [7600.0, 1.0], [7500.0, 3.0], [7700.0, 2.0], [7800.0, 2.0], [7900.0, 1.0], [8000.0, 2.0], [8100.0, 3.0], [8300.0, 2.0], [8200.0, 4.0], [8400.0, 2.0], [8500.0, 2.0], [8600.0, 6.0], [8700.0, 2.0], [8800.0, 2.0], [8900.0, 6.0], [9000.0, 14.0], [9100.0, 2.0], [9600.0, 1.0], [9700.0, 3.0], [10000.0, 5.0], [9900.0, 1.0], [10100.0, 7.0], [10200.0, 12.0], [10300.0, 9.0], [10600.0, 6.0], [10700.0, 3.0], [10500.0, 5.0], [10400.0, 4.0], [11100.0, 1.0], [11000.0, 3.0], [10900.0, 1.0], [10800.0, 1.0], [11600.0, 1.0], [11700.0, 1.0], [12700.0, 2.0], [16100.0, 1.0], [16000.0, 1.0], [18000.0, 2.0], [18200.0, 1.0], [17900.0, 1.0], [100.0, 1580.0], [200.0, 667.0], [300.0, 429.0], [400.0, 427.0], [500.0, 556.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 16055.0], [100.0, 2696.0], [200.0, 785.0], [300.0, 528.0], [400.0, 420.0], [500.0, 599.0], [600.0, 629.0], [700.0, 621.0], [800.0, 678.0], [900.0, 450.0], [1000.0, 449.0], [1100.0, 398.0], [1200.0, 277.0], [1300.0, 189.0], [1400.0, 174.0], [1500.0, 153.0], [1600.0, 134.0], [1700.0, 110.0], [1800.0, 190.0], [1900.0, 156.0], [2000.0, 57.0], [2100.0, 46.0], [2200.0, 74.0], [2300.0, 128.0], [2400.0, 83.0], [2500.0, 104.0], [2600.0, 51.0], [2800.0, 18.0], [2700.0, 25.0], [2900.0, 20.0], [3000.0, 30.0], [3100.0, 12.0], [3300.0, 9.0], [3200.0, 9.0], [3400.0, 7.0], [3500.0, 10.0], [3600.0, 21.0], [3700.0, 7.0], [3800.0, 11.0], [6900.0, 7.0], [6800.0, 4.0], [7000.0, 5.0], [7100.0, 1.0], [7300.0, 6.0], [7400.0, 11.0], [7200.0, 1.0], [7500.0, 5.0], [7700.0, 3.0], [7800.0, 4.0], [8000.0, 1.0], [8100.0, 2.0], [8200.0, 6.0], [8300.0, 2.0], [8400.0, 2.0], [8500.0, 2.0], [8600.0, 3.0], [8700.0, 2.0], [8800.0, 3.0], [8900.0, 6.0], [9000.0, 24.0], [9100.0, 7.0], [9200.0, 1.0], [9300.0, 2.0], [9700.0, 1.0], [10200.0, 9.0], [10000.0, 10.0], [9800.0, 2.0], [9900.0, 5.0], [10100.0, 10.0], [10400.0, 10.0], [10500.0, 4.0], [10600.0, 5.0], [10300.0, 10.0], [10700.0, 1.0], [11000.0, 2.0], [11100.0, 2.0], [11200.0, 1.0], [11500.0, 4.0], [11600.0, 2.0], [11300.0, 1.0], [11400.0, 5.0], [11700.0, 2.0], [11800.0, 3.0], [12000.0, 1.0], [12300.0, 1.0], [12400.0, 2.0], [12500.0, 2.0], [12700.0, 1.0], [12600.0, 1.0], [12900.0, 1.0], [13400.0, 1.0], [14100.0, 1.0], [14000.0, 2.0], [16500.0, 1.0], [18600.0, 1.0], [18900.0, 1.0], [18700.0, 1.0], [19800.0, 2.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 77.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 41750.0, "series": [{"data": [[0.0, 41750.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8375.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2918.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 77.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 31.457627118644073, "minX": 1.62511326E12, "maxY": 128.0, "series": [{"data": [[1.62511344E12, 31.457627118644073], [1.62511332E12, 128.0], [1.62511338E12, 127.88224420001849], [1.62511326E12, 115.65168539325843]], "isOverall": false, "label": "JavaTest_peek", "isController": false}, {"data": [[1.62511344E12, 63.791952969919116]], "isOverall": false, "label": "JavaTest_cool", "isController": false}, {"data": [[1.62511326E12, 63.268727272727276]], "isOverall": false, "label": "JavaTest_warm", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511344E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 14338.0, "series": [{"data": [[3.0, 10201.0], [4.0, 10462.0], [5.0, 991.0], [6.0, 970.0], [7.0, 841.5], [8.0, 890.0], [10.0, 904.0], [11.0, 711.0], [13.0, 852.5], [14.0, 775.0], [17.0, 837.5], [18.0, 10249.0], [20.0, 799.0], [21.0, 797.5], [22.0, 796.0], [23.0, 774.0], [24.0, 188.75], [25.0, 10.333333333333334], [26.0, 9.5], [27.0, 368.0], [28.0, 8601.0], [29.0, 517.3333333333334], [30.0, 5894.5], [31.0, 785.0], [33.0, 5650.0], [32.0, 395.0], [34.0, 3765.666666666667], [35.0, 5237.0], [36.0, 3478.333333333333], [37.0, 10355.0], [39.0, 976.0], [38.0, 2088.0], [41.0, 174.0], [42.0, 1100.5], [43.0, 61.0], [45.0, 1222.3333333333335], [44.0, 2249.0], [47.0, 793.5], [46.0, 780.0], [49.0, 6.0], [50.0, 208.0], [51.0, 761.6666666666667], [53.0, 350.5], [52.0, 699.0], [54.0, 557.75], [55.0, 39.0], [57.0, 1536.5], [56.0, 545.6666666666666], [59.0, 1534.5], [61.0, 1533.0], [60.0, 1488.0], [62.0, 452.8333333333333], [63.0, 69.0], [64.0, 212.88877511839286], [67.0, 2396.0], [68.0, 2484.0], [75.0, 915.0], [74.0, 2579.0], [73.0, 2635.0], [72.0, 2555.0], [76.0, 85.33333333333333], [77.0, 97.0], [78.0, 8.0], [81.0, 1396.5], [83.0, 2786.0], [85.0, 2778.0], [89.0, 2711.0], [88.0, 2800.0], [92.0, 2787.0], [98.0, 2793.0], [97.0, 2782.0], [96.0, 2779.0], [102.0, 2767.0], [107.0, 2595.0], [111.0, 2590.0], [109.0, 2595.0], [112.0, 86.0], [118.0, 8.0], [117.0, 9.333333333333334], [123.0, 89.0], [122.0, 80.0], [121.0, 2578.0], [120.0, 1294.5], [127.0, 83.0], [126.0, 505.8], [125.0, 8.0], [124.0, 15.5], [128.0, 370.7343167450158]], "isOverall": false, "label": "post", "isController": false}, {"data": [[108.6740533806492, 333.30593831401586]], "isOverall": false, "label": "post-Aggregated", "isController": false}, {"data": [[2.0, 14127.333333333334], [3.0, 11865.0], [4.0, 972.0], [5.0, 13277.0], [6.0, 14338.0], [7.0, 9961.0], [8.0, 6078.5], [9.0, 4370.666666666667], [10.0, 733.0], [11.0, 976.0], [12.0, 978.0], [13.0, 765.0], [14.0, 898.0], [15.0, 846.0], [16.0, 848.5], [18.0, 7188.333333333333], [19.0, 531.3333333333334], [20.0, 19.0], [22.0, 22.5], [23.0, 26.71428571428571], [24.0, 221.25], [25.0, 269.16666666666663], [26.0, 525.0], [27.0, 21.75], [28.0, 8946.142857142857], [29.0, 3719.0], [30.0, 376.0], [31.0, 5856.0], [32.0, 5630.5], [33.0, 192.75], [35.0, 412.0], [37.0, 790.0], [36.0, 753.0], [38.0, 397.5], [41.0, 784.0], [40.0, 973.6666666666667], [43.0, 388.0], [42.0, 1479.5], [44.0, 1477.5], [45.0, 746.0], [47.0, 2292.0], [46.0, 1515.5], [49.0, 205.99999999999997], [48.0, 1270.0], [51.0, 250.33333333333331], [50.0, 1473.6666666666665], [52.0, 1150.5], [53.0, 17.5], [55.0, 2187.0], [54.0, 739.0], [56.0, 439.5], [57.0, 1165.5], [58.0, 1036.0], [59.0, 58.333333333333336], [63.0, 1225.5], [62.0, 94.0], [64.0, 263.66730182926807], [66.0, 2391.0], [65.0, 2410.0], [71.0, 2570.0], [70.0, 2563.0], [69.0, 2397.0], [72.0, 101.0], [75.0, 93.5], [76.0, 940.6666666666666], [77.0, 284.7692307692308], [79.0, 2671.0], [78.0, 2675.0], [82.0, 2784.0], [80.0, 2760.0], [87.0, 2800.0], [86.0, 2792.0], [84.0, 2761.0], [91.0, 2797.0], [90.0, 2779.0], [95.0, 2874.0], [94.0, 2792.0], [93.0, 2794.0], [99.0, 2793.0], [103.0, 2782.0], [101.0, 2705.0], [100.0, 2797.0], [106.0, 2687.0], [105.0, 2696.0], [110.0, 2681.0], [108.0, 2603.0], [114.0, 2588.0], [113.0, 2598.0], [119.0, 869.6666666666666], [118.0, 14.5], [117.0, 13.666666666666666], [116.0, 91.5], [123.0, 97.0], [122.0, 99.0], [121.0, 102.0], [127.0, 916.3333333333334], [126.0, 16.0], [125.0, 17.666666666666668], [124.0, 27.0], [128.0, 446.92373247033566], [1.0, 14066.666666666666]], "isOverall": false, "label": "get", "isController": false}, {"data": [[108.48428523149752, 407.91468589238127]], "isOverall": false, "label": "get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 128.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12030.033333333333, "minX": 1.62511326E12, "maxY": 503444.4666666667, "series": [{"data": [[1.62511344E12, 305022.95], [1.62511332E12, 354096.0], [1.62511338E12, 503444.4666666667], [1.62511326E12, 72266.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62511344E12, 51262.48333333333], [1.62511332E12, 59355.11666666667], [1.62511338E12, 84376.0], [1.62511326E12, 12030.033333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511344E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 155.33368935001545, "minX": 1.62511326E12, "maxY": 716.5777917189467, "series": [{"data": [[1.62511344E12, 155.33368935001545], [1.62511332E12, 453.3458607095938], [1.62511338E12, 315.4324424304065], [1.62511326E12, 628.4067460317469]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62511344E12, 214.23822504922077], [1.62511332E12, 545.660927848602], [1.62511338E12, 383.7784757505767], [1.62511326E12, 716.5777917189467]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511344E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 155.30698809887045, "minX": 1.62511326E12, "maxY": 716.5332496863233, "series": [{"data": [[1.62511344E12, 155.30698809887045], [1.62511332E12, 453.32260183968543], [1.62511338E12, 315.40682511791334], [1.62511326E12, 628.378968253969]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62511344E12, 214.2177797970624], [1.62511332E12, 545.6431857011436], [1.62511338E12, 383.757413394919], [1.62511326E12, 716.5332496863233]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511344E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62511326E12, "maxY": 50.84692597239651, "series": [{"data": [[1.62511344E12, 0.0], [1.62511332E12, 0.0], [1.62511338E12, 0.0], [1.62511326E12, 0.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62511344E12, 7.826896865061331], [1.62511332E12, 7.836903666710481], [1.62511338E12, 8.526836027713566], [1.62511326E12, 50.84692597239651]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511344E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.62511326E12, "maxY": 19870.0, "series": [{"data": [[1.62511344E12, 19870.0], [1.62511332E12, 18235.0], [1.62511338E12, 12744.0], [1.62511326E12, 12431.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62511344E12, 96.0], [1.62511332E12, 1500.0], [1.62511338E12, 1055.5000000000218], [1.62511326E12, 976.3000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62511344E12, 2089.900000000005], [1.62511332E12, 3810.7999999999993], [1.62511338E12, 2484.0], [1.62511326E12, 1253.7899999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62511344E12, 104.0], [1.62511332E12, 2393.0], [1.62511338E12, 1702.0], [1.62511326E12, 1101.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62511344E12, 4.0], [1.62511332E12, 4.0], [1.62511338E12, 4.0], [1.62511326E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62511344E12, 14.0], [1.62511332E12, 86.0], [1.62511338E12, 95.0], [1.62511326E12, 688.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511344E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 18724.0, "series": [{"data": [[3.0, 11019.0], [5.0, 10528.0], [6.0, 10066.0], [9.0, 12.0], [10.0, 971.0], [15.0, 761.0], [16.0, 10267.5], [21.0, 2178.0], [22.0, 2260.5], [41.0, 2711.0], [53.0, 1182.0], [55.0, 1594.0], [57.0, 991.0], [59.0, 1099.0], [69.0, 988.0], [73.0, 705.5], [74.0, 708.5], [75.0, 889.0], [78.0, 798.0], [77.0, 902.0], [83.0, 594.0], [84.0, 796.0], [87.0, 699.0], [93.0, 584.0], [92.0, 670.0], [97.0, 687.0], [103.0, 564.0], [100.0, 705.0], [102.0, 89.5], [104.0, 615.5], [107.0, 630.0], [109.0, 607.0], [108.0, 597.0], [113.0, 613.0], [115.0, 13.0], [121.0, 56.0], [125.0, 15.0], [127.0, 17.0], [134.0, 493.0], [132.0, 15.5], [136.0, 168.0], [142.0, 301.5], [145.0, 13.0], [146.0, 14.0], [157.0, 17.0], [154.0, 71.0], [166.0, 584.5], [165.0, 65.0], [183.0, 103.0], [194.0, 14.0], [192.0, 16.0], [197.0, 14.0], [210.0, 508.0], [215.0, 13.0], [214.0, 74.5], [223.0, 589.0], [222.0, 14.0], [220.0, 18.5], [231.0, 15.0], [232.0, 14.0], [236.0, 75.0], [237.0, 89.0], [238.0, 76.5], [247.0, 16.0], [245.0, 15.0], [246.0, 15.0], [253.0, 13.0], [249.0, 14.0], [252.0, 90.5], [254.0, 99.5], [256.0, 85.0], [264.0, 198.0], [274.0, 103.0], [273.0, 93.0], [287.0, 95.0], [279.0, 92.0], [283.0, 184.0], [281.0, 14.0], [300.0, 77.0], [295.0, 16.0], [288.0, 17.0], [303.0, 186.0], [305.0, 55.0], [315.0, 73.0], [308.0, 102.0], [314.0, 93.0], [333.0, 75.0], [323.0, 19.5], [335.0, 91.0], [330.0, 17.5], [322.0, 82.0], [332.0, 13.0], [338.0, 27.0], [347.0, 46.0], [348.0, 80.5], [349.0, 73.0], [339.0, 21.0], [343.0, 14.0], [350.0, 35.0], [353.0, 73.0], [362.0, 77.0], [367.0, 94.0], [354.0, 101.0], [356.0, 83.0], [359.0, 18.0], [360.0, 14.0], [381.0, 94.0], [374.0, 86.0], [368.0, 96.0], [370.0, 85.5], [382.0, 94.5], [378.0, 107.5], [376.0, 15.0], [389.0, 324.0], [399.0, 14.0], [392.0, 90.0], [388.0, 186.5], [390.0, 13.0], [412.0, 94.5], [407.0, 62.0], [402.0, 94.0], [411.0, 83.0], [404.0, 94.5], [413.0, 13.0], [408.0, 13.0], [414.0, 16.0], [418.0, 80.0], [421.0, 89.0], [431.0, 80.0], [429.0, 94.0], [424.0, 13.0], [420.0, 14.0], [416.0, 15.0], [444.0, 89.0], [443.0, 84.0], [439.0, 106.0], [441.0, 96.0], [462.0, 115.0], [459.0, 109.0], [458.0, 96.5], [456.0, 82.0], [449.0, 13.0], [452.0, 13.0], [469.0, 206.0], [464.0, 114.0], [478.0, 113.0], [467.0, 290.0], [466.0, 13.0], [480.0, 94.0], [481.0, 181.0], [495.0, 297.0], [486.0, 108.0], [491.0, 93.0], [485.0, 13.0], [506.0, 88.0], [499.0, 14.0], [519.0, 98.0], [543.0, 22.0], [555.0, 230.0], [564.0, 14.0], [571.0, 14.0], [550.0, 13.0], [586.0, 16.0], [1.0, 18724.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 10303.5], [564.0, 10724.0], [571.0, 10263.0], [586.0, 10240.5], [10.0, 10400.0], [408.0, 10485.0], [414.0, 10382.5], [420.0, 10391.0], [416.0, 10381.0], [456.0, 9711.0], [499.0, 10199.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 18724.0, "series": [{"data": [[3.0, 11019.0], [5.0, 10528.0], [6.0, 10066.0], [9.0, 12.0], [10.0, 971.0], [15.0, 761.0], [16.0, 10267.5], [21.0, 2178.0], [22.0, 2260.5], [41.0, 2711.0], [53.0, 1182.0], [55.0, 1594.0], [57.0, 991.0], [59.0, 1099.0], [69.0, 988.0], [73.0, 705.5], [74.0, 708.5], [75.0, 889.0], [78.0, 798.0], [77.0, 902.0], [83.0, 594.0], [84.0, 796.0], [87.0, 699.0], [93.0, 584.0], [92.0, 670.0], [97.0, 687.0], [103.0, 564.0], [100.0, 705.0], [102.0, 89.5], [104.0, 615.5], [107.0, 630.0], [109.0, 607.0], [108.0, 596.5], [113.0, 613.0], [115.0, 13.0], [121.0, 56.0], [125.0, 15.0], [127.0, 17.0], [134.0, 493.0], [132.0, 15.5], [136.0, 168.0], [142.0, 301.5], [145.0, 13.0], [146.0, 14.0], [157.0, 17.0], [154.0, 71.0], [166.0, 584.5], [165.0, 65.0], [183.0, 103.0], [194.0, 14.0], [192.0, 16.0], [197.0, 14.0], [210.0, 508.0], [215.0, 13.0], [214.0, 74.5], [223.0, 589.0], [222.0, 14.0], [220.0, 18.5], [231.0, 15.0], [232.0, 14.0], [236.0, 75.0], [237.0, 89.0], [238.0, 76.5], [247.0, 16.0], [245.0, 15.0], [246.0, 15.0], [253.0, 13.0], [249.0, 14.0], [252.0, 90.5], [254.0, 99.5], [256.0, 85.0], [264.0, 198.0], [274.0, 103.0], [273.0, 93.0], [287.0, 95.0], [279.0, 92.0], [283.0, 184.0], [281.0, 14.0], [300.0, 77.0], [295.0, 16.0], [288.0, 17.0], [303.0, 186.0], [305.0, 55.0], [315.0, 73.0], [308.0, 102.0], [314.0, 93.0], [333.0, 75.0], [323.0, 19.0], [335.0, 91.0], [330.0, 17.5], [322.0, 82.0], [332.0, 13.0], [338.0, 27.0], [347.0, 46.0], [348.0, 80.5], [349.0, 73.0], [339.0, 21.0], [343.0, 13.0], [350.0, 35.0], [353.0, 73.0], [362.0, 77.0], [367.0, 94.0], [354.0, 101.0], [356.0, 83.0], [359.0, 18.0], [360.0, 13.0], [381.0, 94.0], [374.0, 86.0], [368.0, 96.0], [370.0, 85.5], [382.0, 94.5], [378.0, 107.5], [376.0, 15.0], [389.0, 324.0], [399.0, 14.0], [392.0, 90.0], [388.0, 186.5], [390.0, 13.0], [412.0, 94.0], [407.0, 62.0], [402.0, 94.0], [411.0, 83.0], [404.0, 94.5], [413.0, 13.0], [408.0, 13.0], [414.0, 16.0], [418.0, 80.0], [421.0, 89.0], [431.0, 80.0], [429.0, 94.0], [424.0, 13.0], [420.0, 14.0], [416.0, 15.0], [444.0, 89.0], [443.0, 84.0], [439.0, 106.0], [441.0, 96.0], [462.0, 115.0], [459.0, 109.0], [458.0, 96.5], [456.0, 82.0], [449.0, 13.0], [452.0, 13.0], [469.0, 206.0], [464.0, 114.0], [478.0, 113.0], [467.0, 290.0], [466.0, 13.0], [480.0, 94.0], [481.0, 181.0], [495.0, 297.0], [486.0, 108.0], [491.0, 93.0], [485.0, 13.0], [506.0, 88.0], [499.0, 14.0], [519.0, 98.0], [543.0, 22.0], [555.0, 230.0], [564.0, 14.0], [571.0, 14.0], [550.0, 13.0], [586.0, 16.0], [1.0, 18724.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[16.0, 10303.5], [564.0, 10724.0], [571.0, 10263.0], [586.0, 10240.5], [10.0, 10400.0], [408.0, 10485.0], [414.0, 10382.5], [420.0, 10391.0], [416.0, 10381.0], [456.0, 9711.0], [499.0, 10199.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 586.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 53.9, "minX": 1.62511326E12, "maxY": 359.48333333333335, "series": [{"data": [[1.62511344E12, 218.3], [1.62511332E12, 253.65], [1.62511338E12, 359.48333333333335], [1.62511326E12, 53.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511344E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.62511326E12, "maxY": 360.6333333333333, "series": [{"data": [[1.62511344E12, 218.0], [1.62511332E12, 253.65], [1.62511338E12, 360.6333333333333], [1.62511326E12, 51.766666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62511344E12, 1.2833333333333334]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62511344E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.62511326E12, "maxY": 180.41666666666666, "series": [{"data": [[1.62511344E12, 0.6666666666666666]], "isOverall": false, "label": "get-failure", "isController": false}, {"data": [[1.62511344E12, 109.38333333333334], [1.62511332E12, 126.81666666666666], [1.62511338E12, 180.41666666666666], [1.62511326E12, 26.566666666666666]], "isOverall": false, "label": "get-success", "isController": false}, {"data": [[1.62511344E12, 108.61666666666666], [1.62511332E12, 126.83333333333333], [1.62511338E12, 180.21666666666667], [1.62511326E12, 25.2]], "isOverall": false, "label": "post-success", "isController": false}, {"data": [[1.62511344E12, 0.6166666666666667]], "isOverall": false, "label": "post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511344E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.2833333333333334, "minX": 1.62511326E12, "maxY": 360.6333333333333, "series": [{"data": [[1.62511344E12, 218.0], [1.62511332E12, 253.65], [1.62511338E12, 360.6333333333333], [1.62511326E12, 51.766666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62511344E12, 1.2833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62511344E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

