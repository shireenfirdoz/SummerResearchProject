/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 20083.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 10.0], [20.2, 10.0], [20.3, 10.0], [20.4, 10.0], [20.5, 10.0], [20.6, 10.0], [20.7, 10.0], [20.8, 10.0], [20.9, 10.0], [21.0, 10.0], [21.1, 10.0], [21.2, 10.0], [21.3, 10.0], [21.4, 10.0], [21.5, 10.0], [21.6, 10.0], [21.7, 10.0], [21.8, 10.0], [21.9, 10.0], [22.0, 10.0], [22.1, 10.0], [22.2, 10.0], [22.3, 10.0], [22.4, 10.0], [22.5, 10.0], [22.6, 11.0], [22.7, 11.0], [22.8, 11.0], [22.9, 11.0], [23.0, 11.0], [23.1, 11.0], [23.2, 11.0], [23.3, 11.0], [23.4, 11.0], [23.5, 11.0], [23.6, 11.0], [23.7, 11.0], [23.8, 11.0], [23.9, 11.0], [24.0, 11.0], [24.1, 11.0], [24.2, 11.0], [24.3, 11.0], [24.4, 11.0], [24.5, 12.0], [24.6, 12.0], [24.7, 12.0], [24.8, 12.0], [24.9, 12.0], [25.0, 12.0], [25.1, 12.0], [25.2, 12.0], [25.3, 12.0], [25.4, 12.0], [25.5, 12.0], [25.6, 12.0], [25.7, 12.0], [25.8, 12.0], [25.9, 12.0], [26.0, 12.0], [26.1, 13.0], [26.2, 13.0], [26.3, 13.0], [26.4, 13.0], [26.5, 13.0], [26.6, 13.0], [26.7, 13.0], [26.8, 13.0], [26.9, 13.0], [27.0, 13.0], [27.1, 14.0], [27.2, 14.0], [27.3, 14.0], [27.4, 14.0], [27.5, 14.0], [27.6, 14.0], [27.7, 14.0], [27.8, 14.0], [27.9, 14.0], [28.0, 15.0], [28.1, 15.0], [28.2, 15.0], [28.3, 15.0], [28.4, 15.0], [28.5, 15.0], [28.6, 15.0], [28.7, 16.0], [28.8, 16.0], [28.9, 16.0], [29.0, 16.0], [29.1, 16.0], [29.2, 16.0], [29.3, 16.0], [29.4, 16.0], [29.5, 17.0], [29.6, 17.0], [29.7, 17.0], [29.8, 17.0], [29.9, 18.0], [30.0, 18.0], [30.1, 18.0], [30.2, 19.0], [30.3, 19.0], [30.4, 19.0], [30.5, 19.0], [30.6, 20.0], [30.7, 20.0], [30.8, 20.0], [30.9, 20.0], [31.0, 21.0], [31.1, 21.0], [31.2, 21.0], [31.3, 22.0], [31.4, 22.0], [31.5, 23.0], [31.6, 23.0], [31.7, 24.0], [31.8, 24.0], [31.9, 24.0], [32.0, 25.0], [32.1, 25.0], [32.2, 26.0], [32.3, 27.0], [32.4, 27.0], [32.5, 28.0], [32.6, 28.0], [32.7, 28.0], [32.8, 29.0], [32.9, 30.0], [33.0, 30.0], [33.1, 31.0], [33.2, 32.0], [33.3, 32.0], [33.4, 33.0], [33.5, 34.0], [33.6, 34.0], [33.7, 35.0], [33.8, 36.0], [33.9, 36.0], [34.0, 37.0], [34.1, 38.0], [34.2, 38.0], [34.3, 39.0], [34.4, 40.0], [34.5, 40.0], [34.6, 41.0], [34.7, 42.0], [34.8, 43.0], [34.9, 44.0], [35.0, 44.0], [35.1, 45.0], [35.2, 45.0], [35.3, 46.0], [35.4, 47.0], [35.5, 47.0], [35.6, 48.0], [35.7, 48.0], [35.8, 49.0], [35.9, 50.0], [36.0, 51.0], [36.1, 51.0], [36.2, 52.0], [36.3, 52.0], [36.4, 53.0], [36.5, 54.0], [36.6, 54.0], [36.7, 55.0], [36.8, 56.0], [36.9, 56.0], [37.0, 57.0], [37.1, 58.0], [37.2, 58.0], [37.3, 59.0], [37.4, 59.0], [37.5, 60.0], [37.6, 60.0], [37.7, 61.0], [37.8, 62.0], [37.9, 62.0], [38.0, 63.0], [38.1, 63.0], [38.2, 64.0], [38.3, 64.0], [38.4, 65.0], [38.5, 65.0], [38.6, 66.0], [38.7, 67.0], [38.8, 67.0], [38.9, 68.0], [39.0, 68.0], [39.1, 68.0], [39.2, 69.0], [39.3, 70.0], [39.4, 70.0], [39.5, 71.0], [39.6, 71.0], [39.7, 72.0], [39.8, 72.0], [39.9, 72.0], [40.0, 73.0], [40.1, 74.0], [40.2, 74.0], [40.3, 75.0], [40.4, 75.0], [40.5, 76.0], [40.6, 76.0], [40.7, 77.0], [40.8, 77.0], [40.9, 78.0], [41.0, 78.0], [41.1, 79.0], [41.2, 79.0], [41.3, 80.0], [41.4, 80.0], [41.5, 81.0], [41.6, 81.0], [41.7, 82.0], [41.8, 82.0], [41.9, 83.0], [42.0, 83.0], [42.1, 84.0], [42.2, 84.0], [42.3, 84.0], [42.4, 85.0], [42.5, 85.0], [42.6, 86.0], [42.7, 86.0], [42.8, 86.0], [42.9, 87.0], [43.0, 87.0], [43.1, 88.0], [43.2, 88.0], [43.3, 88.0], [43.4, 89.0], [43.5, 89.0], [43.6, 90.0], [43.7, 90.0], [43.8, 90.0], [43.9, 91.0], [44.0, 91.0], [44.1, 92.0], [44.2, 92.0], [44.3, 93.0], [44.4, 93.0], [44.5, 93.0], [44.6, 94.0], [44.7, 94.0], [44.8, 95.0], [44.9, 95.0], [45.0, 96.0], [45.1, 96.0], [45.2, 97.0], [45.3, 97.0], [45.4, 98.0], [45.5, 98.0], [45.6, 99.0], [45.7, 99.0], [45.8, 100.0], [45.9, 100.0], [46.0, 101.0], [46.1, 102.0], [46.2, 102.0], [46.3, 104.0], [46.4, 104.0], [46.5, 106.0], [46.6, 107.0], [46.7, 109.0], [46.8, 110.0], [46.9, 112.0], [47.0, 113.0], [47.1, 115.0], [47.2, 117.0], [47.3, 119.0], [47.4, 121.0], [47.5, 123.0], [47.6, 126.0], [47.7, 128.0], [47.8, 132.0], [47.9, 134.0], [48.0, 137.0], [48.1, 139.0], [48.2, 142.0], [48.3, 144.0], [48.4, 147.0], [48.5, 149.0], [48.6, 151.0], [48.7, 153.0], [48.8, 156.0], [48.9, 158.0], [49.0, 160.0], [49.1, 163.0], [49.2, 166.0], [49.3, 168.0], [49.4, 171.0], [49.5, 173.0], [49.6, 176.0], [49.7, 179.0], [49.8, 181.0], [49.9, 184.0], [50.0, 186.0], [50.1, 188.0], [50.2, 190.0], [50.3, 192.0], [50.4, 194.0], [50.5, 195.0], [50.6, 196.0], [50.7, 198.0], [50.8, 199.0], [50.9, 200.0], [51.0, 201.0], [51.1, 202.0], [51.2, 203.0], [51.3, 205.0], [51.4, 206.0], [51.5, 207.0], [51.6, 209.0], [51.7, 210.0], [51.8, 211.0], [51.9, 213.0], [52.0, 214.0], [52.1, 215.0], [52.2, 217.0], [52.3, 218.0], [52.4, 220.0], [52.5, 222.0], [52.6, 223.0], [52.7, 225.0], [52.8, 227.0], [52.9, 229.0], [53.0, 232.0], [53.1, 234.0], [53.2, 236.0], [53.3, 238.0], [53.4, 241.0], [53.5, 245.0], [53.6, 249.0], [53.7, 253.0], [53.8, 255.0], [53.9, 259.0], [54.0, 262.0], [54.1, 265.0], [54.2, 268.0], [54.3, 271.0], [54.4, 272.0], [54.5, 275.0], [54.6, 276.0], [54.7, 278.0], [54.8, 280.0], [54.9, 281.0], [55.0, 282.0], [55.1, 284.0], [55.2, 285.0], [55.3, 286.0], [55.4, 287.0], [55.5, 288.0], [55.6, 289.0], [55.7, 290.0], [55.8, 291.0], [55.9, 292.0], [56.0, 293.0], [56.1, 293.0], [56.2, 294.0], [56.3, 295.0], [56.4, 296.0], [56.5, 297.0], [56.6, 298.0], [56.7, 298.0], [56.8, 299.0], [56.9, 300.0], [57.0, 300.0], [57.1, 301.0], [57.2, 302.0], [57.3, 303.0], [57.4, 303.0], [57.5, 304.0], [57.6, 305.0], [57.7, 306.0], [57.8, 307.0], [57.9, 307.0], [58.0, 308.0], [58.1, 309.0], [58.2, 310.0], [58.3, 311.0], [58.4, 311.0], [58.5, 312.0], [58.6, 313.0], [58.7, 314.0], [58.8, 315.0], [58.9, 316.0], [59.0, 317.0], [59.1, 318.0], [59.2, 319.0], [59.3, 320.0], [59.4, 321.0], [59.5, 322.0], [59.6, 323.0], [59.7, 324.0], [59.8, 325.0], [59.9, 326.0], [60.0, 327.0], [60.1, 328.0], [60.2, 330.0], [60.3, 331.0], [60.4, 333.0], [60.5, 334.0], [60.6, 336.0], [60.7, 338.0], [60.8, 341.0], [60.9, 343.0], [61.0, 346.0], [61.1, 349.0], [61.2, 353.0], [61.3, 356.0], [61.4, 358.0], [61.5, 361.0], [61.6, 363.0], [61.7, 365.0], [61.8, 367.0], [61.9, 369.0], [62.0, 370.0], [62.1, 372.0], [62.2, 374.0], [62.3, 375.0], [62.4, 376.0], [62.5, 377.0], [62.6, 378.0], [62.7, 379.0], [62.8, 381.0], [62.9, 381.0], [63.0, 382.0], [63.1, 383.0], [63.2, 384.0], [63.3, 385.0], [63.4, 385.0], [63.5, 386.0], [63.6, 387.0], [63.7, 388.0], [63.8, 389.0], [63.9, 390.0], [64.0, 390.0], [64.1, 391.0], [64.2, 391.0], [64.3, 392.0], [64.4, 393.0], [64.5, 394.0], [64.6, 394.0], [64.7, 395.0], [64.8, 395.0], [64.9, 396.0], [65.0, 397.0], [65.1, 397.0], [65.2, 398.0], [65.3, 398.0], [65.4, 399.0], [65.5, 400.0], [65.6, 401.0], [65.7, 401.0], [65.8, 402.0], [65.9, 402.0], [66.0, 403.0], [66.1, 404.0], [66.2, 404.0], [66.3, 405.0], [66.4, 405.0], [66.5, 406.0], [66.6, 407.0], [66.7, 408.0], [66.8, 408.0], [66.9, 409.0], [67.0, 410.0], [67.1, 410.0], [67.2, 411.0], [67.3, 412.0], [67.4, 413.0], [67.5, 414.0], [67.6, 415.0], [67.7, 416.0], [67.8, 417.0], [67.9, 418.0], [68.0, 419.0], [68.1, 420.0], [68.2, 422.0], [68.3, 423.0], [68.4, 425.0], [68.5, 426.0], [68.6, 428.0], [68.7, 430.0], [68.8, 433.0], [68.9, 437.0], [69.0, 442.0], [69.1, 447.0], [69.2, 452.0], [69.3, 456.0], [69.4, 459.0], [69.5, 462.0], [69.6, 464.0], [69.7, 467.0], [69.8, 469.0], [69.9, 471.0], [70.0, 473.0], [70.1, 474.0], [70.2, 476.0], [70.3, 477.0], [70.4, 479.0], [70.5, 480.0], [70.6, 481.0], [70.7, 482.0], [70.8, 483.0], [70.9, 484.0], [71.0, 485.0], [71.1, 486.0], [71.2, 487.0], [71.3, 488.0], [71.4, 489.0], [71.5, 490.0], [71.6, 491.0], [71.7, 492.0], [71.8, 493.0], [71.9, 494.0], [72.0, 494.0], [72.1, 495.0], [72.2, 496.0], [72.3, 497.0], [72.4, 498.0], [72.5, 499.0], [72.6, 499.0], [72.7, 500.0], [72.8, 501.0], [72.9, 501.0], [73.0, 502.0], [73.1, 503.0], [73.2, 504.0], [73.3, 505.0], [73.4, 506.0], [73.5, 507.0], [73.6, 509.0], [73.7, 510.0], [73.8, 512.0], [73.9, 513.0], [74.0, 515.0], [74.1, 517.0], [74.2, 519.0], [74.3, 522.0], [74.4, 525.0], [74.5, 529.0], [74.6, 535.0], [74.7, 542.0], [74.8, 550.0], [74.9, 557.0], [75.0, 563.0], [75.1, 567.0], [75.2, 571.0], [75.3, 574.0], [75.4, 577.0], [75.5, 579.0], [75.6, 582.0], [75.7, 583.0], [75.8, 585.0], [75.9, 587.0], [76.0, 589.0], [76.1, 591.0], [76.2, 593.0], [76.3, 594.0], [76.4, 596.0], [76.5, 598.0], [76.6, 599.0], [76.7, 601.0], [76.8, 602.0], [76.9, 604.0], [77.0, 606.0], [77.1, 608.0], [77.2, 610.0], [77.3, 613.0], [77.4, 616.0], [77.5, 621.0], [77.6, 629.0], [77.7, 639.0], [77.8, 650.0], [77.9, 659.0], [78.0, 668.0], [78.1, 673.0], [78.2, 679.0], [78.3, 683.0], [78.4, 686.0], [78.5, 690.0], [78.6, 694.0], [78.7, 697.0], [78.8, 701.0], [78.9, 704.0], [79.0, 709.0], [79.1, 713.0], [79.2, 721.0], [79.3, 733.0], [79.4, 746.0], [79.5, 760.0], [79.6, 771.0], [79.7, 780.0], [79.8, 788.0], [79.9, 795.0], [80.0, 800.0], [80.1, 807.0], [80.2, 815.0], [80.3, 826.0], [80.4, 838.0], [80.5, 853.0], [80.6, 870.0], [80.7, 880.0], [80.8, 888.0], [80.9, 893.0], [81.0, 899.0], [81.1, 905.0], [81.2, 910.0], [81.3, 919.0], [81.4, 929.0], [81.5, 950.0], [81.6, 967.0], [81.7, 978.0], [81.8, 985.0], [81.9, 993.0], [82.0, 998.0], [82.1, 1003.0], [82.2, 1008.0], [82.3, 1016.0], [82.4, 1028.0], [82.5, 1045.0], [82.6, 1064.0], [82.7, 1075.0], [82.8, 1086.0], [82.9, 1094.0], [83.0, 1100.0], [83.1, 1104.0], [83.2, 1109.0], [83.3, 1114.0], [83.4, 1123.0], [83.5, 1142.0], [83.6, 1160.0], [83.7, 1177.0], [83.8, 1186.0], [83.9, 1191.0], [84.0, 1197.0], [84.1, 1202.0], [84.2, 1207.0], [84.3, 1216.0], [84.4, 1230.0], [84.5, 1251.0], [84.6, 1272.0], [84.7, 1286.0], [84.8, 1293.0], [84.9, 1302.0], [85.0, 1312.0], [85.1, 1324.0], [85.2, 1348.0], [85.3, 1374.0], [85.4, 1389.0], [85.5, 1396.0], [85.6, 1404.0], [85.7, 1413.0], [85.8, 1436.0], [85.9, 1471.0], [86.0, 1489.0], [86.1, 1503.0], [86.2, 1529.0], [86.3, 1566.0], [86.4, 1589.0], [86.5, 1598.0], [86.6, 1607.0], [86.7, 1628.0], [86.8, 1669.0], [86.9, 1694.0], [87.0, 1705.0], [87.1, 1730.0], [87.2, 1767.0], [87.3, 1784.0], [87.4, 1797.0], [87.5, 1808.0], [87.6, 1834.0], [87.7, 1875.0], [87.8, 1895.0], [87.9, 1909.0], [88.0, 1953.0], [88.1, 1990.0], [88.2, 2007.0], [88.3, 2028.0], [88.4, 2067.0], [88.5, 2092.0], [88.6, 2107.0], [88.7, 2165.0], [88.8, 2190.0], [88.9, 2206.0], [89.0, 2234.0], [89.1, 2276.0], [89.2, 2302.0], [89.3, 2315.0], [89.4, 2362.0], [89.5, 2392.0], [89.6, 2405.0], [89.7, 2437.0], [89.8, 2482.0], [89.9, 2506.0], [90.0, 2536.0], [90.1, 2590.0], [90.2, 2604.0], [90.3, 2638.0], [90.4, 2686.0], [90.5, 2702.0], [90.6, 2743.0], [90.7, 2782.0], [90.8, 2797.0], [90.9, 2806.0], [91.0, 2820.0], [91.1, 2866.0], [91.2, 2889.0], [91.3, 2909.0], [91.4, 2971.0], [91.5, 2999.0], [91.6, 3052.0], [91.7, 3098.0], [91.8, 3114.0], [91.9, 3176.0], [92.0, 3195.0], [92.1, 3209.0], [92.2, 3267.0], [92.3, 3294.0], [92.4, 3310.0], [92.5, 3374.0], [92.6, 3400.0], [92.7, 3437.0], [92.8, 3490.0], [92.9, 3506.0], [93.0, 3573.0], [93.1, 3601.0], [93.2, 3624.0], [93.3, 3682.0], [93.4, 3693.0], [93.5, 3704.0], [93.6, 3720.0], [93.7, 3773.0], [93.8, 3787.0], [93.9, 3797.0], [94.0, 3807.0], [94.1, 3858.0], [94.2, 3883.0], [94.3, 3895.0], [94.4, 3911.0], [94.5, 3984.0], [94.6, 4009.0], [94.7, 4074.0], [94.8, 4100.0], [94.9, 4144.0], [95.0, 4199.0], [95.1, 4224.0], [95.2, 4286.0], [95.3, 4298.0], [95.4, 4315.0], [95.5, 4384.0], [95.6, 4409.0], [95.7, 4492.0], [95.8, 4564.0], [95.9, 4602.0], [96.0, 4621.0], [96.1, 4686.0], [96.2, 4700.0], [96.3, 4714.0], [96.4, 4789.0], [96.5, 4806.0], [96.6, 4893.0], [96.7, 5004.0], [96.8, 5112.0], [96.9, 5205.0], [97.0, 5296.0], [97.1, 5399.0], [97.2, 5579.0], [97.3, 5602.0], [97.4, 5688.0], [97.5, 5799.0], [97.6, 5892.0], [97.7, 5982.0], [97.8, 6221.0], [97.9, 6617.0], [98.0, 7026.0], [98.1, 7500.0], [98.2, 7998.0], [98.3, 8166.0], [98.4, 8313.0], [98.5, 8395.0], [98.6, 8470.0], [98.7, 8510.0], [98.8, 8609.0], [98.9, 8697.0], [99.0, 8788.0], [99.1, 8811.0], [99.2, 8903.0], [99.3, 9025.0], [99.4, 9208.0], [99.5, 9405.0], [99.6, 9649.0], [99.7, 9804.0], [99.8, 9918.0], [99.9, 10278.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 8.0], [0.1, 10.0], [0.2, 12.0], [0.3, 13.0], [0.4, 13.0], [0.5, 13.0], [0.6, 13.0], [0.7, 14.0], [0.8, 14.0], [0.9, 14.0], [1.0, 14.0], [1.1, 14.0], [1.2, 14.0], [1.3, 15.0], [1.4, 15.0], [1.5, 15.0], [1.6, 15.0], [1.7, 15.0], [1.8, 15.0], [1.9, 15.0], [2.0, 15.0], [2.1, 15.0], [2.2, 16.0], [2.3, 16.0], [2.4, 16.0], [2.5, 16.0], [2.6, 16.0], [2.7, 16.0], [2.8, 16.0], [2.9, 16.0], [3.0, 16.0], [3.1, 17.0], [3.2, 17.0], [3.3, 17.0], [3.4, 17.0], [3.5, 17.0], [3.6, 17.0], [3.7, 17.0], [3.8, 17.0], [3.9, 17.0], [4.0, 17.0], [4.1, 18.0], [4.2, 18.0], [4.3, 18.0], [4.4, 18.0], [4.5, 18.0], [4.6, 18.0], [4.7, 18.0], [4.8, 18.0], [4.9, 18.0], [5.0, 18.0], [5.1, 18.0], [5.2, 18.0], [5.3, 19.0], [5.4, 19.0], [5.5, 19.0], [5.6, 19.0], [5.7, 19.0], [5.8, 19.0], [5.9, 19.0], [6.0, 19.0], [6.1, 19.0], [6.2, 19.0], [6.3, 19.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 20.0], [7.3, 20.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 21.0], [8.1, 21.0], [8.2, 21.0], [8.3, 21.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 22.0], [9.0, 22.0], [9.1, 22.0], [9.2, 22.0], [9.3, 23.0], [9.4, 23.0], [9.5, 23.0], [9.6, 23.0], [9.7, 23.0], [9.8, 23.0], [9.9, 23.0], [10.0, 23.0], [10.1, 24.0], [10.2, 24.0], [10.3, 24.0], [10.4, 24.0], [10.5, 24.0], [10.6, 24.0], [10.7, 24.0], [10.8, 24.0], [10.9, 25.0], [11.0, 25.0], [11.1, 25.0], [11.2, 25.0], [11.3, 25.0], [11.4, 25.0], [11.5, 25.0], [11.6, 26.0], [11.7, 26.0], [11.8, 26.0], [11.9, 26.0], [12.0, 26.0], [12.1, 26.0], [12.2, 26.0], [12.3, 27.0], [12.4, 27.0], [12.5, 27.0], [12.6, 27.0], [12.7, 27.0], [12.8, 27.0], [12.9, 28.0], [13.0, 28.0], [13.1, 28.0], [13.2, 28.0], [13.3, 28.0], [13.4, 29.0], [13.5, 29.0], [13.6, 29.0], [13.7, 29.0], [13.8, 29.0], [13.9, 30.0], [14.0, 30.0], [14.1, 30.0], [14.2, 30.0], [14.3, 30.0], [14.4, 31.0], [14.5, 31.0], [14.6, 31.0], [14.7, 31.0], [14.8, 32.0], [14.9, 32.0], [15.0, 32.0], [15.1, 32.0], [15.2, 33.0], [15.3, 33.0], [15.4, 33.0], [15.5, 33.0], [15.6, 34.0], [15.7, 34.0], [15.8, 34.0], [15.9, 34.0], [16.0, 35.0], [16.1, 35.0], [16.2, 35.0], [16.3, 36.0], [16.4, 36.0], [16.5, 36.0], [16.6, 36.0], [16.7, 37.0], [16.8, 37.0], [16.9, 37.0], [17.0, 38.0], [17.1, 38.0], [17.2, 38.0], [17.3, 39.0], [17.4, 39.0], [17.5, 39.0], [17.6, 40.0], [17.7, 40.0], [17.8, 40.0], [17.9, 41.0], [18.0, 41.0], [18.1, 41.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 43.0], [18.6, 43.0], [18.7, 44.0], [18.8, 44.0], [18.9, 44.0], [19.0, 45.0], [19.1, 45.0], [19.2, 46.0], [19.3, 46.0], [19.4, 46.0], [19.5, 47.0], [19.6, 47.0], [19.7, 48.0], [19.8, 48.0], [19.9, 49.0], [20.0, 49.0], [20.1, 50.0], [20.2, 50.0], [20.3, 51.0], [20.4, 51.0], [20.5, 52.0], [20.6, 52.0], [20.7, 53.0], [20.8, 53.0], [20.9, 54.0], [21.0, 54.0], [21.1, 55.0], [21.2, 55.0], [21.3, 56.0], [21.4, 57.0], [21.5, 57.0], [21.6, 58.0], [21.7, 58.0], [21.8, 59.0], [21.9, 59.0], [22.0, 60.0], [22.1, 61.0], [22.2, 61.0], [22.3, 62.0], [22.4, 62.0], [22.5, 63.0], [22.6, 64.0], [22.7, 64.0], [22.8, 65.0], [22.9, 65.0], [23.0, 66.0], [23.1, 67.0], [23.2, 68.0], [23.3, 68.0], [23.4, 69.0], [23.5, 69.0], [23.6, 70.0], [23.7, 71.0], [23.8, 71.0], [23.9, 72.0], [24.0, 73.0], [24.1, 73.0], [24.2, 74.0], [24.3, 74.0], [24.4, 75.0], [24.5, 75.0], [24.6, 76.0], [24.7, 77.0], [24.8, 77.0], [24.9, 78.0], [25.0, 78.0], [25.1, 78.0], [25.2, 79.0], [25.3, 80.0], [25.4, 80.0], [25.5, 81.0], [25.6, 81.0], [25.7, 81.0], [25.8, 82.0], [25.9, 82.0], [26.0, 83.0], [26.1, 83.0], [26.2, 84.0], [26.3, 84.0], [26.4, 85.0], [26.5, 85.0], [26.6, 85.0], [26.7, 86.0], [26.8, 86.0], [26.9, 86.0], [27.0, 87.0], [27.1, 87.0], [27.2, 87.0], [27.3, 88.0], [27.4, 88.0], [27.5, 89.0], [27.6, 89.0], [27.7, 89.0], [27.8, 89.0], [27.9, 90.0], [28.0, 90.0], [28.1, 90.0], [28.2, 91.0], [28.3, 91.0], [28.4, 91.0], [28.5, 91.0], [28.6, 92.0], [28.7, 92.0], [28.8, 92.0], [28.9, 93.0], [29.0, 93.0], [29.1, 93.0], [29.2, 93.0], [29.3, 94.0], [29.4, 94.0], [29.5, 94.0], [29.6, 95.0], [29.7, 95.0], [29.8, 95.0], [29.9, 95.0], [30.0, 96.0], [30.1, 96.0], [30.2, 96.0], [30.3, 97.0], [30.4, 97.0], [30.5, 97.0], [30.6, 98.0], [30.7, 98.0], [30.8, 98.0], [30.9, 98.0], [31.0, 99.0], [31.1, 99.0], [31.2, 99.0], [31.3, 100.0], [31.4, 100.0], [31.5, 100.0], [31.6, 100.0], [31.7, 101.0], [31.8, 101.0], [31.9, 102.0], [32.0, 102.0], [32.1, 102.0], [32.2, 102.0], [32.3, 103.0], [32.4, 103.0], [32.5, 104.0], [32.6, 104.0], [32.7, 105.0], [32.8, 106.0], [32.9, 106.0], [33.0, 107.0], [33.1, 108.0], [33.2, 108.0], [33.3, 109.0], [33.4, 110.0], [33.5, 111.0], [33.6, 112.0], [33.7, 113.0], [33.8, 114.0], [33.9, 115.0], [34.0, 116.0], [34.1, 118.0], [34.2, 119.0], [34.3, 121.0], [34.4, 123.0], [34.5, 125.0], [34.6, 127.0], [34.7, 129.0], [34.8, 131.0], [34.9, 134.0], [35.0, 136.0], [35.1, 138.0], [35.2, 141.0], [35.3, 143.0], [35.4, 145.0], [35.5, 147.0], [35.6, 150.0], [35.7, 151.0], [35.8, 153.0], [35.9, 155.0], [36.0, 156.0], [36.1, 158.0], [36.2, 160.0], [36.3, 163.0], [36.4, 164.0], [36.5, 166.0], [36.6, 168.0], [36.7, 169.0], [36.8, 171.0], [36.9, 173.0], [37.0, 175.0], [37.1, 177.0], [37.2, 178.0], [37.3, 180.0], [37.4, 181.0], [37.5, 183.0], [37.6, 184.0], [37.7, 186.0], [37.8, 187.0], [37.9, 188.0], [38.0, 190.0], [38.1, 191.0], [38.2, 193.0], [38.3, 194.0], [38.4, 195.0], [38.5, 196.0], [38.6, 198.0], [38.7, 199.0], [38.8, 200.0], [38.9, 201.0], [39.0, 202.0], [39.1, 203.0], [39.2, 205.0], [39.3, 206.0], [39.4, 207.0], [39.5, 209.0], [39.6, 210.0], [39.7, 212.0], [39.8, 213.0], [39.9, 215.0], [40.0, 217.0], [40.1, 218.0], [40.2, 220.0], [40.3, 222.0], [40.4, 223.0], [40.5, 225.0], [40.6, 227.0], [40.7, 229.0], [40.8, 231.0], [40.9, 234.0], [41.0, 236.0], [41.1, 238.0], [41.2, 241.0], [41.3, 243.0], [41.4, 246.0], [41.5, 249.0], [41.6, 252.0], [41.7, 255.0], [41.8, 258.0], [41.9, 260.0], [42.0, 263.0], [42.1, 266.0], [42.2, 268.0], [42.3, 270.0], [42.4, 273.0], [42.5, 275.0], [42.6, 277.0], [42.7, 279.0], [42.8, 281.0], [42.9, 282.0], [43.0, 283.0], [43.1, 285.0], [43.2, 286.0], [43.3, 287.0], [43.4, 288.0], [43.5, 290.0], [43.6, 291.0], [43.7, 291.0], [43.8, 292.0], [43.9, 293.0], [44.0, 294.0], [44.1, 295.0], [44.2, 296.0], [44.3, 297.0], [44.4, 298.0], [44.5, 298.0], [44.6, 299.0], [44.7, 300.0], [44.8, 301.0], [44.9, 302.0], [45.0, 302.0], [45.1, 303.0], [45.2, 304.0], [45.3, 305.0], [45.4, 306.0], [45.5, 307.0], [45.6, 307.0], [45.7, 308.0], [45.8, 309.0], [45.9, 310.0], [46.0, 311.0], [46.1, 312.0], [46.2, 313.0], [46.3, 314.0], [46.4, 315.0], [46.5, 316.0], [46.6, 317.0], [46.7, 318.0], [46.8, 319.0], [46.9, 320.0], [47.0, 321.0], [47.1, 322.0], [47.2, 323.0], [47.3, 324.0], [47.4, 325.0], [47.5, 326.0], [47.6, 328.0], [47.7, 329.0], [47.8, 330.0], [47.9, 332.0], [48.0, 333.0], [48.1, 334.0], [48.2, 335.0], [48.3, 337.0], [48.4, 338.0], [48.5, 340.0], [48.6, 342.0], [48.7, 343.0], [48.8, 345.0], [48.9, 347.0], [49.0, 349.0], [49.1, 350.0], [49.2, 352.0], [49.3, 355.0], [49.4, 357.0], [49.5, 359.0], [49.6, 362.0], [49.7, 364.0], [49.8, 366.0], [49.9, 369.0], [50.0, 370.0], [50.1, 372.0], [50.2, 374.0], [50.3, 375.0], [50.4, 377.0], [50.5, 378.0], [50.6, 379.0], [50.7, 380.0], [50.8, 381.0], [50.9, 382.0], [51.0, 383.0], [51.1, 384.0], [51.2, 385.0], [51.3, 386.0], [51.4, 387.0], [51.5, 388.0], [51.6, 388.0], [51.7, 389.0], [51.8, 390.0], [51.9, 390.0], [52.0, 391.0], [52.1, 392.0], [52.2, 392.0], [52.3, 393.0], [52.4, 394.0], [52.5, 394.0], [52.6, 395.0], [52.7, 396.0], [52.8, 396.0], [52.9, 397.0], [53.0, 398.0], [53.1, 398.0], [53.2, 399.0], [53.3, 399.0], [53.4, 400.0], [53.5, 400.0], [53.6, 401.0], [53.7, 401.0], [53.8, 402.0], [53.9, 402.0], [54.0, 403.0], [54.1, 404.0], [54.2, 404.0], [54.3, 405.0], [54.4, 405.0], [54.5, 406.0], [54.6, 406.0], [54.7, 407.0], [54.8, 408.0], [54.9, 408.0], [55.0, 409.0], [55.1, 409.0], [55.2, 410.0], [55.3, 410.0], [55.4, 411.0], [55.5, 412.0], [55.6, 412.0], [55.7, 413.0], [55.8, 413.0], [55.9, 414.0], [56.0, 415.0], [56.1, 415.0], [56.2, 416.0], [56.3, 417.0], [56.4, 417.0], [56.5, 418.0], [56.6, 419.0], [56.7, 420.0], [56.8, 421.0], [56.9, 421.0], [57.0, 422.0], [57.1, 423.0], [57.2, 424.0], [57.3, 425.0], [57.4, 426.0], [57.5, 426.0], [57.6, 428.0], [57.7, 428.0], [57.8, 430.0], [57.9, 431.0], [58.0, 432.0], [58.1, 434.0], [58.2, 435.0], [58.3, 437.0], [58.4, 439.0], [58.5, 441.0], [58.6, 443.0], [58.7, 445.0], [58.8, 448.0], [58.9, 451.0], [59.0, 455.0], [59.1, 458.0], [59.2, 461.0], [59.3, 463.0], [59.4, 466.0], [59.5, 468.0], [59.6, 470.0], [59.7, 472.0], [59.8, 473.0], [59.9, 475.0], [60.0, 477.0], [60.1, 478.0], [60.2, 479.0], [60.3, 480.0], [60.4, 481.0], [60.5, 482.0], [60.6, 483.0], [60.7, 484.0], [60.8, 485.0], [60.9, 486.0], [61.0, 487.0], [61.1, 487.0], [61.2, 488.0], [61.3, 489.0], [61.4, 490.0], [61.5, 490.0], [61.6, 491.0], [61.7, 492.0], [61.8, 493.0], [61.9, 493.0], [62.0, 494.0], [62.1, 495.0], [62.2, 495.0], [62.3, 496.0], [62.4, 496.0], [62.5, 497.0], [62.6, 498.0], [62.7, 498.0], [62.8, 499.0], [62.9, 500.0], [63.0, 500.0], [63.1, 501.0], [63.2, 502.0], [63.3, 502.0], [63.4, 503.0], [63.5, 504.0], [63.6, 504.0], [63.7, 505.0], [63.8, 506.0], [63.9, 507.0], [64.0, 508.0], [64.1, 508.0], [64.2, 509.0], [64.3, 510.0], [64.4, 511.0], [64.5, 512.0], [64.6, 512.0], [64.7, 513.0], [64.8, 514.0], [64.9, 515.0], [65.0, 516.0], [65.1, 517.0], [65.2, 519.0], [65.3, 520.0], [65.4, 521.0], [65.5, 522.0], [65.6, 524.0], [65.7, 526.0], [65.8, 528.0], [65.9, 531.0], [66.0, 533.0], [66.1, 537.0], [66.2, 541.0], [66.3, 546.0], [66.4, 550.0], [66.5, 555.0], [66.6, 559.0], [66.7, 563.0], [66.8, 566.0], [66.9, 569.0], [67.0, 572.0], [67.1, 574.0], [67.2, 576.0], [67.3, 578.0], [67.4, 580.0], [67.5, 581.0], [67.6, 583.0], [67.7, 584.0], [67.8, 585.0], [67.9, 587.0], [68.0, 588.0], [68.1, 589.0], [68.2, 590.0], [68.3, 591.0], [68.4, 592.0], [68.5, 593.0], [68.6, 594.0], [68.7, 595.0], [68.8, 596.0], [68.9, 597.0], [69.0, 598.0], [69.1, 599.0], [69.2, 600.0], [69.3, 601.0], [69.4, 602.0], [69.5, 603.0], [69.6, 605.0], [69.7, 606.0], [69.8, 607.0], [69.9, 609.0], [70.0, 610.0], [70.1, 613.0], [70.2, 615.0], [70.3, 617.0], [70.4, 621.0], [70.5, 624.0], [70.6, 627.0], [70.7, 633.0], [70.8, 638.0], [70.9, 645.0], [71.0, 653.0], [71.1, 660.0], [71.2, 667.0], [71.3, 671.0], [71.4, 674.0], [71.5, 678.0], [71.6, 681.0], [71.7, 684.0], [71.8, 686.0], [71.9, 689.0], [72.0, 691.0], [72.1, 693.0], [72.2, 695.0], [72.3, 697.0], [72.4, 699.0], [72.5, 702.0], [72.6, 704.0], [72.7, 707.0], [72.8, 710.0], [72.9, 714.0], [73.0, 719.0], [73.1, 725.0], [73.2, 731.0], [73.3, 739.0], [73.4, 748.0], [73.5, 758.0], [73.6, 766.0], [73.7, 773.0], [73.8, 778.0], [73.9, 783.0], [74.0, 788.0], [74.1, 794.0], [74.2, 797.0], [74.3, 801.0], [74.4, 805.0], [74.5, 809.0], [74.6, 814.0], [74.7, 820.0], [74.8, 828.0], [74.9, 835.0], [75.0, 845.0], [75.1, 855.0], [75.2, 866.0], [75.3, 873.0], [75.4, 880.0], [75.5, 887.0], [75.6, 892.0], [75.7, 896.0], [75.8, 901.0], [75.9, 905.0], [76.0, 910.0], [76.1, 917.0], [76.2, 924.0], [76.3, 934.0], [76.4, 947.0], [76.5, 960.0], [76.6, 972.0], [76.7, 979.0], [76.8, 986.0], [76.9, 993.0], [77.0, 999.0], [77.1, 1003.0], [77.2, 1009.0], [77.3, 1015.0], [77.4, 1025.0], [77.5, 1035.0], [77.6, 1050.0], [77.7, 1061.0], [77.8, 1072.0], [77.9, 1081.0], [78.0, 1087.0], [78.1, 1093.0], [78.2, 1097.0], [78.3, 1102.0], [78.4, 1105.0], [78.5, 1108.0], [78.6, 1112.0], [78.7, 1118.0], [78.8, 1126.0], [78.9, 1134.0], [79.0, 1144.0], [79.1, 1155.0], [79.2, 1167.0], [79.3, 1174.0], [79.4, 1180.0], [79.5, 1187.0], [79.6, 1192.0], [79.7, 1197.0], [79.8, 1202.0], [79.9, 1207.0], [80.0, 1213.0], [80.1, 1220.0], [80.2, 1233.0], [80.3, 1248.0], [80.4, 1263.0], [80.5, 1276.0], [80.6, 1285.0], [80.7, 1292.0], [80.8, 1299.0], [80.9, 1307.0], [81.0, 1316.0], [81.1, 1324.0], [81.2, 1340.0], [81.3, 1358.0], [81.4, 1375.0], [81.5, 1385.0], [81.6, 1396.0], [81.7, 1402.0], [81.8, 1408.0], [81.9, 1414.0], [82.0, 1423.0], [82.1, 1438.0], [82.2, 1453.0], [82.3, 1471.0], [82.4, 1484.0], [82.5, 1494.0], [82.6, 1502.0], [82.7, 1510.0], [82.8, 1522.0], [82.9, 1539.0], [83.0, 1555.0], [83.1, 1575.0], [83.2, 1589.0], [83.3, 1597.0], [83.4, 1605.0], [83.5, 1614.0], [83.6, 1631.0], [83.7, 1649.0], [83.8, 1669.0], [83.9, 1682.0], [84.0, 1694.0], [84.1, 1703.0], [84.2, 1712.0], [84.3, 1728.0], [84.4, 1753.0], [84.5, 1779.0], [84.6, 1789.0], [84.7, 1799.0], [84.8, 1809.0], [84.9, 1832.0], [85.0, 1857.0], [85.1, 1875.0], [85.2, 1887.0], [85.3, 1897.0], [85.4, 1906.0], [85.5, 1916.0], [85.6, 1931.0], [85.7, 1955.0], [85.8, 1974.0], [85.9, 1990.0], [86.0, 2002.0], [86.1, 2021.0], [86.2, 2045.0], [86.3, 2071.0], [86.4, 2089.0], [86.5, 2100.0], [86.6, 2113.0], [86.7, 2139.0], [86.8, 2169.0], [86.9, 2186.0], [87.0, 2197.0], [87.1, 2207.0], [87.2, 2227.0], [87.3, 2250.0], [87.4, 2273.0], [87.5, 2287.0], [87.6, 2297.0], [87.7, 2315.0], [87.8, 2336.0], [87.9, 2364.0], [88.0, 2381.0], [88.1, 2395.0], [88.2, 2408.0], [88.3, 2422.0], [88.4, 2449.0], [88.5, 2474.0], [88.6, 2487.0], [88.7, 2499.0], [88.8, 2511.0], [88.9, 2529.0], [89.0, 2559.0], [89.1, 2589.0], [89.2, 2603.0], [89.3, 2627.0], [89.4, 2670.0], [89.5, 2696.0], [89.6, 2710.0], [89.7, 2755.0], [89.8, 2786.0], [89.9, 2801.0], [90.0, 2814.0], [90.1, 2843.0], [90.2, 2878.0], [90.3, 2891.0], [90.4, 2904.0], [90.5, 2924.0], [90.6, 2978.0], [90.7, 3001.0], [90.8, 3029.0], [90.9, 3087.0], [91.0, 3112.0], [91.1, 3175.0], [91.2, 3196.0], [91.3, 3220.0], [91.4, 3278.0], [91.5, 3294.0], [91.6, 3309.0], [91.7, 3360.0], [91.8, 3391.0], [91.9, 3414.0], [92.0, 3480.0], [92.1, 3498.0], [92.2, 3533.0], [92.3, 3587.0], [92.4, 3605.0], [92.5, 3672.0], [92.6, 3696.0], [92.7, 3707.0], [92.8, 3726.0], [92.9, 3774.0], [93.0, 3787.0], [93.1, 3795.0], [93.2, 3803.0], [93.3, 3810.0], [93.4, 3869.0], [93.5, 3885.0], [93.6, 3892.0], [93.7, 3902.0], [93.8, 3927.0], [93.9, 3983.0], [94.0, 4001.0], [94.1, 4077.0], [94.2, 4099.0], [94.3, 4139.0], [94.4, 4186.0], [94.5, 4212.0], [94.6, 4276.0], [94.7, 4293.0], [94.8, 4304.0], [94.9, 4366.0], [95.0, 4393.0], [95.1, 4405.0], [95.2, 4473.0], [95.3, 4502.0], [95.4, 4573.0], [95.5, 4604.0], [95.6, 4676.0], [95.7, 4698.0], [95.8, 4715.0], [95.9, 4782.0], [96.0, 4799.0], [96.1, 4820.0], [96.2, 4898.0], [96.3, 5095.0], [96.4, 5199.0], [96.5, 5288.0], [96.6, 5356.0], [96.7, 5494.0], [96.8, 5598.0], [96.9, 5616.0], [97.0, 5696.0], [97.1, 5799.0], [97.2, 5879.0], [97.3, 5943.0], [97.4, 6097.0], [97.5, 6392.0], [97.6, 6800.0], [97.7, 7098.0], [97.8, 7591.0], [97.9, 7893.0], [98.0, 8091.0], [98.1, 8206.0], [98.2, 8314.0], [98.3, 8403.0], [98.4, 8429.0], [98.5, 8498.0], [98.6, 8519.0], [98.7, 8607.0], [98.8, 8697.0], [98.9, 8762.0], [99.0, 8807.0], [99.1, 8890.0], [99.2, 8955.0], [99.3, 9072.0], [99.4, 9212.0], [99.5, 9388.0], [99.6, 9686.0], [99.7, 9819.0], [99.8, 9924.0], [99.9, 10306.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 29596.0, "series": [{"data": [[0.0, 29596.0], [100.0, 3286.0], [200.0, 3889.0], [300.0, 5563.0], [400.0, 4636.0], [500.0, 2575.0], [600.0, 1381.0], [700.0, 796.0], [800.0, 657.0], [900.0, 664.0], [1000.0, 625.0], [1100.0, 690.0], [1200.0, 524.0], [1300.0, 441.0], [1400.0, 337.0], [1500.0, 287.0], [1600.0, 275.0], [1700.0, 317.0], [1800.0, 255.0], [1900.0, 211.0], [2000.0, 254.0], [2100.0, 202.0], [2200.0, 208.0], [2300.0, 247.0], [2400.0, 199.0], [2500.0, 189.0], [2600.0, 209.0], [2800.0, 281.0], [2700.0, 215.0], [2900.0, 163.0], [3000.0, 131.0], [3100.0, 209.0], [3200.0, 201.0], [3300.0, 163.0], [3400.0, 173.0], [3500.0, 147.0], [3600.0, 241.0], [3700.0, 301.0], [3800.0, 262.0], [3900.0, 151.0], [4000.0, 149.0], [4100.0, 134.0], [4200.0, 194.0], [4300.0, 169.0], [4400.0, 104.0], [4500.0, 104.0], [4600.0, 198.0], [4700.0, 174.0], [4800.0, 103.0], [4900.0, 44.0], [5000.0, 61.0], [5100.0, 60.0], [5200.0, 86.0], [5300.0, 57.0], [5400.0, 37.0], [5500.0, 79.0], [5600.0, 93.0], [5700.0, 50.0], [5800.0, 75.0], [6100.0, 11.0], [6000.0, 25.0], [5900.0, 77.0], [6300.0, 20.0], [6200.0, 14.0], [6600.0, 11.0], [6400.0, 20.0], [6500.0, 14.0], [6900.0, 16.0], [6700.0, 14.0], [6800.0, 16.0], [7000.0, 21.0], [7100.0, 3.0], [7400.0, 19.0], [7200.0, 14.0], [7300.0, 17.0], [7600.0, 12.0], [7500.0, 10.0], [7900.0, 22.0], [7800.0, 16.0], [7700.0, 9.0], [8000.0, 39.0], [8100.0, 33.0], [8400.0, 108.0], [8500.0, 69.0], [8700.0, 94.0], [8600.0, 82.0], [8300.0, 95.0], [8200.0, 30.0], [8800.0, 84.0], [8900.0, 54.0], [9000.0, 37.0], [9100.0, 39.0], [9200.0, 40.0], [9300.0, 31.0], [9400.0, 27.0], [9500.0, 23.0], [9600.0, 26.0], [9700.0, 46.0], [10100.0, 5.0], [10200.0, 12.0], [9800.0, 52.0], [9900.0, 55.0], [10000.0, 18.0], [10500.0, 6.0], [10300.0, 6.0], [10600.0, 4.0], [10700.0, 3.0], [10400.0, 4.0], [10800.0, 3.0], [11100.0, 3.0], [10900.0, 1.0], [12000.0, 2.0], [11900.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [13100.0, 1.0], [12900.0, 2.0], [13000.0, 1.0], [13200.0, 2.0], [13400.0, 1.0], [13700.0, 1.0], [13900.0, 1.0], [14000.0, 1.0], [14300.0, 1.0], [14200.0, 1.0], [14100.0, 1.0], [14400.0, 1.0], [15400.0, 2.0], [16300.0, 1.0], [17400.0, 1.0], [16700.0, 1.0], [18200.0, 1.0], [19600.0, 2.0], [19900.0, 1.0], [20000.0, 1.0], [19800.0, 1.0], [19700.0, 1.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 20469.0], [100.0, 4895.0], [200.0, 3849.0], [300.0, 5715.0], [400.0, 6212.0], [500.0, 4121.0], [600.0, 2128.0], [700.0, 1200.0], [800.0, 1002.0], [900.0, 814.0], [1000.0, 813.0], [1100.0, 966.0], [1200.0, 696.0], [1300.0, 551.0], [1400.0, 602.0], [1500.0, 503.0], [1600.0, 476.0], [1700.0, 420.0], [1800.0, 412.0], [1900.0, 427.0], [2000.0, 334.0], [2100.0, 352.0], [2200.0, 380.0], [2300.0, 345.0], [2400.0, 368.0], [2500.0, 305.0], [2600.0, 230.0], [2700.0, 244.0], [2800.0, 312.0], [2900.0, 213.0], [3000.0, 175.0], [3100.0, 162.0], [3200.0, 216.0], [3300.0, 200.0], [3400.0, 174.0], [3500.0, 173.0], [3600.0, 166.0], [3700.0, 349.0], [3800.0, 332.0], [3900.0, 214.0], [4000.0, 138.0], [4100.0, 160.0], [4200.0, 205.0], [4300.0, 181.0], [4400.0, 161.0], [4500.0, 124.0], [4600.0, 150.0], [4700.0, 197.0], [4800.0, 134.0], [4900.0, 40.0], [5000.0, 23.0], [5100.0, 61.0], [5200.0, 93.0], [5300.0, 63.0], [5400.0, 45.0], [5500.0, 64.0], [5600.0, 139.0], [5700.0, 54.0], [5800.0, 98.0], [5900.0, 58.0], [6000.0, 42.0], [6100.0, 19.0], [6300.0, 21.0], [6200.0, 27.0], [6600.0, 15.0], [6500.0, 18.0], [6400.0, 19.0], [6900.0, 31.0], [6700.0, 9.0], [6800.0, 15.0], [7100.0, 9.0], [7000.0, 21.0], [7300.0, 11.0], [7400.0, 15.0], [7200.0, 19.0], [7600.0, 25.0], [7500.0, 12.0], [7900.0, 19.0], [7800.0, 25.0], [7700.0, 17.0], [8100.0, 39.0], [8000.0, 62.0], [8300.0, 75.0], [8600.0, 91.0], [8700.0, 101.0], [8500.0, 102.0], [8400.0, 154.0], [8200.0, 51.0], [9100.0, 34.0], [8800.0, 109.0], [8900.0, 84.0], [9000.0, 45.0], [9200.0, 51.0], [9300.0, 38.0], [9400.0, 24.0], [9500.0, 16.0], [9600.0, 22.0], [9700.0, 28.0], [10100.0, 7.0], [10200.0, 6.0], [10000.0, 30.0], [9800.0, 70.0], [9900.0, 45.0], [10400.0, 4.0], [10700.0, 4.0], [10300.0, 8.0], [10600.0, 2.0], [10500.0, 2.0], [11000.0, 4.0], [10800.0, 3.0], [11100.0, 3.0], [11200.0, 2.0], [10900.0, 1.0], [12000.0, 1.0], [12700.0, 2.0], [12500.0, 2.0], [12400.0, 3.0], [12300.0, 1.0], [13100.0, 2.0], [12900.0, 1.0], [13200.0, 1.0], [13000.0, 1.0], [13500.0, 1.0], [13700.0, 1.0], [13800.0, 3.0], [13600.0, 1.0], [14500.0, 1.0], [15200.0, 1.0], [14900.0, 1.0], [15900.0, 1.0], [16200.0, 2.0], [16900.0, 1.0], [17500.0, 1.0], [18300.0, 2.0], [18800.0, 2.0], [18900.0, 1.0], [19200.0, 1.0], [20000.0, 1.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9289.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 82357.0, "series": [{"data": [[0.0, 82357.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18925.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 19536.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 9289.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 63.216458658346326, "minX": 1.62502284E12, "maxY": 1024.0, "series": [{"data": [[1.62502296E12, 1024.0], [1.62502302E12, 1004.0643378788866], [1.6250229E12, 1004.0768631524261]], "isOverall": false, "label": "JavaTest_peek", "isController": false}, {"data": [[1.62502302E12, 63.73270542383935], [1.62502308E12, 63.765894819466276]], "isOverall": false, "label": "JavaTest_cool", "isController": false}, {"data": [[1.62502284E12, 64.0], [1.6250229E12, 63.216458658346326]], "isOverall": false, "label": "JavaTest_warm", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502308E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 11015.0, "series": [{"data": [[4.0, 10044.0], [5.0, 10183.0], [6.0, 9997.0], [7.0, 6247.0], [8.0, 2059.0], [9.0, 2060.0], [10.0, 811.5], [11.0, 404.0], [12.0, 1201.0], [13.0, 375.0], [14.0, 1089.0], [15.0, 736.0], [16.0, 1552.5], [17.0, 704.5], [18.0, 1028.0], [20.0, 2553.0], [24.0, 1384.6666666666665], [25.0, 998.5], [27.0, 11.0], [28.0, 1819.0], [29.0, 496.5], [30.0, 456.0], [31.0, 2067.0], [32.0, 7.333333333333333], [33.0, 7.333333333333333], [34.0, 817.0], [35.0, 13.666666666666668], [37.0, 890.0], [36.0, 19.0], [38.0, 15.6], [39.0, 10.600000000000001], [41.0, 94.25], [40.0, 1785.5], [43.0, 73.92592592592591], [42.0, 16.142857142857142], [44.0, 688.3333333333333], [45.0, 8.0], [46.0, 1681.0], [47.0, 95.5], [49.0, 217.16666666666666], [48.0, 6.0], [51.0, 1637.0], [50.0, 21.81818181818182], [53.0, 271.0], [52.0, 310.87499999999994], [54.0, 7.5], [55.0, 43.5], [56.0, 299.33333333333337], [57.0, 367.7142857142857], [59.0, 795.0], [61.0, 31.250000000000004], [60.0, 63.8], [62.0, 92.00000000000003], [63.0, 12.181818181818182], [64.0, 90.79952707768547], [66.0, 895.5], [69.0, 2252.0], [74.0, 2911.0], [79.0, 1751.0], [78.0, 2063.5], [76.0, 2020.0], [86.0, 2037.0], [119.0, 2061.0], [132.0, 2442.0], [131.0, 1993.0], [130.0, 2513.0], [140.0, 899.0], [138.0, 2377.0], [150.0, 1985.0], [147.0, 1237.0], [146.0, 1990.0], [158.0, 2040.0], [157.0, 2162.0], [155.0, 1881.0], [161.0, 2033.0], [174.0, 2421.0], [169.0, 2146.0], [168.0, 1853.5], [182.0, 2096.0], [189.0, 3605.0], [186.0, 1164.0], [196.0, 1804.0], [207.0, 2081.0], [215.0, 3335.0], [212.0, 1128.0], [211.0, 782.0], [210.0, 2275.0], [208.0, 2487.0], [222.0, 2024.0], [219.0, 1607.0], [216.0, 1813.0], [231.0, 2200.0], [226.0, 1870.5], [239.0, 1947.0], [235.0, 1495.5], [246.0, 1498.0], [251.0, 1411.0], [267.0, 2160.0], [266.0, 1449.0], [265.0, 1534.0], [264.0, 1445.0], [262.0, 1460.0], [286.0, 1390.0], [282.0, 1245.0], [280.0, 2228.0], [278.0, 1520.0], [301.0, 2018.0], [298.0, 1521.0], [297.0, 2022.0], [295.0, 2013.0], [294.0, 1517.0], [292.0, 1502.0], [289.0, 1532.0], [288.0, 1278.0], [314.0, 1252.0], [310.0, 1356.0], [304.0, 1013.0], [333.0, 2371.0], [331.0, 2245.0], [328.0, 1247.0], [327.0, 1417.0], [322.0, 1857.0], [351.0, 8.0], [346.0, 1250.0], [341.0, 2061.0], [339.0, 2221.0], [337.0, 1228.0], [367.0, 1898.0], [359.0, 2171.0], [357.0, 1935.0], [355.0, 1160.0], [352.0, 2234.0], [380.0, 258.2], [381.0, 210.5], [379.0, 2215.0], [377.0, 1891.0], [375.0, 1268.0], [399.0, 1813.0], [393.0, 1208.0], [413.0, 479.5], [414.0, 2067.0], [405.0, 1805.5], [401.0, 1169.0], [417.0, 261.2], [429.0, 894.5], [419.0, 1268.0], [416.0, 1138.0], [432.0, 258.57142857142856], [434.0, 227.8], [436.0, 82.0], [447.0, 1757.0], [451.0, 1848.0], [478.0, 600.0], [479.0, 396.8], [480.0, 329.5], [511.0, 2106.0], [510.0, 1036.0], [508.0, 1003.0], [507.0, 913.0], [504.0, 1017.0], [501.0, 13.0], [500.0, 1036.0], [496.0, 1204.0], [523.0, 518.6153846153846], [539.0, 955.0], [538.0, 1549.0], [531.0, 1190.0], [521.0, 1089.0], [520.0, 201.5], [558.0, 3119.0], [571.0, 1984.0], [574.0, 799.0], [568.0, 1900.0], [551.0, 861.0], [550.0, 2532.0], [562.0, 860.0], [561.0, 13.0], [557.0, 1164.0], [556.0, 1048.0], [555.0, 876.0], [553.0, 2996.0], [552.0, 2143.0], [601.0, 1602.0], [576.0, 344.5], [577.0, 435.0], [602.0, 1924.0], [600.0, 884.0], [582.0, 912.0], [580.0, 9.0], [579.0, 908.0], [578.0, 17.0], [599.0, 517.5], [598.0, 854.0], [592.0, 906.0], [591.0, 1670.0], [586.0, 962.0], [633.0, 594.1428571428572], [632.0, 886.0], [634.0, 401.0], [638.0, 1868.0], [628.0, 9.0], [626.0, 1003.0], [620.0, 752.0], [617.0, 351.0], [615.0, 9.0], [614.0, 56.333333333333336], [613.0, 877.0], [611.0, 808.5], [610.0, 8.0], [609.0, 1186.5], [647.0, 688.0], [666.0, 1894.0], [671.0, 400.5], [664.0, 17.0], [659.0, 1574.0], [654.0, 626.3333333333334], [653.0, 1532.0], [651.0, 887.0], [648.0, 41.5], [646.0, 31.0], [645.0, 1563.0], [643.0, 451.25], [642.0, 16.0], [640.0, 46.5], [691.0, 749.0], [701.0, 461.33333333333337], [699.0, 731.5], [702.0, 857.0], [688.0, 1637.0], [698.0, 1519.0], [696.0, 13.0], [678.0, 868.5], [677.0, 575.3333333333334], [675.0, 258.25], [672.0, 7.0], [687.0, 908.0], [685.0, 930.0], [682.0, 7.0], [681.0, 7.0], [680.0, 1797.0], [695.0, 833.0], [693.0, 1918.0], [692.0, 123.0], [734.0, 169.33333333333331], [735.0, 17.5], [733.0, 29.0], [732.0, 1650.0], [731.0, 1387.0], [729.0, 528.0], [716.0, 7.0], [704.0, 749.0], [715.0, 31.0], [714.0, 1456.0], [712.0, 77.0], [726.0, 13.0], [722.0, 10.0], [720.0, 548.0], [761.0, 140.0], [765.0, 1270.0], [757.0, 467.0], [758.0, 730.2], [759.0, 1026.0], [763.0, 113.0], [767.0, 2427.0], [753.0, 1226.0], [752.0, 336.0], [755.0, 22.0], [754.0, 9.5], [764.0, 9.0], [762.0, 28.0], [760.0, 47.66666666666667], [743.0, 7.0], [742.0, 122.0], [741.0, 853.0], [739.0, 1386.0], [738.0, 72.0], [751.0, 2574.0], [750.0, 1217.0], [748.0, 15.5], [747.0, 49.5], [746.0, 818.1600000000001], [745.0, 691.0], [744.0, 7.0], [798.0, 2729.0], [788.0, 2826.0], [799.0, 14.666666666666668], [785.0, 310.0], [784.0, 394.0], [787.0, 4058.0], [786.0, 4673.0], [795.0, 12.0], [794.0, 1672.3333333333333], [792.0, 979.0], [775.0, 337.0], [774.0, 320.0], [773.0, 45.0], [771.0, 699.6], [770.0, 27.5], [769.0, 11.0], [768.0, 2340.0], [783.0, 406.0], [780.0, 170.0], [778.0, 9.0], [777.0, 25.0], [776.0, 267.5], [791.0, 1078.5], [790.0, 1868.0], [789.0, 10.0], [828.0, 1162.75], [804.0, 100.0], [806.0, 688.4], [805.0, 2876.0], [824.0, 1168.5], [807.0, 714.0], [827.0, 1146.0], [826.0, 2331.0], [809.0, 646.6], [808.0, 2339.0], [810.0, 872.0000000000001], [814.0, 602.0], [802.0, 11.0], [801.0, 51.0], [813.0, 37.0], [811.0, 479.75], [831.0, 2404.0], [817.0, 6.0], [819.0, 318.0], [818.0, 1337.5], [823.0, 2420.0], [821.0, 10.0], [830.0, 461.22222222222223], [829.0, 6.0], [850.0, 971.0], [863.0, 7.5], [859.0, 1375.6666666666667], [858.0, 903.5], [856.0, 1118.0], [847.0, 844.0], [834.0, 13.0], [833.0, 21.0], [839.0, 1599.0], [835.0, 2008.0], [845.0, 568.0], [843.0, 315.0], [842.0, 9.0], [841.0, 12.0], [854.0, 403.0], [853.0, 1125.5], [852.0, 982.0], [849.0, 248.5], [848.0, 26.0], [889.0, 1067.0], [895.0, 64.5], [872.0, 557.5000000000001], [876.0, 8.0], [874.0, 1108.0], [887.0, 1040.0], [892.0, 6.0], [886.0, 13.0], [883.0, 1066.0], [879.0, 473.7857142857143], [877.0, 90.0], [926.0, 563.0], [927.0, 380.25], [925.0, 576.6666666666667], [924.0, 7.0], [923.0, 113.0], [903.0, 1501.0], [902.0, 19.0], [899.0, 384.5], [898.0, 7.0], [911.0, 1201.5], [908.0, 1576.0], [907.0, 775.5], [904.0, 399.0], [917.0, 590.25], [914.0, 794.0], [913.0, 502.0], [912.0, 753.5], [954.0, 1013.0], [958.0, 1951.0], [959.0, 8.0], [944.0, 610.0], [947.0, 590.0], [945.0, 593.0], [957.0, 1204.0], [956.0, 512.0], [955.0, 1098.5], [952.0, 575.0], [934.0, 655.2857142857142], [933.0, 54.0], [932.0, 1203.0], [930.0, 1459.0], [928.0, 690.75], [943.0, 1400.0], [942.0, 614.0], [941.0, 849.0], [940.0, 709.3333333333334], [939.0, 53.0], [937.0, 1038.0], [936.0, 869.0], [951.0, 2328.0], [949.0, 581.0], [990.0, 1136.0], [989.0, 117.4], [967.0, 29.5], [966.0, 777.0], [965.0, 733.5], [962.0, 1434.0], [961.0, 208.66666666666669], [960.0, 9.0], [981.0, 1088.0], [980.0, 14.0], [978.0, 265.0], [977.0, 231.8], [976.0, 996.0], [975.0, 1175.5], [974.0, 8.0], [973.0, 640.5], [972.0, 7.0], [971.0, 985.5], [970.0, 254.0], [1022.0, 556.25], [1020.0, 610.0], [1023.0, 279.22222222222223], [1018.0, 179.33333333333334], [1017.0, 384.6], [997.0, 756.0], [996.0, 370.0], [994.0, 439.21428571428567], [993.0, 229.0], [1003.0, 276.0], [1000.0, 1068.0], [1015.0, 1446.0], [1010.0, 8.0], [1009.0, 585.0], [1008.0, 524.8333333333333], [1024.0, 1048.7187547292126]], "isOverall": false, "label": "post", "isController": false}, {"data": [[759.2306419436089, 786.3546695946752]], "isOverall": false, "label": "post-Aggregated", "isController": false}, {"data": [[2.0, 7185.0], [3.0, 6913.666666666667], [4.0, 6128.5], [5.0, 1317.0], [6.0, 6579.5], [7.0, 11015.0], [8.0, 10741.5], [9.0, 10688.0], [10.0, 1012.0], [11.0, 1021.0], [12.0, 1418.0], [13.0, 1592.5], [14.0, 1483.0], [15.0, 380.0], [16.0, 2733.0], [17.0, 1210.0], [18.0, 1207.0], [19.0, 903.6666666666667], [20.0, 474.3333333333333], [21.0, 438.6666666666667], [22.0, 636.5], [23.0, 1347.3333333333335], [24.0, 23.0], [25.0, 341.0], [26.0, 422.875], [27.0, 469.6666666666667], [28.0, 838.0], [29.0, 1839.0], [30.0, 948.6666666666667], [31.0, 410.3333333333333], [33.0, 437.0], [32.0, 483.2857142857143], [35.0, 354.83333333333337], [34.0, 1160.0], [36.0, 663.0], [37.0, 1213.5], [39.0, 126.56521739130434], [38.0, 526.6666666666666], [41.0, 185.15384615384616], [40.0, 293.0], [42.0, 39.75], [43.0, 31.03846153846154], [45.0, 539.5], [44.0, 1400.3333333333335], [47.0, 901.0], [46.0, 200.0], [49.0, 291.9285714285714], [48.0, 367.4166666666667], [50.0, 277.09090909090907], [51.0, 123.5], [52.0, 289.0], [53.0, 501.00000000000006], [55.0, 556.8333333333334], [54.0, 322.0], [57.0, 249.24999999999997], [56.0, 1005.0], [59.0, 154.83333333333334], [58.0, 1023.0], [60.0, 697.0], [61.0, 293.71428571428567], [62.0, 183.93333333333337], [63.0, 288.2], [64.0, 121.52952348066297], [65.0, 681.0], [66.0, 76.0], [67.0, 3831.0], [70.0, 1786.0], [68.0, 1894.0], [74.0, 1997.0], [72.0, 2045.0], [76.0, 2036.0], [80.0, 1966.0], [87.0, 2717.0], [110.0, 2047.0], [117.0, 162.5], [118.0, 743.6666666666666], [119.0, 148.33333333333334], [120.0, 126.66666666666667], [123.0, 494.0], [127.0, 1877.0], [135.0, 2514.0], [130.0, 1819.0], [143.0, 1523.5], [141.0, 1846.0], [140.0, 3622.0], [138.0, 1810.0], [137.0, 1868.0], [151.0, 1900.0], [149.0, 1799.0], [148.0, 1947.0], [145.0, 1584.0], [144.0, 2222.0], [159.0, 1942.0], [157.0, 1878.0], [155.0, 3428.0], [153.0, 2709.0], [152.0, 1812.0], [166.0, 1143.0], [165.0, 944.0], [164.0, 1194.0], [163.0, 1405.0], [162.0, 1105.0], [160.0, 1133.0], [175.0, 1885.0], [174.0, 2627.0], [172.0, 1895.0], [171.0, 1146.0], [170.0, 1774.0], [183.0, 1107.0], [181.0, 3615.0], [180.0, 3472.0], [179.0, 1873.0], [178.0, 1145.0], [177.0, 1226.0], [176.0, 1015.0], [191.0, 1018.0], [190.0, 3538.0], [188.0, 982.0], [187.0, 2079.0], [185.0, 2193.0], [184.0, 1845.0], [199.0, 2387.0], [198.0, 917.0], [197.0, 954.0], [195.0, 1826.0], [194.0, 1052.0], [193.0, 1161.0], [192.0, 2541.0], [207.0, 988.0], [205.0, 1582.6666666666667], [203.0, 2437.5], [201.0, 1162.0], [200.0, 2074.0], [214.0, 1118.0], [213.0, 1651.0], [209.0, 970.0], [223.0, 1042.0], [221.0, 892.0], [220.0, 864.0], [218.0, 1106.0], [217.0, 1731.0], [230.0, 814.0], [229.0, 874.0], [228.0, 954.0], [227.0, 1075.0], [226.0, 2108.0], [224.0, 950.0], [239.0, 2058.0], [238.0, 1687.0], [237.0, 1615.0], [236.0, 1497.5], [233.0, 791.5], [247.0, 1487.0], [245.0, 1898.0], [244.0, 1133.0], [243.0, 1084.0], [242.0, 723.5], [255.0, 1086.0], [254.0, 1994.0], [253.0, 790.0], [252.0, 2020.0], [251.0, 1008.6666666666666], [250.0, 976.0], [249.0, 684.0], [259.0, 185.0], [271.0, 1982.0], [270.0, 1977.0], [268.0, 1623.0], [264.0, 2042.0], [262.0, 1968.0], [260.0, 901.0], [258.0, 886.0], [257.0, 1453.0], [256.0, 442.0], [275.0, 1003.0], [285.0, 775.0], [287.0, 686.0], [284.0, 1051.0], [283.0, 968.0], [281.0, 917.0], [279.0, 690.0], [276.0, 1279.0], [274.0, 825.0], [273.0, 842.0], [272.0, 1928.0], [302.0, 825.0], [300.0, 1255.0], [299.0, 1258.0], [296.0, 608.0], [295.0, 1507.0], [293.0, 860.0], [291.0, 1899.0], [290.0, 91.0], [318.0, 1980.0], [319.0, 2233.0], [317.0, 1134.0], [315.0, 424.0], [313.0, 247.0], [312.0, 438.0], [311.0, 1428.0], [309.0, 875.5], [307.0, 311.0], [306.0, 2007.0], [305.0, 780.0], [334.0, 2484.0], [335.0, 522.0], [333.0, 538.0], [332.0, 2247.0], [330.0, 1415.0], [329.0, 1152.0], [328.0, 1495.0], [326.0, 1720.0], [323.0, 1573.0], [321.0, 1417.0], [325.0, 548.0], [324.0, 1134.0], [350.0, 1248.5], [348.0, 2252.0], [345.0, 1224.0], [344.0, 1152.0], [343.0, 262.0], [342.0, 678.0], [341.0, 255.0], [338.0, 2204.0], [336.0, 1163.0], [365.0, 421.0], [366.0, 461.0], [364.0, 356.0], [363.0, 2093.0], [361.0, 1231.5], [360.0, 375.0], [358.0, 455.0], [357.0, 1230.0], [353.0, 1258.0], [380.0, 252.8181818181818], [381.0, 320.00000000000006], [383.0, 1897.0], [382.0, 1117.0], [378.0, 439.0], [376.0, 1908.0], [373.0, 376.0], [368.0, 489.0], [387.0, 306.0], [397.0, 1806.0], [398.0, 439.0], [396.0, 328.0], [386.0, 411.0], [384.0, 527.0], [394.0, 513.0], [393.0, 1896.0], [391.0, 1178.0], [390.0, 426.0], [389.0, 2169.0], [388.0, 1172.0], [403.0, 2177.0], [413.0, 385.375], [412.0, 1891.0], [411.0, 432.0], [410.0, 1832.0], [409.0, 380.0], [407.0, 2191.0], [406.0, 353.0], [402.0, 248.0], [400.0, 324.0], [428.0, 343.0], [417.0, 393.49999999999994], [416.0, 480.0], [418.0, 268.0], [431.0, 2233.0], [427.0, 1779.0], [426.0, 1870.0], [425.0, 517.0], [424.0, 269.0], [423.0, 995.0], [422.0, 333.0], [421.0, 1036.0], [420.0, 404.0], [435.0, 583.0], [433.0, 469.0], [432.0, 540.6428571428572], [439.0, 316.0], [438.0, 414.0], [434.0, 531.0], [436.0, 561.0], [437.0, 574.5], [446.0, 258.0], [444.0, 654.0], [443.0, 240.0], [442.0, 1158.0], [441.0, 961.0], [440.0, 1058.0], [460.0, 217.0], [456.0, 363.0], [455.0, 1834.0], [454.0, 440.0], [453.0, 1831.0], [452.0, 1835.0], [449.0, 558.6666666666666], [478.0, 663.25], [479.0, 600.7142857142858], [476.0, 357.0], [473.0, 220.0], [469.0, 1064.0], [468.0, 1940.0], [467.0, 476.5], [465.0, 1254.5], [494.0, 179.0], [480.0, 592.5], [482.0, 394.0], [495.0, 1917.0], [493.0, 2360.0], [492.0, 71.0], [491.0, 337.0], [490.0, 1941.0], [488.0, 124.0], [487.0, 223.0], [486.0, 791.5], [484.0, 1060.0], [499.0, 537.0], [509.0, 349.0], [507.0, 944.0], [505.0, 419.0], [503.0, 1782.0], [501.0, 105.0], [500.0, 203.0], [498.0, 2319.0], [497.0, 279.0], [540.0, 89.0], [524.0, 856.5], [523.0, 577.4999999999999], [522.0, 239.0], [525.0, 692.6666666666667], [512.0, 343.0], [515.0, 244.0], [514.0, 582.5], [517.0, 2252.0], [516.0, 692.0], [519.0, 974.0], [518.0, 1907.0], [541.0, 418.0], [530.0, 281.0], [538.0, 1039.0], [536.0, 1877.0], [535.0, 2168.0], [534.0, 1088.0], [574.0, 958.25], [575.0, 1221.0], [561.0, 204.0], [565.0, 404.0], [563.0, 976.0], [573.0, 875.0], [572.0, 903.0], [571.0, 887.0], [570.0, 936.0], [569.0, 1031.0], [549.0, 3100.0], [548.0, 1066.6666666666667], [556.0, 3299.0], [553.0, 1654.0], [567.0, 1650.0], [566.0, 887.0], [604.0, 1689.0], [576.0, 833.25], [577.0, 727.8333333333333], [603.0, 1608.0], [582.0, 914.0], [580.0, 873.0], [597.0, 893.0], [595.0, 1614.0], [594.0, 904.0], [593.0, 881.5], [590.0, 1873.0], [589.0, 929.0], [588.0, 1915.5], [584.0, 2088.0], [638.0, 802.5], [628.0, 107.0], [630.0, 556.0], [633.0, 622.0000000000001], [614.0, 1644.0], [613.0, 753.0], [611.0, 527.5], [610.0, 880.0], [609.0, 1608.0], [622.0, 638.0], [621.0, 584.0], [618.0, 301.0], [617.0, 726.8571428571429], [634.0, 620.0], [639.0, 424.0], [636.0, 419.0], [625.0, 1528.0], [624.0, 909.5], [669.0, 434.75], [671.0, 345.5], [658.0, 205.0], [656.0, 639.0], [668.0, 1514.0], [667.0, 1539.0], [665.0, 825.0], [664.0, 809.8], [655.0, 331.0], [641.0, 421.0], [640.0, 754.0], [645.0, 1581.0], [642.0, 890.0], [647.0, 673.5], [646.0, 404.0], [654.0, 807.0], [653.0, 311.0], [649.0, 1691.0], [648.0, 648.0], [663.0, 638.0], [662.0, 912.0], [661.0, 488.0], [660.0, 1535.0], [698.0, 450.66666666666663], [690.0, 381.0], [699.0, 776.5], [701.0, 639.391304347826], [703.0, 739.0], [687.0, 359.0], [673.0, 1911.0], [672.0, 1678.0], [675.0, 1543.0], [674.0, 332.0], [677.0, 192.0], [676.0, 598.0], [685.0, 353.0], [684.0, 571.5], [683.0, 329.0], [682.0, 1079.75], [681.0, 1037.0], [695.0, 134.0], [692.0, 1506.0], [691.0, 860.0], [689.0, 165.0], [688.0, 145.0], [734.0, 469.5], [704.0, 825.5], [718.0, 1429.0], [717.0, 735.0], [716.0, 953.5], [715.0, 311.0], [713.0, 1471.0], [712.0, 627.0], [735.0, 527.0], [720.0, 139.0], [733.0, 676.0], [730.0, 738.0], [728.0, 303.0], [711.0, 55.0], [710.0, 168.0], [709.0, 748.0], [708.0, 628.0], [706.0, 404.0], [727.0, 239.0], [725.0, 482.0], [724.0, 344.5], [722.0, 506.3333333333333], [761.0, 1889.3333333333335], [766.0, 2642.0], [758.0, 839.0967741935483], [759.0, 905.0], [760.0, 2923.0], [743.0, 399.0], [742.0, 711.0], [741.0, 734.5], [739.0, 243.0], [738.0, 960.5], [737.0, 307.0], [736.0, 181.0], [751.0, 1240.0], [749.0, 1960.6666666666667], [748.0, 2628.0], [747.0, 117.0], [746.0, 763.3461538461542], [744.0, 803.5], [763.0, 1058.0], [767.0, 1808.0], [753.0, 1712.0], [752.0, 1676.0], [755.0, 2352.0], [754.0, 2340.0], [757.0, 1899.3333333333333], [756.0, 2662.0], [765.0, 2356.5], [764.0, 2468.5], [762.0, 2706.3333333333335], [795.0, 2499.0], [771.0, 1780.6666666666667], [769.0, 2313.5], [783.0, 2225.5], [782.0, 2322.0], [779.0, 2728.0], [778.0, 2396.6666666666665], [776.0, 1852.0], [773.0, 1225.5], [799.0, 2561.0], [785.0, 2853.0], [784.0, 1597.0], [788.0, 2402.0], [787.0, 2633.0], [791.0, 2339.0], [789.0, 2782.0], [797.0, 2359.0], [796.0, 2379.0], [794.0, 2397.0], [793.0, 2598.0], [792.0, 2573.6], [774.0, 2455.0], [805.0, 1305.0], [804.0, 902.0625], [803.0, 2105.0], [802.0, 1995.0], [801.0, 2361.0], [800.0, 2848.0], [806.0, 1232.0833333333335], [807.0, 1964.6666666666667], [825.0, 2511.0], [824.0, 2589.0], [829.0, 2382.0], [828.0, 2438.0], [809.0, 1102.1666666666665], [810.0, 796.3333333333334], [814.0, 1576.5], [813.0, 2281.5], [812.0, 2178.5], [811.0, 2633.0], [815.0, 1554.6666666666667], [831.0, 2166.3333333333335], [818.0, 2379.75], [817.0, 2192.5], [820.0, 2462.0], [819.0, 2186.0], [822.0, 2537.5], [821.0, 2150.0], [830.0, 2143.0], [858.0, 2191.5], [860.0, 1500.0], [861.0, 2592.0], [859.0, 2345.0], [857.0, 2097.5], [839.0, 1723.0], [837.0, 2342.0], [836.0, 1613.0], [834.0, 2303.0], [833.0, 2210.0], [832.0, 2472.5], [854.0, 1945.8], [849.0, 2202.0], [845.0, 2064.5], [843.0, 2247.0], [842.0, 2498.3333333333335], [841.0, 2215.0], [840.0, 2418.0], [893.0, 2200.0], [870.0, 1213.0], [871.0, 1243.0], [892.0, 2331.0], [872.0, 968.3076923076923], [874.0, 771.6666666666667], [878.0, 1237.0], [875.0, 2260.0], [879.0, 922.8666666666666], [869.0, 2418.0], [868.0, 122.0], [886.0, 1820.5], [885.0, 2370.0], [884.0, 1483.0], [883.0, 2049.5], [881.0, 1746.0], [880.0, 2279.0], [895.0, 1386.0], [894.0, 1314.0], [914.0, 2484.0], [927.0, 2052.0], [926.0, 590.3333333333333], [925.0, 556.3333333333334], [921.0, 2136.0], [911.0, 109.5], [896.0, 2366.0], [902.0, 2056.5], [899.0, 1578.0], [909.0, 1613.0], [907.0, 1080.5], [906.0, 1609.4], [905.0, 2365.0], [904.0, 848.0], [918.0, 2330.0], [917.0, 1198.5], [916.0, 1982.5], [912.0, 908.6666666666667], [958.0, 1808.5], [959.0, 2228.0], [955.0, 1684.0], [954.0, 569.0], [952.0, 2225.0], [934.0, 765.0], [933.0, 849.0], [931.0, 1450.0], [930.0, 1985.0], [928.0, 825.5], [940.0, 1587.0], [939.0, 2050.0], [936.0, 2247.0], [951.0, 659.4], [950.0, 35.0], [948.0, 1458.0], [945.0, 905.3333333333334], [991.0, 102.0], [985.0, 80.0], [967.0, 370.33333333333337], [966.0, 53.0], [965.0, 1376.0], [964.0, 1475.0], [963.0, 1324.0], [961.0, 2103.0], [983.0, 55.0], [980.0, 241.8], [978.0, 281.0], [977.0, 180.0], [976.0, 596.0], [975.0, 2096.0], [973.0, 732.1428571428571], [971.0, 1072.5], [970.0, 917.75], [969.0, 1325.0], [1022.0, 1039.2857142857142], [1020.0, 1082.7323943661975], [1023.0, 393.0], [1018.0, 830.4], [1017.0, 429.75], [997.0, 693.3333333333334], [996.0, 197.0], [994.0, 522.6428571428571], [993.0, 1065.5], [1006.0, 1081.0], [1005.0, 115.5], [1003.0, 9.0], [1001.0, 556.6666666666667], [1015.0, 332.0], [1010.0, 59.0], [1009.0, 19.0], [1008.0, 194.5], [1024.0, 1266.9071528751647], [1.0, 9786.333333333334]], "isOverall": false, "label": "get", "isController": false}, {"data": [[756.5420206588856, 956.0573620194294]], "isOverall": false, "label": "get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1024.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3266.4166666666665, "minX": 1.62502284E12, "maxY": 572279.5666666667, "series": [{"data": [[1.62502296E12, 213585.38333333333], [1.62502284E12, 3523.8333333333335], [1.62502302E12, 572279.5666666667], [1.6250229E12, 57513.85], [1.62502308E12, 41526.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62502296E12, 200105.1], [1.62502284E12, 3266.4166666666665], [1.62502302E12, 167947.6], [1.6250229E12, 53428.88333333333], [1.62502308E12, 38883.46666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502308E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 56.30463836477981, "minX": 1.62502284E12, "maxY": 1927.1538989566207, "series": [{"data": [[1.62502296E12, 1145.310592185597], [1.62502284E12, 301.2289156626506], [1.62502302E12, 307.30586929055636], [1.6250229E12, 1813.806819844866], [1.62502308E12, 56.30463836477981]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502296E12, 1286.4656447799946], [1.62502284E12, 596.9177777777779], [1.62502302E12, 535.1684988627735], [1.6250229E12, 1927.1538989566207], [1.62502308E12, 79.47159090909092]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502308E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 56.29775943396214, "minX": 1.62502284E12, "maxY": 1927.1482701812176, "series": [{"data": [[1.62502296E12, 1145.3063186813267], [1.62502284E12, 301.1975903614457], [1.62502302E12, 235.14866572227078], [1.6250229E12, 1813.8003805063672], [1.62502308E12, 56.29775943396214]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502296E12, 1286.4572180279085], [1.62502284E12, 596.4777777777779], [1.62502302E12, 404.173692191056], [1.6250229E12, 1927.1482701812176], [1.62502308E12, 79.4672805642633]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502308E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62502284E12, "maxY": 431.12433661865754, "series": [{"data": [[1.62502296E12, 0.0], [1.62502284E12, 0.0], [1.62502302E12, 192.6036601707553], [1.6250229E12, 0.0], [1.62502308E12, 0.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502296E12, 31.10119728513679], [1.62502284E12, 284.326666666667], [1.62502302E12, 431.12433661865754], [1.6250229E12, 22.45373421197146], [1.62502308E12, 18.29075235109719]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502308E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.62502284E12, "maxY": 20083.0, "series": [{"data": [[1.62502296E12, 20083.0], [1.62502284E12, 1604.0], [1.62502302E12, 14205.0], [1.6250229E12, 18319.0], [1.62502308E12, 10667.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62502296E12, 2803.0], [1.62502284E12, 625.8], [1.62502302E12, 111.0], [1.6250229E12, 5720.300000000001], [1.62502308E12, 103.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62502296E12, 4088.0], [1.62502284E12, 1507.68], [1.62502302E12, 562.9900000000016], [1.6250229E12, 9919.0], [1.62502308E12, 370.0699999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62502296E12, 3384.9500000000007], [1.62502284E12, 1361.3999999999999], [1.62502302E12, 186.0], [1.6250229E12, 9004.55], [1.62502308E12, 168.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62502296E12, 4.0], [1.62502284E12, 6.0], [1.62502302E12, 4.0], [1.6250229E12, 5.0], [1.62502308E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62502296E12, 488.0], [1.62502284E12, 404.0], [1.62502302E12, 25.0], [1.6250229E12, 508.0], [1.62502308E12, 29.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502308E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 10941.5, "series": [{"data": [[2.0, 9186.0], [4.0, 10941.5], [16.0, 1090.0], [25.0, 382.0], [50.0, 1180.0], [51.0, 1100.0], [53.0, 990.0], [55.0, 1112.0], [63.0, 810.0], [68.0, 995.0], [73.0, 691.0], [89.0, 699.0], [94.0, 975.5], [92.0, 616.5], [96.0, 703.0], [102.0, 508.0], [105.0, 409.0], [108.0, 591.5], [112.0, 584.0], [118.0, 591.0], [123.0, 607.5], [124.0, 506.0], [126.0, 492.0], [130.0, 606.5], [135.0, 401.0], [128.0, 380.0], [133.0, 277.0], [147.0, 403.0], [190.0, 299.0], [194.0, 297.0], [203.0, 297.0], [220.0, 290.5], [240.0, 4787.0], [269.0, 4409.0], [285.0, 3401.0], [283.0, 4247.0], [291.0, 2921.5], [301.0, 4499.0], [288.0, 33.5], [317.0, 1599.0], [310.0, 4802.5], [314.0, 799.0], [331.0, 1667.0], [347.0, 4615.0], [342.0, 89.0], [343.0, 1899.0], [367.0, 1172.0], [401.0, 677.0], [407.0, 1615.0], [406.0, 15.0], [428.0, 653.5], [425.0, 210.0], [436.0, 85.0], [451.0, 14.0], [481.0, 495.0], [516.0, 484.5], [545.0, 305.0], [580.0, 20.0], [582.0, 23.0], [577.0, 41.0], [578.0, 389.0], [635.0, 680.0], [664.0, 1304.0], [643.0, 97.0], [670.0, 49.5], [646.0, 294.5], [641.0, 402.0], [647.0, 892.0], [666.0, 1002.5], [669.0, 116.0], [659.0, 282.5], [677.0, 21.0], [689.0, 366.5], [703.0, 84.0], [686.0, 188.0], [676.0, 1305.5], [724.0, 88.0], [709.0, 85.0], [716.0, 377.0], [719.0, 512.0], [708.0, 1054.5], [725.0, 20.0], [736.0, 75.0], [750.0, 85.0], [749.0, 474.0], [760.0, 328.0], [779.0, 76.0], [771.0, 406.0], [778.0, 419.5], [773.0, 260.5], [800.0, 80.5], [810.0, 99.0], [806.0, 52.0], [804.0, 264.0], [825.0, 32.0], [841.0, 491.0], [848.0, 800.0], [861.0, 83.0], [871.0, 490.0], [888.0, 863.0], [880.0, 131.0], [864.0, 142.5], [886.0, 16.0], [916.0, 473.5], [927.0, 484.0], [905.0, 209.5], [907.0, 436.0], [900.0, 156.0], [909.0, 1226.5], [896.0, 19.0], [944.0, 993.0], [935.0, 259.5], [955.0, 18.0], [941.0, 468.0], [938.0, 1462.0], [930.0, 69.0], [951.0, 556.0], [932.0, 26.0], [975.0, 471.0], [964.0, 200.0], [1022.0, 443.5], [1000.0, 461.5], [997.0, 40.0], [1013.0, 20.0], [1021.0, 38.0], [1035.0, 420.0], [1034.0, 434.5], [1025.0, 511.0], [1081.0, 495.0], [1038.0, 388.5], [1056.0, 335.0], [1060.0, 23.0], [1062.0, 30.0], [1057.0, 26.0], [1024.0, 515.0], [1078.0, 501.5], [1072.0, 19.0], [1053.0, 495.0], [1043.0, 74.5], [1041.0, 36.0], [1047.0, 34.0], [1068.0, 511.0], [1065.0, 210.5], [1142.0, 400.0], [1099.0, 498.0], [1098.0, 325.5], [1144.0, 506.0], [1132.0, 30.0], [1097.0, 37.0], [1126.0, 24.0], [1100.0, 25.0], [1177.0, 503.0], [1193.0, 138.0], [1158.0, 502.0], [1205.0, 39.0], [1168.0, 27.0], [1176.0, 28.0], [1163.0, 22.0], [1221.0, 485.0], [1267.0, 402.0], [1264.0, 226.0], [1240.0, 26.0], [1236.0, 24.0], [1257.0, 36.0], [1312.0, 422.0], [1330.0, 38.0], [1367.0, 400.0], [1346.0, 419.0], [1468.0, 33.0], [1523.0, 394.0], [1.0, 10196.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[669.0, 255.0], [659.0, 1213.0], [689.0, 10151.0], [708.0, 166.0], [725.0, 83.5], [724.0, 200.5], [760.0, 226.0], [779.0, 423.0], [806.0, 189.0], [804.0, 189.0], [848.0, 881.0], [861.0, 304.0], [888.0, 153.0], [880.0, 486.0], [864.0, 349.0], [905.0, 589.0], [907.0, 117.0], [900.0, 309.0], [909.0, 316.0], [944.0, 804.0], [935.0, 377.0], [955.0, 203.0], [941.0, 453.5], [938.0, 962.0], [930.0, 267.0], [951.0, 1397.0], [964.0, 292.0], [1081.0, 268.0], [1065.0, 159.0], [1043.0, 127.0], [1099.0, 574.0], [1193.0, 522.0], [1205.0, 384.0], [1221.0, 12.0], [1264.0, 220.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1523.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 10941.5, "series": [{"data": [[2.0, 9186.0], [4.0, 10941.5], [16.0, 1090.0], [25.0, 382.0], [50.0, 1180.0], [51.0, 1100.0], [53.0, 990.0], [55.0, 1112.0], [63.0, 810.0], [68.0, 995.0], [73.0, 691.0], [89.0, 699.0], [94.0, 975.5], [92.0, 616.0], [96.0, 703.0], [102.0, 508.0], [105.0, 409.0], [108.0, 591.5], [112.0, 584.0], [118.0, 591.0], [123.0, 607.5], [124.0, 506.0], [126.0, 492.0], [130.0, 606.5], [135.0, 401.0], [128.0, 380.0], [133.0, 277.0], [147.0, 403.0], [190.0, 299.0], [194.0, 297.0], [203.0, 297.0], [220.0, 290.0], [240.0, 4787.0], [269.0, 4409.0], [285.0, 3401.0], [283.0, 4247.0], [291.0, 2921.5], [301.0, 4499.0], [288.0, 33.5], [317.0, 1599.0], [310.0, 4802.5], [314.0, 799.0], [331.0, 1667.0], [347.0, 4615.0], [342.0, 88.5], [343.0, 1899.0], [367.0, 1172.0], [401.0, 677.0], [407.0, 1615.0], [406.0, 15.0], [428.0, 653.5], [425.0, 210.0], [436.0, 85.0], [451.0, 14.0], [481.0, 495.0], [516.0, 484.5], [545.0, 305.0], [580.0, 20.0], [582.0, 23.0], [577.0, 41.0], [578.0, 389.0], [635.0, 680.0], [664.0, 1304.0], [643.0, 97.0], [670.0, 49.5], [646.0, 294.5], [641.0, 402.0], [647.0, 892.0], [666.0, 1002.5], [669.0, 116.0], [659.0, 282.5], [677.0, 21.0], [689.0, 366.5], [703.0, 84.0], [686.0, 188.0], [676.0, 1305.5], [724.0, 88.0], [709.0, 85.0], [716.0, 377.0], [719.0, 512.0], [708.0, 1054.5], [725.0, 20.0], [736.0, 75.0], [750.0, 85.0], [749.0, 474.0], [760.0, 328.0], [779.0, 76.0], [771.0, 406.0], [778.0, 419.5], [773.0, 260.5], [800.0, 80.5], [810.0, 99.0], [806.0, 52.0], [804.0, 264.0], [825.0, 32.0], [841.0, 491.0], [848.0, 800.0], [861.0, 83.0], [871.0, 490.0], [888.0, 863.0], [880.0, 131.0], [864.0, 142.5], [886.0, 16.0], [916.0, 473.5], [927.0, 484.0], [905.0, 209.5], [907.0, 436.0], [900.0, 156.0], [909.0, 1226.5], [896.0, 19.0], [944.0, 993.0], [935.0, 259.5], [955.0, 18.0], [941.0, 468.0], [938.0, 1462.0], [930.0, 69.0], [951.0, 556.0], [932.0, 26.0], [975.0, 471.0], [964.0, 200.0], [1022.0, 443.5], [1000.0, 461.5], [997.0, 40.0], [1013.0, 20.0], [1021.0, 38.0], [1035.0, 420.0], [1034.0, 434.5], [1025.0, 511.0], [1081.0, 495.0], [1038.0, 388.5], [1056.0, 335.0], [1060.0, 23.0], [1062.0, 30.0], [1057.0, 26.0], [1024.0, 515.0], [1078.0, 501.5], [1072.0, 19.0], [1053.0, 495.0], [1043.0, 74.5], [1041.0, 36.0], [1047.0, 34.0], [1068.0, 511.0], [1065.0, 210.5], [1142.0, 400.0], [1099.0, 498.0], [1098.0, 325.5], [1144.0, 506.0], [1132.0, 30.0], [1097.0, 37.0], [1126.0, 24.0], [1100.0, 25.0], [1177.0, 503.0], [1193.0, 138.0], [1158.0, 502.0], [1205.0, 39.0], [1168.0, 27.0], [1176.0, 28.0], [1163.0, 22.0], [1221.0, 485.0], [1267.0, 402.0], [1264.0, 226.0], [1240.0, 26.0], [1236.0, 24.0], [1257.0, 36.0], [1312.0, 422.0], [1330.0, 38.0], [1367.0, 400.0], [1346.0, 419.0], [1468.0, 33.0], [1523.0, 394.0], [1.0, 10196.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[669.0, 0.0], [659.0, 0.0], [689.0, 10151.0], [708.0, 0.0], [725.0, 0.0], [724.0, 0.0], [760.0, 0.0], [779.0, 0.0], [806.0, 0.0], [804.0, 0.0], [848.0, 0.0], [861.0, 0.0], [888.0, 0.0], [880.0, 0.0], [864.0, 0.0], [905.0, 0.0], [907.0, 0.0], [900.0, 0.0], [909.0, 0.0], [944.0, 0.0], [935.0, 0.0], [955.0, 0.0], [941.0, 0.0], [938.0, 0.0], [930.0, 0.0], [951.0, 0.0], [964.0, 0.0], [1081.0, 268.0], [1065.0, 0.0], [1043.0, 0.0], [1099.0, 574.0], [1193.0, 522.0], [1205.0, 0.0], [1221.0, 12.0], [1264.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1523.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.483333333333333, "minX": 1.62502284E12, "maxY": 873.9, "series": [{"data": [[1.62502296E12, 873.9], [1.62502284E12, 15.483333333333333], [1.62502302E12, 858.9833333333333], [1.6250229E12, 251.28333333333333], [1.62502308E12, 168.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502308E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.62502284E12, "maxY": 873.8166666666667, "series": [{"data": [[1.62502296E12, 873.8166666666667], [1.62502284E12, 14.416666666666666], [1.62502302E12, 720.4], [1.6250229E12, 235.13333333333333], [1.62502308E12, 169.86666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62502296E12, 0.08333333333333333], [1.6250229E12, 0.15]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.62502302E12, 154.58333333333334]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502308E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.62502284E12, "maxY": 437.05, "series": [{"data": [[1.62502296E12, 0.05], [1.62502302E12, 104.26666666666667], [1.6250229E12, 0.08333333333333333]], "isOverall": false, "label": "get-failure", "isController": false}, {"data": [[1.62502296E12, 437.05], [1.62502284E12, 7.5], [1.62502302E12, 335.4], [1.6250229E12, 121.31666666666666], [1.62502308E12, 85.06666666666666]], "isOverall": false, "label": "get-success", "isController": false}, {"data": [[1.62502296E12, 436.76666666666665], [1.62502284E12, 6.916666666666667], [1.62502302E12, 385.0], [1.6250229E12, 113.81666666666666], [1.62502308E12, 84.8]], "isOverall": false, "label": "post-success", "isController": false}, {"data": [[1.62502296E12, 0.03333333333333333], [1.62502302E12, 50.31666666666667], [1.6250229E12, 0.06666666666666667]], "isOverall": false, "label": "post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502308E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.62502284E12, "maxY": 873.8166666666667, "series": [{"data": [[1.62502296E12, 873.8166666666667], [1.62502284E12, 14.416666666666666], [1.62502302E12, 720.4], [1.6250229E12, 235.13333333333333], [1.62502308E12, 169.86666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62502296E12, 0.08333333333333333], [1.62502302E12, 154.58333333333334], [1.6250229E12, 0.15]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502308E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

