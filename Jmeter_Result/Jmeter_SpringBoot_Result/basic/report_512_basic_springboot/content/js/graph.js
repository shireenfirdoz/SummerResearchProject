/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 20569.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 6.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 8.0], [14.5, 8.0], [14.6, 8.0], [14.7, 8.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 9.0], [19.6, 9.0], [19.7, 9.0], [19.8, 9.0], [19.9, 9.0], [20.0, 9.0], [20.1, 9.0], [20.2, 9.0], [20.3, 9.0], [20.4, 9.0], [20.5, 9.0], [20.6, 9.0], [20.7, 9.0], [20.8, 9.0], [20.9, 9.0], [21.0, 10.0], [21.1, 10.0], [21.2, 10.0], [21.3, 10.0], [21.4, 10.0], [21.5, 10.0], [21.6, 10.0], [21.7, 10.0], [21.8, 10.0], [21.9, 10.0], [22.0, 10.0], [22.1, 10.0], [22.2, 10.0], [22.3, 10.0], [22.4, 10.0], [22.5, 10.0], [22.6, 10.0], [22.7, 10.0], [22.8, 10.0], [22.9, 10.0], [23.0, 10.0], [23.1, 10.0], [23.2, 10.0], [23.3, 10.0], [23.4, 10.0], [23.5, 10.0], [23.6, 10.0], [23.7, 10.0], [23.8, 10.0], [23.9, 10.0], [24.0, 10.0], [24.1, 10.0], [24.2, 10.0], [24.3, 10.0], [24.4, 11.0], [24.5, 11.0], [24.6, 11.0], [24.7, 11.0], [24.8, 11.0], [24.9, 11.0], [25.0, 11.0], [25.1, 11.0], [25.2, 11.0], [25.3, 11.0], [25.4, 11.0], [25.5, 11.0], [25.6, 11.0], [25.7, 11.0], [25.8, 11.0], [25.9, 11.0], [26.0, 11.0], [26.1, 11.0], [26.2, 11.0], [26.3, 11.0], [26.4, 11.0], [26.5, 11.0], [26.6, 11.0], [26.7, 11.0], [26.8, 11.0], [26.9, 12.0], [27.0, 12.0], [27.1, 12.0], [27.2, 12.0], [27.3, 12.0], [27.4, 12.0], [27.5, 12.0], [27.6, 12.0], [27.7, 12.0], [27.8, 12.0], [27.9, 12.0], [28.0, 12.0], [28.1, 12.0], [28.2, 12.0], [28.3, 12.0], [28.4, 12.0], [28.5, 12.0], [28.6, 12.0], [28.7, 12.0], [28.8, 12.0], [28.9, 13.0], [29.0, 13.0], [29.1, 13.0], [29.2, 13.0], [29.3, 13.0], [29.4, 13.0], [29.5, 13.0], [29.6, 13.0], [29.7, 13.0], [29.8, 13.0], [29.9, 13.0], [30.0, 13.0], [30.1, 13.0], [30.2, 13.0], [30.3, 14.0], [30.4, 14.0], [30.5, 14.0], [30.6, 14.0], [30.7, 14.0], [30.8, 14.0], [30.9, 14.0], [31.0, 14.0], [31.1, 14.0], [31.2, 14.0], [31.3, 14.0], [31.4, 15.0], [31.5, 15.0], [31.6, 15.0], [31.7, 15.0], [31.8, 15.0], [31.9, 15.0], [32.0, 15.0], [32.1, 15.0], [32.2, 15.0], [32.3, 16.0], [32.4, 16.0], [32.5, 16.0], [32.6, 16.0], [32.7, 16.0], [32.8, 16.0], [32.9, 16.0], [33.0, 16.0], [33.1, 16.0], [33.2, 17.0], [33.3, 17.0], [33.4, 17.0], [33.5, 17.0], [33.6, 17.0], [33.7, 17.0], [33.8, 18.0], [33.9, 18.0], [34.0, 18.0], [34.1, 18.0], [34.2, 18.0], [34.3, 19.0], [34.4, 19.0], [34.5, 19.0], [34.6, 19.0], [34.7, 19.0], [34.8, 20.0], [34.9, 20.0], [35.0, 20.0], [35.1, 20.0], [35.2, 21.0], [35.3, 21.0], [35.4, 21.0], [35.5, 21.0], [35.6, 22.0], [35.7, 22.0], [35.8, 22.0], [35.9, 23.0], [36.0, 23.0], [36.1, 23.0], [36.2, 24.0], [36.3, 24.0], [36.4, 24.0], [36.5, 24.0], [36.6, 25.0], [36.7, 25.0], [36.8, 25.0], [36.9, 26.0], [37.0, 26.0], [37.1, 26.0], [37.2, 27.0], [37.3, 27.0], [37.4, 28.0], [37.5, 28.0], [37.6, 28.0], [37.7, 29.0], [37.8, 29.0], [37.9, 30.0], [38.0, 30.0], [38.1, 31.0], [38.2, 31.0], [38.3, 32.0], [38.4, 32.0], [38.5, 33.0], [38.6, 33.0], [38.7, 33.0], [38.8, 34.0], [38.9, 34.0], [39.0, 35.0], [39.1, 35.0], [39.2, 36.0], [39.3, 36.0], [39.4, 37.0], [39.5, 37.0], [39.6, 38.0], [39.7, 38.0], [39.8, 39.0], [39.9, 40.0], [40.0, 40.0], [40.1, 41.0], [40.2, 41.0], [40.3, 42.0], [40.4, 42.0], [40.5, 43.0], [40.6, 43.0], [40.7, 44.0], [40.8, 44.0], [40.9, 45.0], [41.0, 45.0], [41.1, 46.0], [41.2, 47.0], [41.3, 47.0], [41.4, 48.0], [41.5, 48.0], [41.6, 49.0], [41.7, 49.0], [41.8, 50.0], [41.9, 50.0], [42.0, 51.0], [42.1, 51.0], [42.2, 52.0], [42.3, 53.0], [42.4, 53.0], [42.5, 53.0], [42.6, 54.0], [42.7, 54.0], [42.8, 55.0], [42.9, 55.0], [43.0, 56.0], [43.1, 56.0], [43.2, 57.0], [43.3, 57.0], [43.4, 58.0], [43.5, 58.0], [43.6, 59.0], [43.7, 59.0], [43.8, 60.0], [43.9, 60.0], [44.0, 61.0], [44.1, 61.0], [44.2, 62.0], [44.3, 62.0], [44.4, 63.0], [44.5, 64.0], [44.6, 64.0], [44.7, 65.0], [44.8, 65.0], [44.9, 66.0], [45.0, 66.0], [45.1, 67.0], [45.2, 67.0], [45.3, 68.0], [45.4, 68.0], [45.5, 69.0], [45.6, 69.0], [45.7, 70.0], [45.8, 70.0], [45.9, 70.0], [46.0, 71.0], [46.1, 71.0], [46.2, 72.0], [46.3, 72.0], [46.4, 73.0], [46.5, 73.0], [46.6, 73.0], [46.7, 74.0], [46.8, 74.0], [46.9, 75.0], [47.0, 75.0], [47.1, 76.0], [47.2, 76.0], [47.3, 77.0], [47.4, 77.0], [47.5, 77.0], [47.6, 78.0], [47.7, 78.0], [47.8, 78.0], [47.9, 79.0], [48.0, 79.0], [48.1, 80.0], [48.2, 80.0], [48.3, 80.0], [48.4, 81.0], [48.5, 81.0], [48.6, 81.0], [48.7, 82.0], [48.8, 82.0], [48.9, 82.0], [49.0, 83.0], [49.1, 83.0], [49.2, 84.0], [49.3, 84.0], [49.4, 84.0], [49.5, 84.0], [49.6, 85.0], [49.7, 85.0], [49.8, 85.0], [49.9, 86.0], [50.0, 86.0], [50.1, 86.0], [50.2, 87.0], [50.3, 87.0], [50.4, 87.0], [50.5, 88.0], [50.6, 88.0], [50.7, 88.0], [50.8, 88.0], [50.9, 89.0], [51.0, 89.0], [51.1, 89.0], [51.2, 90.0], [51.3, 90.0], [51.4, 90.0], [51.5, 90.0], [51.6, 91.0], [51.7, 91.0], [51.8, 91.0], [51.9, 91.0], [52.0, 92.0], [52.1, 92.0], [52.2, 92.0], [52.3, 92.0], [52.4, 93.0], [52.5, 93.0], [52.6, 93.0], [52.7, 93.0], [52.8, 94.0], [52.9, 94.0], [53.0, 94.0], [53.1, 95.0], [53.2, 95.0], [53.3, 95.0], [53.4, 95.0], [53.5, 96.0], [53.6, 96.0], [53.7, 96.0], [53.8, 97.0], [53.9, 97.0], [54.0, 97.0], [54.1, 98.0], [54.2, 98.0], [54.3, 98.0], [54.4, 98.0], [54.5, 99.0], [54.6, 99.0], [54.7, 99.0], [54.8, 100.0], [54.9, 100.0], [55.0, 100.0], [55.1, 101.0], [55.2, 101.0], [55.3, 102.0], [55.4, 102.0], [55.5, 103.0], [55.6, 103.0], [55.7, 104.0], [55.8, 105.0], [55.9, 106.0], [56.0, 106.0], [56.1, 107.0], [56.2, 108.0], [56.3, 109.0], [56.4, 110.0], [56.5, 111.0], [56.6, 113.0], [56.7, 114.0], [56.8, 115.0], [56.9, 117.0], [57.0, 118.0], [57.1, 120.0], [57.2, 121.0], [57.3, 123.0], [57.4, 124.0], [57.5, 126.0], [57.6, 128.0], [57.7, 130.0], [57.8, 132.0], [57.9, 135.0], [58.0, 137.0], [58.1, 139.0], [58.2, 141.0], [58.3, 143.0], [58.4, 145.0], [58.5, 148.0], [58.6, 150.0], [58.7, 153.0], [58.8, 156.0], [58.9, 158.0], [59.0, 160.0], [59.1, 162.0], [59.2, 164.0], [59.3, 166.0], [59.4, 168.0], [59.5, 170.0], [59.6, 173.0], [59.7, 175.0], [59.8, 177.0], [59.9, 179.0], [60.0, 181.0], [60.1, 183.0], [60.2, 185.0], [60.3, 187.0], [60.4, 189.0], [60.5, 191.0], [60.6, 192.0], [60.7, 194.0], [60.8, 196.0], [60.9, 197.0], [61.0, 199.0], [61.1, 200.0], [61.2, 202.0], [61.3, 203.0], [61.4, 204.0], [61.5, 206.0], [61.6, 207.0], [61.7, 208.0], [61.8, 209.0], [61.9, 210.0], [62.0, 212.0], [62.1, 213.0], [62.2, 214.0], [62.3, 216.0], [62.4, 218.0], [62.5, 220.0], [62.6, 221.0], [62.7, 223.0], [62.8, 224.0], [62.9, 226.0], [63.0, 228.0], [63.1, 229.0], [63.2, 231.0], [63.3, 233.0], [63.4, 235.0], [63.5, 237.0], [63.6, 239.0], [63.7, 242.0], [63.8, 245.0], [63.9, 247.0], [64.0, 250.0], [64.1, 253.0], [64.2, 256.0], [64.3, 258.0], [64.4, 261.0], [64.5, 263.0], [64.6, 266.0], [64.7, 268.0], [64.8, 270.0], [64.9, 272.0], [65.0, 273.0], [65.1, 275.0], [65.2, 277.0], [65.3, 279.0], [65.4, 280.0], [65.5, 281.0], [65.6, 283.0], [65.7, 284.0], [65.8, 286.0], [65.9, 287.0], [66.0, 288.0], [66.1, 289.0], [66.2, 290.0], [66.3, 291.0], [66.4, 292.0], [66.5, 293.0], [66.6, 294.0], [66.7, 295.0], [66.8, 296.0], [66.9, 297.0], [67.0, 298.0], [67.1, 298.0], [67.2, 299.0], [67.3, 300.0], [67.4, 301.0], [67.5, 302.0], [67.6, 302.0], [67.7, 303.0], [67.8, 304.0], [67.9, 305.0], [68.0, 306.0], [68.1, 307.0], [68.2, 308.0], [68.3, 308.0], [68.4, 309.0], [68.5, 311.0], [68.6, 312.0], [68.7, 312.0], [68.8, 314.0], [68.9, 315.0], [69.0, 316.0], [69.1, 317.0], [69.2, 319.0], [69.3, 320.0], [69.4, 322.0], [69.5, 323.0], [69.6, 325.0], [69.7, 327.0], [69.8, 329.0], [69.9, 331.0], [70.0, 333.0], [70.1, 335.0], [70.2, 338.0], [70.3, 341.0], [70.4, 344.0], [70.5, 346.0], [70.6, 349.0], [70.7, 352.0], [70.8, 355.0], [70.9, 357.0], [71.0, 360.0], [71.1, 362.0], [71.2, 365.0], [71.3, 367.0], [71.4, 368.0], [71.5, 370.0], [71.6, 372.0], [71.7, 373.0], [71.8, 375.0], [71.9, 377.0], [72.0, 378.0], [72.1, 380.0], [72.2, 381.0], [72.3, 383.0], [72.4, 384.0], [72.5, 385.0], [72.6, 386.0], [72.7, 387.0], [72.8, 389.0], [72.9, 390.0], [73.0, 390.0], [73.1, 391.0], [73.2, 392.0], [73.3, 393.0], [73.4, 394.0], [73.5, 395.0], [73.6, 395.0], [73.7, 396.0], [73.8, 397.0], [73.9, 398.0], [74.0, 399.0], [74.1, 400.0], [74.2, 401.0], [74.3, 401.0], [74.4, 402.0], [74.5, 403.0], [74.6, 404.0], [74.7, 405.0], [74.8, 406.0], [74.9, 407.0], [75.0, 408.0], [75.1, 409.0], [75.2, 410.0], [75.3, 411.0], [75.4, 412.0], [75.5, 413.0], [75.6, 414.0], [75.7, 415.0], [75.8, 417.0], [75.9, 418.0], [76.0, 419.0], [76.1, 421.0], [76.2, 422.0], [76.3, 425.0], [76.4, 426.0], [76.5, 429.0], [76.6, 432.0], [76.7, 436.0], [76.8, 441.0], [76.9, 445.0], [77.0, 449.0], [77.1, 452.0], [77.2, 456.0], [77.3, 459.0], [77.4, 461.0], [77.5, 463.0], [77.6, 466.0], [77.7, 468.0], [77.8, 471.0], [77.9, 473.0], [78.0, 474.0], [78.1, 476.0], [78.2, 478.0], [78.3, 479.0], [78.4, 481.0], [78.5, 483.0], [78.6, 484.0], [78.7, 485.0], [78.8, 487.0], [78.9, 488.0], [79.0, 489.0], [79.1, 490.0], [79.2, 491.0], [79.3, 493.0], [79.4, 494.0], [79.5, 495.0], [79.6, 496.0], [79.7, 497.0], [79.8, 498.0], [79.9, 499.0], [80.0, 501.0], [80.1, 502.0], [80.2, 503.0], [80.3, 504.0], [80.4, 505.0], [80.5, 506.0], [80.6, 508.0], [80.7, 509.0], [80.8, 511.0], [80.9, 513.0], [81.0, 515.0], [81.1, 518.0], [81.2, 520.0], [81.3, 524.0], [81.4, 530.0], [81.5, 538.0], [81.6, 544.0], [81.7, 550.0], [81.8, 557.0], [81.9, 561.0], [82.0, 566.0], [82.1, 570.0], [82.2, 574.0], [82.3, 577.0], [82.4, 580.0], [82.5, 583.0], [82.6, 585.0], [82.7, 587.0], [82.8, 590.0], [82.9, 592.0], [83.0, 594.0], [83.1, 596.0], [83.2, 598.0], [83.3, 600.0], [83.4, 602.0], [83.5, 604.0], [83.6, 607.0], [83.7, 609.0], [83.8, 612.0], [83.9, 615.0], [84.0, 621.0], [84.1, 630.0], [84.2, 639.0], [84.3, 648.0], [84.4, 655.0], [84.5, 663.0], [84.6, 670.0], [84.7, 676.0], [84.8, 682.0], [84.9, 686.0], [85.0, 690.0], [85.1, 692.0], [85.2, 696.0], [85.3, 699.0], [85.4, 703.0], [85.5, 705.0], [85.6, 708.0], [85.7, 712.0], [85.8, 717.0], [85.9, 723.0], [86.0, 736.0], [86.1, 750.0], [86.2, 761.0], [86.3, 769.0], [86.4, 777.0], [86.5, 784.0], [86.6, 789.0], [86.7, 795.0], [86.8, 798.0], [86.9, 803.0], [87.0, 810.0], [87.1, 819.0], [87.2, 831.0], [87.3, 845.0], [87.4, 861.0], [87.5, 878.0], [87.6, 886.0], [87.7, 894.0], [87.8, 901.0], [87.9, 907.0], [88.0, 916.0], [88.1, 932.0], [88.2, 955.0], [88.3, 969.0], [88.4, 981.0], [88.5, 990.0], [88.6, 995.0], [88.7, 1001.0], [88.8, 1009.0], [88.9, 1019.0], [89.0, 1034.0], [89.1, 1050.0], [89.2, 1062.0], [89.3, 1070.0], [89.4, 1078.0], [89.5, 1086.0], [89.6, 1095.0], [89.7, 1101.0], [89.8, 1110.0], [89.9, 1119.0], [90.0, 1133.0], [90.1, 1150.0], [90.2, 1162.0], [90.3, 1176.0], [90.4, 1189.0], [90.5, 1197.0], [90.6, 1204.0], [90.7, 1210.0], [90.8, 1226.0], [90.9, 1245.0], [91.0, 1265.0], [91.1, 1283.0], [91.2, 1293.0], [91.3, 1304.0], [91.4, 1316.0], [91.5, 1330.0], [91.6, 1351.0], [91.7, 1368.0], [91.8, 1383.0], [91.9, 1393.0], [92.0, 1401.0], [92.1, 1410.0], [92.2, 1421.0], [92.3, 1446.0], [92.4, 1463.0], [92.5, 1478.0], [92.6, 1492.0], [92.7, 1501.0], [92.8, 1510.0], [92.9, 1529.0], [93.0, 1554.0], [93.1, 1572.0], [93.2, 1585.0], [93.3, 1594.0], [93.4, 1601.0], [93.5, 1610.0], [93.6, 1640.0], [93.7, 1658.0], [93.8, 1673.0], [93.9, 1683.0], [94.0, 1695.0], [94.1, 1705.0], [94.2, 1730.0], [94.3, 1758.0], [94.4, 1776.0], [94.5, 1790.0], [94.6, 1803.0], [94.7, 1821.0], [94.8, 1857.0], [94.9, 1887.0], [95.0, 1902.0], [95.1, 1935.0], [95.2, 1975.0], [95.3, 2001.0], [95.4, 2022.0], [95.5, 2071.0], [95.6, 2099.0], [95.7, 2119.0], [95.8, 2183.0], [95.9, 2208.0], [96.0, 2236.0], [96.1, 2292.0], [96.2, 2326.0], [96.3, 2426.0], [96.4, 2515.0], [96.5, 2595.0], [96.6, 2677.0], [96.7, 2747.0], [96.8, 2807.0], [96.9, 2868.0], [97.0, 2911.0], [97.1, 3082.0], [97.2, 3188.0], [97.3, 3381.0], [97.4, 3599.0], [97.5, 3798.0], [97.6, 3903.0], [97.7, 4008.0], [97.8, 4090.0], [97.9, 4196.0], [98.0, 4301.0], [98.1, 4402.0], [98.2, 4618.0], [98.3, 4985.0], [98.4, 5269.0], [98.5, 5410.0], [98.6, 5609.0], [98.7, 5824.0], [98.8, 6102.0], [98.9, 6379.0], [99.0, 6869.0], [99.1, 7367.0], [99.2, 7710.0], [99.3, 8186.0], [99.4, 8399.0], [99.5, 8595.0], [99.6, 9264.0], [99.7, 9683.0], [99.8, 10011.0], [99.9, 10334.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 7.0], [0.1, 9.0], [0.2, 11.0], [0.3, 13.0], [0.4, 13.0], [0.5, 13.0], [0.6, 14.0], [0.7, 14.0], [0.8, 14.0], [0.9, 14.0], [1.0, 14.0], [1.1, 14.0], [1.2, 15.0], [1.3, 15.0], [1.4, 15.0], [1.5, 15.0], [1.6, 15.0], [1.7, 15.0], [1.8, 15.0], [1.9, 15.0], [2.0, 15.0], [2.1, 16.0], [2.2, 16.0], [2.3, 16.0], [2.4, 16.0], [2.5, 16.0], [2.6, 16.0], [2.7, 16.0], [2.8, 16.0], [2.9, 16.0], [3.0, 16.0], [3.1, 17.0], [3.2, 17.0], [3.3, 17.0], [3.4, 17.0], [3.5, 17.0], [3.6, 17.0], [3.7, 17.0], [3.8, 17.0], [3.9, 17.0], [4.0, 17.0], [4.1, 17.0], [4.2, 17.0], [4.3, 18.0], [4.4, 18.0], [4.5, 18.0], [4.6, 18.0], [4.7, 18.0], [4.8, 18.0], [4.9, 18.0], [5.0, 18.0], [5.1, 18.0], [5.2, 18.0], [5.3, 18.0], [5.4, 19.0], [5.5, 19.0], [5.6, 19.0], [5.7, 19.0], [5.8, 19.0], [5.9, 19.0], [6.0, 19.0], [6.1, 19.0], [6.2, 19.0], [6.3, 20.0], [6.4, 20.0], [6.5, 20.0], [6.6, 20.0], [6.7, 20.0], [6.8, 20.0], [6.9, 20.0], [7.0, 20.0], [7.1, 20.0], [7.2, 21.0], [7.3, 21.0], [7.4, 21.0], [7.5, 21.0], [7.6, 21.0], [7.7, 21.0], [7.8, 21.0], [7.9, 21.0], [8.0, 22.0], [8.1, 22.0], [8.2, 22.0], [8.3, 22.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 23.0], [8.8, 23.0], [8.9, 23.0], [9.0, 23.0], [9.1, 23.0], [9.2, 23.0], [9.3, 24.0], [9.4, 24.0], [9.5, 24.0], [9.6, 24.0], [9.7, 24.0], [9.8, 25.0], [9.9, 25.0], [10.0, 25.0], [10.1, 25.0], [10.2, 25.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 26.0], [10.7, 26.0], [10.8, 27.0], [10.9, 27.0], [11.0, 27.0], [11.1, 27.0], [11.2, 28.0], [11.3, 28.0], [11.4, 28.0], [11.5, 28.0], [11.6, 29.0], [11.7, 29.0], [11.8, 29.0], [11.9, 29.0], [12.0, 30.0], [12.1, 30.0], [12.2, 30.0], [12.3, 30.0], [12.4, 31.0], [12.5, 31.0], [12.6, 31.0], [12.7, 31.0], [12.8, 32.0], [12.9, 32.0], [13.0, 32.0], [13.1, 33.0], [13.2, 33.0], [13.3, 33.0], [13.4, 33.0], [13.5, 34.0], [13.6, 34.0], [13.7, 34.0], [13.8, 34.0], [13.9, 35.0], [14.0, 35.0], [14.1, 35.0], [14.2, 36.0], [14.3, 36.0], [14.4, 36.0], [14.5, 37.0], [14.6, 37.0], [14.7, 37.0], [14.8, 38.0], [14.9, 38.0], [15.0, 38.0], [15.1, 39.0], [15.2, 39.0], [15.3, 39.0], [15.4, 40.0], [15.5, 40.0], [15.6, 40.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 43.0], [16.4, 43.0], [16.5, 44.0], [16.6, 44.0], [16.7, 44.0], [16.8, 45.0], [16.9, 45.0], [17.0, 45.0], [17.1, 46.0], [17.2, 46.0], [17.3, 46.0], [17.4, 47.0], [17.5, 47.0], [17.6, 47.0], [17.7, 48.0], [17.8, 48.0], [17.9, 49.0], [18.0, 49.0], [18.1, 49.0], [18.2, 50.0], [18.3, 50.0], [18.4, 50.0], [18.5, 51.0], [18.6, 51.0], [18.7, 51.0], [18.8, 52.0], [18.9, 52.0], [19.0, 53.0], [19.1, 53.0], [19.2, 53.0], [19.3, 54.0], [19.4, 54.0], [19.5, 54.0], [19.6, 55.0], [19.7, 55.0], [19.8, 55.0], [19.9, 56.0], [20.0, 56.0], [20.1, 57.0], [20.2, 57.0], [20.3, 57.0], [20.4, 58.0], [20.5, 58.0], [20.6, 58.0], [20.7, 59.0], [20.8, 59.0], [20.9, 60.0], [21.0, 60.0], [21.1, 60.0], [21.2, 61.0], [21.3, 61.0], [21.4, 61.0], [21.5, 62.0], [21.6, 62.0], [21.7, 62.0], [21.8, 63.0], [21.9, 63.0], [22.0, 63.0], [22.1, 64.0], [22.2, 64.0], [22.3, 65.0], [22.4, 65.0], [22.5, 65.0], [22.6, 66.0], [22.7, 66.0], [22.8, 66.0], [22.9, 67.0], [23.0, 67.0], [23.1, 67.0], [23.2, 68.0], [23.3, 68.0], [23.4, 69.0], [23.5, 69.0], [23.6, 69.0], [23.7, 70.0], [23.8, 70.0], [23.9, 71.0], [24.0, 71.0], [24.1, 71.0], [24.2, 72.0], [24.3, 72.0], [24.4, 73.0], [24.5, 73.0], [24.6, 73.0], [24.7, 74.0], [24.8, 74.0], [24.9, 74.0], [25.0, 75.0], [25.1, 75.0], [25.2, 76.0], [25.3, 76.0], [25.4, 76.0], [25.5, 77.0], [25.6, 77.0], [25.7, 77.0], [25.8, 78.0], [25.9, 78.0], [26.0, 78.0], [26.1, 78.0], [26.2, 79.0], [26.3, 79.0], [26.4, 79.0], [26.5, 80.0], [26.6, 80.0], [26.7, 80.0], [26.8, 81.0], [26.9, 81.0], [27.0, 81.0], [27.1, 82.0], [27.2, 82.0], [27.3, 82.0], [27.4, 83.0], [27.5, 83.0], [27.6, 83.0], [27.7, 83.0], [27.8, 84.0], [27.9, 84.0], [28.0, 84.0], [28.1, 84.0], [28.2, 85.0], [28.3, 85.0], [28.4, 85.0], [28.5, 85.0], [28.6, 86.0], [28.7, 86.0], [28.8, 86.0], [28.9, 87.0], [29.0, 87.0], [29.1, 87.0], [29.2, 87.0], [29.3, 88.0], [29.4, 88.0], [29.5, 88.0], [29.6, 88.0], [29.7, 89.0], [29.8, 89.0], [29.9, 89.0], [30.0, 89.0], [30.1, 89.0], [30.2, 90.0], [30.3, 90.0], [30.4, 90.0], [30.5, 90.0], [30.6, 91.0], [30.7, 91.0], [30.8, 91.0], [30.9, 91.0], [31.0, 91.0], [31.1, 92.0], [31.2, 92.0], [31.3, 92.0], [31.4, 92.0], [31.5, 93.0], [31.6, 93.0], [31.7, 93.0], [31.8, 93.0], [31.9, 93.0], [32.0, 94.0], [32.1, 94.0], [32.2, 94.0], [32.3, 94.0], [32.4, 95.0], [32.5, 95.0], [32.6, 95.0], [32.7, 95.0], [32.8, 95.0], [32.9, 96.0], [33.0, 96.0], [33.1, 96.0], [33.2, 96.0], [33.3, 97.0], [33.4, 97.0], [33.5, 97.0], [33.6, 97.0], [33.7, 97.0], [33.8, 98.0], [33.9, 98.0], [34.0, 98.0], [34.1, 98.0], [34.2, 98.0], [34.3, 99.0], [34.4, 99.0], [34.5, 99.0], [34.6, 99.0], [34.7, 100.0], [34.8, 100.0], [34.9, 100.0], [35.0, 100.0], [35.1, 100.0], [35.2, 101.0], [35.3, 101.0], [35.4, 101.0], [35.5, 101.0], [35.6, 101.0], [35.7, 102.0], [35.8, 102.0], [35.9, 102.0], [36.0, 102.0], [36.1, 103.0], [36.2, 103.0], [36.3, 103.0], [36.4, 104.0], [36.5, 104.0], [36.6, 104.0], [36.7, 105.0], [36.8, 105.0], [36.9, 105.0], [37.0, 105.0], [37.1, 106.0], [37.2, 106.0], [37.3, 107.0], [37.4, 107.0], [37.5, 107.0], [37.6, 108.0], [37.7, 108.0], [37.8, 108.0], [37.9, 109.0], [38.0, 109.0], [38.1, 109.0], [38.2, 110.0], [38.3, 110.0], [38.4, 111.0], [38.5, 111.0], [38.6, 112.0], [38.7, 112.0], [38.8, 113.0], [38.9, 113.0], [39.0, 114.0], [39.1, 115.0], [39.2, 115.0], [39.3, 116.0], [39.4, 116.0], [39.5, 117.0], [39.6, 117.0], [39.7, 118.0], [39.8, 119.0], [39.9, 120.0], [40.0, 120.0], [40.1, 121.0], [40.2, 122.0], [40.3, 123.0], [40.4, 123.0], [40.5, 124.0], [40.6, 125.0], [40.7, 126.0], [40.8, 127.0], [40.9, 128.0], [41.0, 128.0], [41.1, 129.0], [41.2, 130.0], [41.3, 131.0], [41.4, 132.0], [41.5, 133.0], [41.6, 134.0], [41.7, 135.0], [41.8, 136.0], [41.9, 137.0], [42.0, 138.0], [42.1, 139.0], [42.2, 141.0], [42.3, 142.0], [42.4, 143.0], [42.5, 144.0], [42.6, 145.0], [42.7, 146.0], [42.8, 147.0], [42.9, 149.0], [43.0, 150.0], [43.1, 151.0], [43.2, 153.0], [43.3, 154.0], [43.4, 156.0], [43.5, 157.0], [43.6, 158.0], [43.7, 160.0], [43.8, 161.0], [43.9, 163.0], [44.0, 165.0], [44.1, 166.0], [44.2, 168.0], [44.3, 169.0], [44.4, 170.0], [44.5, 171.0], [44.6, 173.0], [44.7, 174.0], [44.8, 175.0], [44.9, 177.0], [45.0, 178.0], [45.1, 179.0], [45.2, 181.0], [45.3, 182.0], [45.4, 183.0], [45.5, 184.0], [45.6, 185.0], [45.7, 186.0], [45.8, 187.0], [45.9, 188.0], [46.0, 190.0], [46.1, 191.0], [46.2, 192.0], [46.3, 193.0], [46.4, 195.0], [46.5, 195.0], [46.6, 196.0], [46.7, 198.0], [46.8, 199.0], [46.9, 200.0], [47.0, 201.0], [47.1, 202.0], [47.2, 203.0], [47.3, 205.0], [47.4, 206.0], [47.5, 207.0], [47.6, 209.0], [47.7, 210.0], [47.8, 211.0], [47.9, 212.0], [48.0, 214.0], [48.1, 216.0], [48.2, 218.0], [48.3, 219.0], [48.4, 221.0], [48.5, 223.0], [48.6, 224.0], [48.7, 226.0], [48.8, 228.0], [48.9, 230.0], [49.0, 232.0], [49.1, 235.0], [49.2, 236.0], [49.3, 239.0], [49.4, 241.0], [49.5, 243.0], [49.6, 245.0], [49.7, 247.0], [49.8, 250.0], [49.9, 252.0], [50.0, 255.0], [50.1, 257.0], [50.2, 259.0], [50.3, 261.0], [50.4, 264.0], [50.5, 266.0], [50.6, 268.0], [50.7, 270.0], [50.8, 272.0], [50.9, 274.0], [51.0, 276.0], [51.1, 278.0], [51.2, 279.0], [51.3, 281.0], [51.4, 282.0], [51.5, 284.0], [51.6, 285.0], [51.7, 286.0], [51.8, 287.0], [51.9, 289.0], [52.0, 290.0], [52.1, 291.0], [52.2, 292.0], [52.3, 293.0], [52.4, 294.0], [52.5, 295.0], [52.6, 296.0], [52.7, 297.0], [52.8, 298.0], [52.9, 299.0], [53.0, 300.0], [53.1, 301.0], [53.2, 302.0], [53.3, 302.0], [53.4, 303.0], [53.5, 304.0], [53.6, 305.0], [53.7, 306.0], [53.8, 307.0], [53.9, 308.0], [54.0, 309.0], [54.1, 310.0], [54.2, 311.0], [54.3, 312.0], [54.4, 312.0], [54.5, 313.0], [54.6, 314.0], [54.7, 315.0], [54.8, 316.0], [54.9, 317.0], [55.0, 318.0], [55.1, 319.0], [55.2, 320.0], [55.3, 322.0], [55.4, 322.0], [55.5, 323.0], [55.6, 324.0], [55.7, 326.0], [55.8, 327.0], [55.9, 328.0], [56.0, 330.0], [56.1, 331.0], [56.2, 332.0], [56.3, 333.0], [56.4, 335.0], [56.5, 336.0], [56.6, 338.0], [56.7, 340.0], [56.8, 342.0], [56.9, 344.0], [57.0, 346.0], [57.1, 348.0], [57.2, 351.0], [57.3, 353.0], [57.4, 355.0], [57.5, 358.0], [57.6, 360.0], [57.7, 362.0], [57.8, 365.0], [57.9, 367.0], [58.0, 369.0], [58.1, 371.0], [58.2, 372.0], [58.3, 374.0], [58.4, 375.0], [58.5, 377.0], [58.6, 378.0], [58.7, 380.0], [58.8, 381.0], [58.9, 382.0], [59.0, 383.0], [59.1, 384.0], [59.2, 385.0], [59.3, 386.0], [59.4, 387.0], [59.5, 388.0], [59.6, 389.0], [59.7, 390.0], [59.8, 390.0], [59.9, 391.0], [60.0, 392.0], [60.1, 393.0], [60.2, 393.0], [60.3, 394.0], [60.4, 395.0], [60.5, 396.0], [60.6, 396.0], [60.7, 397.0], [60.8, 398.0], [60.9, 398.0], [61.0, 399.0], [61.1, 400.0], [61.2, 400.0], [61.3, 401.0], [61.4, 402.0], [61.5, 403.0], [61.6, 403.0], [61.7, 404.0], [61.8, 405.0], [61.9, 405.0], [62.0, 406.0], [62.1, 407.0], [62.2, 408.0], [62.3, 408.0], [62.4, 409.0], [62.5, 410.0], [62.6, 411.0], [62.7, 412.0], [62.8, 412.0], [62.9, 413.0], [63.0, 414.0], [63.1, 416.0], [63.2, 416.0], [63.3, 417.0], [63.4, 418.0], [63.5, 420.0], [63.6, 421.0], [63.7, 422.0], [63.8, 424.0], [63.9, 425.0], [64.0, 427.0], [64.1, 428.0], [64.2, 430.0], [64.3, 432.0], [64.4, 434.0], [64.5, 436.0], [64.6, 438.0], [64.7, 440.0], [64.8, 444.0], [64.9, 446.0], [65.0, 449.0], [65.1, 452.0], [65.2, 454.0], [65.3, 456.0], [65.4, 460.0], [65.5, 463.0], [65.6, 465.0], [65.7, 467.0], [65.8, 469.0], [65.9, 471.0], [66.0, 473.0], [66.1, 474.0], [66.2, 475.0], [66.3, 477.0], [66.4, 478.0], [66.5, 479.0], [66.6, 480.0], [66.7, 482.0], [66.8, 483.0], [66.9, 484.0], [67.0, 485.0], [67.1, 485.0], [67.2, 486.0], [67.3, 487.0], [67.4, 488.0], [67.5, 489.0], [67.6, 490.0], [67.7, 490.0], [67.8, 491.0], [67.9, 492.0], [68.0, 493.0], [68.1, 494.0], [68.2, 495.0], [68.3, 495.0], [68.4, 496.0], [68.5, 497.0], [68.6, 497.0], [68.7, 498.0], [68.8, 499.0], [68.9, 499.0], [69.0, 500.0], [69.1, 501.0], [69.2, 502.0], [69.3, 503.0], [69.4, 504.0], [69.5, 504.0], [69.6, 505.0], [69.7, 506.0], [69.8, 507.0], [69.9, 508.0], [70.0, 509.0], [70.1, 510.0], [70.2, 511.0], [70.3, 512.0], [70.4, 513.0], [70.5, 514.0], [70.6, 515.0], [70.7, 516.0], [70.8, 518.0], [70.9, 520.0], [71.0, 521.0], [71.1, 523.0], [71.2, 526.0], [71.3, 529.0], [71.4, 533.0], [71.5, 536.0], [71.6, 540.0], [71.7, 544.0], [71.8, 548.0], [71.9, 551.0], [72.0, 555.0], [72.1, 558.0], [72.2, 561.0], [72.3, 565.0], [72.4, 568.0], [72.5, 571.0], [72.6, 573.0], [72.7, 576.0], [72.8, 578.0], [72.9, 579.0], [73.0, 581.0], [73.1, 582.0], [73.2, 584.0], [73.3, 585.0], [73.4, 586.0], [73.5, 588.0], [73.6, 589.0], [73.7, 591.0], [73.8, 592.0], [73.9, 593.0], [74.0, 594.0], [74.1, 595.0], [74.2, 596.0], [74.3, 597.0], [74.4, 599.0], [74.5, 600.0], [74.6, 601.0], [74.7, 602.0], [74.8, 603.0], [74.9, 604.0], [75.0, 606.0], [75.1, 607.0], [75.2, 609.0], [75.3, 611.0], [75.4, 613.0], [75.5, 616.0], [75.6, 618.0], [75.7, 621.0], [75.8, 624.0], [75.9, 628.0], [76.0, 634.0], [76.1, 641.0], [76.2, 647.0], [76.3, 652.0], [76.4, 657.0], [76.5, 662.0], [76.6, 665.0], [76.7, 669.0], [76.8, 672.0], [76.9, 675.0], [77.0, 678.0], [77.1, 680.0], [77.2, 682.0], [77.3, 685.0], [77.4, 687.0], [77.5, 688.0], [77.6, 691.0], [77.7, 692.0], [77.8, 694.0], [77.9, 696.0], [78.0, 698.0], [78.1, 700.0], [78.2, 702.0], [78.3, 705.0], [78.4, 707.0], [78.5, 710.0], [78.6, 713.0], [78.7, 716.0], [78.8, 720.0], [78.9, 726.0], [79.0, 733.0], [79.1, 741.0], [79.2, 746.0], [79.3, 752.0], [79.4, 759.0], [79.5, 766.0], [79.6, 772.0], [79.7, 776.0], [79.8, 780.0], [79.9, 783.0], [80.0, 787.0], [80.1, 789.0], [80.2, 792.0], [80.3, 794.0], [80.4, 797.0], [80.5, 800.0], [80.6, 803.0], [80.7, 806.0], [80.8, 809.0], [80.9, 814.0], [81.0, 820.0], [81.1, 828.0], [81.2, 835.0], [81.3, 845.0], [81.4, 853.0], [81.5, 860.0], [81.6, 868.0], [81.7, 875.0], [81.8, 881.0], [81.9, 886.0], [82.0, 890.0], [82.1, 895.0], [82.2, 900.0], [82.3, 906.0], [82.4, 915.0], [82.5, 920.0], [82.6, 931.0], [82.7, 939.0], [82.8, 951.0], [82.9, 962.0], [83.0, 970.0], [83.1, 977.0], [83.2, 984.0], [83.3, 991.0], [83.4, 995.0], [83.5, 1000.0], [83.6, 1006.0], [83.7, 1012.0], [83.8, 1017.0], [83.9, 1027.0], [84.0, 1037.0], [84.1, 1050.0], [84.2, 1061.0], [84.3, 1069.0], [84.4, 1076.0], [84.5, 1080.0], [84.6, 1083.0], [84.7, 1088.0], [84.8, 1092.0], [84.9, 1095.0], [85.0, 1098.0], [85.1, 1101.0], [85.2, 1105.0], [85.3, 1111.0], [85.4, 1117.0], [85.5, 1125.0], [85.6, 1136.0], [85.7, 1148.0], [85.8, 1160.0], [85.9, 1169.0], [86.0, 1177.0], [86.1, 1184.0], [86.2, 1189.0], [86.3, 1194.0], [86.4, 1199.0], [86.5, 1203.0], [86.6, 1209.0], [86.7, 1216.0], [86.8, 1224.0], [86.9, 1235.0], [87.0, 1249.0], [87.1, 1262.0], [87.2, 1272.0], [87.3, 1284.0], [87.4, 1290.0], [87.5, 1296.0], [87.6, 1300.0], [87.7, 1306.0], [87.8, 1313.0], [87.9, 1324.0], [88.0, 1339.0], [88.1, 1356.0], [88.2, 1368.0], [88.3, 1377.0], [88.4, 1384.0], [88.5, 1390.0], [88.6, 1395.0], [88.7, 1399.0], [88.8, 1404.0], [88.9, 1409.0], [89.0, 1416.0], [89.1, 1424.0], [89.2, 1440.0], [89.3, 1456.0], [89.4, 1471.0], [89.5, 1481.0], [89.6, 1488.0], [89.7, 1495.0], [89.8, 1500.0], [89.9, 1508.0], [90.0, 1516.0], [90.1, 1529.0], [90.2, 1549.0], [90.3, 1565.0], [90.4, 1577.0], [90.5, 1583.0], [90.6, 1588.0], [90.7, 1593.0], [90.8, 1597.0], [90.9, 1601.0], [91.0, 1607.0], [91.1, 1617.0], [91.2, 1638.0], [91.3, 1661.0], [91.4, 1673.0], [91.5, 1681.0], [91.6, 1686.0], [91.7, 1690.0], [91.8, 1695.0], [91.9, 1699.0], [92.0, 1706.0], [92.1, 1717.0], [92.2, 1738.0], [92.3, 1767.0], [92.4, 1780.0], [92.5, 1791.0], [92.6, 1799.0], [92.7, 1806.0], [92.8, 1819.0], [92.9, 1848.0], [93.0, 1872.0], [93.1, 1885.0], [93.2, 1897.0], [93.3, 1910.0], [93.4, 1937.0], [93.5, 1967.0], [93.6, 1983.0], [93.7, 1999.0], [93.8, 2011.0], [93.9, 2030.0], [94.0, 2061.0], [94.1, 2083.0], [94.2, 2096.0], [94.3, 2108.0], [94.4, 2130.0], [94.5, 2174.0], [94.6, 2194.0], [94.7, 2212.0], [94.8, 2245.0], [94.9, 2284.0], [95.0, 2299.0], [95.1, 2317.0], [95.2, 2366.0], [95.3, 2392.0], [95.4, 2407.0], [95.5, 2473.0], [95.6, 2513.0], [95.7, 2591.0], [95.8, 2615.0], [95.9, 2680.0], [96.0, 2716.0], [96.1, 2807.0], [96.2, 2872.0], [96.3, 2898.0], [96.4, 2940.0], [96.5, 3023.0], [96.6, 3181.0], [96.7, 3291.0], [96.8, 3420.0], [96.9, 3587.0], [97.0, 3695.0], [97.1, 3805.0], [97.2, 3925.0], [97.3, 4010.0], [97.4, 4095.0], [97.5, 4181.0], [97.6, 4284.0], [97.7, 4392.0], [97.8, 4503.0], [97.9, 4712.0], [98.0, 5098.0], [98.1, 5284.0], [98.2, 5465.0], [98.3, 5610.0], [98.4, 5899.0], [98.5, 6089.0], [98.6, 6289.0], [98.7, 6493.0], [98.8, 6895.0], [98.9, 7308.0], [99.0, 7609.0], [99.1, 7905.0], [99.2, 8275.0], [99.3, 8438.0], [99.4, 8678.0], [99.5, 9264.0], [99.6, 9620.0], [99.7, 9792.0], [99.8, 10117.0], [99.9, 10883.0], [100.0, 20476.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 31794.0, "series": [{"data": [[0.0, 31794.0], [100.0, 3692.0], [200.0, 3595.0], [300.0, 3949.0], [400.0, 3405.0], [500.0, 1967.0], [600.0, 1171.0], [700.0, 890.0], [800.0, 543.0], [900.0, 523.0], [1000.0, 583.0], [1100.0, 497.0], [1200.0, 428.0], [1300.0, 409.0], [1400.0, 416.0], [1500.0, 403.0], [1600.0, 385.0], [1700.0, 306.0], [1800.0, 233.0], [1900.0, 186.0], [2000.0, 184.0], [2100.0, 144.0], [2200.0, 164.0], [2300.0, 79.0], [2400.0, 53.0], [2500.0, 86.0], [2600.0, 76.0], [2700.0, 69.0], [2800.0, 127.0], [2900.0, 57.0], [3000.0, 30.0], [3100.0, 49.0], [3200.0, 33.0], [3300.0, 19.0], [3400.0, 22.0], [3500.0, 35.0], [3600.0, 35.0], [3700.0, 24.0], [3800.0, 53.0], [3900.0, 51.0], [4000.0, 78.0], [4100.0, 53.0], [4200.0, 51.0], [4300.0, 57.0], [4400.0, 29.0], [4500.0, 25.0], [4600.0, 18.0], [4700.0, 18.0], [4800.0, 16.0], [4900.0, 21.0], [5000.0, 12.0], [5100.0, 29.0], [5200.0, 22.0], [5300.0, 34.0], [5400.0, 44.0], [5500.0, 18.0], [5600.0, 53.0], [5700.0, 13.0], [5800.0, 9.0], [5900.0, 20.0], [6000.0, 29.0], [6100.0, 15.0], [6300.0, 29.0], [6200.0, 22.0], [6400.0, 21.0], [6600.0, 4.0], [6500.0, 10.0], [6800.0, 13.0], [6900.0, 5.0], [6700.0, 6.0], [7100.0, 13.0], [7000.0, 14.0], [7300.0, 14.0], [7400.0, 15.0], [7200.0, 17.0], [7600.0, 17.0], [7500.0, 14.0], [7900.0, 12.0], [7800.0, 10.0], [7700.0, 12.0], [8100.0, 19.0], [8000.0, 14.0], [8300.0, 33.0], [8200.0, 21.0], [8400.0, 30.0], [8500.0, 28.0], [8600.0, 20.0], [8700.0, 9.0], [8800.0, 9.0], [8900.0, 7.0], [9100.0, 8.0], [9000.0, 3.0], [9200.0, 5.0], [9300.0, 13.0], [9400.0, 11.0], [9500.0, 16.0], [9600.0, 25.0], [9700.0, 27.0], [9800.0, 5.0], [10000.0, 25.0], [10200.0, 13.0], [10100.0, 22.0], [9900.0, 13.0], [10500.0, 2.0], [10700.0, 6.0], [10400.0, 7.0], [10300.0, 1.0], [10600.0, 4.0], [11000.0, 3.0], [10800.0, 1.0], [10900.0, 2.0], [11200.0, 3.0], [11100.0, 1.0], [11700.0, 1.0], [11300.0, 3.0], [11400.0, 1.0], [11600.0, 1.0], [11800.0, 2.0], [11900.0, 2.0], [12100.0, 1.0], [12000.0, 1.0], [12300.0, 2.0], [12700.0, 1.0], [13300.0, 1.0], [13000.0, 1.0], [12900.0, 1.0], [13400.0, 1.0], [13600.0, 1.0], [15600.0, 1.0], [15700.0, 1.0], [16000.0, 2.0], [16300.0, 1.0], [16400.0, 1.0], [18200.0, 1.0], [20200.0, 1.0], [20500.0, 1.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 20309.0], [100.0, 7126.0], [200.0, 3576.0], [300.0, 4737.0], [400.0, 4587.0], [500.0, 3256.0], [600.0, 2114.0], [700.0, 1410.0], [800.0, 990.0], [900.0, 759.0], [1000.0, 924.0], [1100.0, 786.0], [1200.0, 691.0], [1300.0, 656.0], [1400.0, 640.0], [1500.0, 623.0], [1600.0, 616.0], [1700.0, 408.0], [1800.0, 354.0], [1900.0, 288.0], [2000.0, 315.0], [2100.0, 227.0], [2200.0, 216.0], [2300.0, 201.0], [2400.0, 121.0], [2500.0, 111.0], [2600.0, 135.0], [2700.0, 56.0], [2800.0, 140.0], [2900.0, 88.0], [3000.0, 53.0], [3100.0, 51.0], [3200.0, 52.0], [3300.0, 41.0], [3400.0, 28.0], [3500.0, 45.0], [3600.0, 56.0], [3700.0, 40.0], [3800.0, 54.0], [3900.0, 53.0], [4000.0, 88.0], [4100.0, 77.0], [4200.0, 55.0], [4300.0, 49.0], [4400.0, 42.0], [4500.0, 28.0], [4600.0, 19.0], [4700.0, 28.0], [4800.0, 14.0], [4900.0, 13.0], [5000.0, 18.0], [5100.0, 31.0], [5200.0, 37.0], [5300.0, 28.0], [5400.0, 49.0], [5500.0, 18.0], [5600.0, 37.0], [5700.0, 24.0], [5800.0, 10.0], [5900.0, 20.0], [6000.0, 58.0], [6100.0, 20.0], [6300.0, 36.0], [6200.0, 24.0], [6600.0, 4.0], [6500.0, 19.0], [6400.0, 23.0], [6700.0, 15.0], [6900.0, 10.0], [6800.0, 16.0], [7100.0, 20.0], [7000.0, 10.0], [7400.0, 15.0], [7300.0, 23.0], [7200.0, 10.0], [7600.0, 20.0], [7500.0, 22.0], [7900.0, 14.0], [7800.0, 22.0], [7700.0, 21.0], [8100.0, 17.0], [8000.0, 11.0], [8200.0, 26.0], [8300.0, 26.0], [8400.0, 38.0], [8600.0, 26.0], [8700.0, 22.0], [8500.0, 23.0], [8800.0, 11.0], [9000.0, 5.0], [9100.0, 5.0], [9200.0, 7.0], [8900.0, 10.0], [9300.0, 17.0], [9400.0, 16.0], [9600.0, 46.0], [9500.0, 9.0], [9700.0, 30.0], [9800.0, 8.0], [10000.0, 26.0], [10200.0, 10.0], [10100.0, 30.0], [9900.0, 10.0], [10500.0, 8.0], [10600.0, 3.0], [10700.0, 2.0], [10300.0, 6.0], [10400.0, 6.0], [10800.0, 3.0], [11000.0, 6.0], [10900.0, 4.0], [11200.0, 4.0], [11100.0, 3.0], [11400.0, 2.0], [11300.0, 1.0], [11500.0, 1.0], [11700.0, 2.0], [12000.0, 4.0], [11900.0, 2.0], [12200.0, 1.0], [11800.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [12300.0, 1.0], [13100.0, 1.0], [15600.0, 3.0], [15500.0, 1.0], [15400.0, 1.0], [15800.0, 1.0], [15900.0, 1.0], [16400.0, 1.0], [16500.0, 1.0], [17100.0, 1.0], [16800.0, 1.0], [18100.0, 2.0], [18200.0, 2.0], [18000.0, 1.0], [18400.0, 1.0], [17600.0, 1.0], [17800.0, 1.0], [17900.0, 1.0], [20400.0, 1.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9635.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 78533.0, "series": [{"data": [[0.0, 78533.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 17275.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9635.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 11203.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 61.18082021541021, "minX": 1.62502218E12, "maxY": 512.0, "series": [{"data": [[1.62502218E12, 447.29638273045555], [1.62502224E12, 512.0], [1.6250223E12, 508.3322371929322]], "isOverall": false, "label": "JavaTest_peek", "isController": false}, {"data": [[1.62502236E12, 63.808879966936246], [1.6250223E12, 61.18082021541021]], "isOverall": false, "label": "JavaTest_cool", "isController": false}, {"data": [[1.62502218E12, 63.51022893326838]], "isOverall": false, "label": "JavaTest_warm", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502236E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 11700.0, "series": [{"data": [[2.0, 10708.0], [3.0, 10530.0], [4.0, 576.0], [5.0, 5587.0], [6.0, 4871.5], [8.0, 199.0], [9.0, 6.5], [11.0, 58.5], [12.0, 7.999999999999999], [13.0, 3283.6666666666665], [14.0, 704.0], [15.0, 769.0], [16.0, 4935.0], [17.0, 189.8], [18.0, 5282.0], [19.0, 3040.6666666666665], [20.0, 4817.0], [21.0, 223.75], [22.0, 21.5], [23.0, 37.333333333333336], [24.0, 398.0], [26.0, 392.625], [27.0, 188.5], [28.0, 126.71428571428572], [29.0, 19.0], [30.0, 41.0], [31.0, 135.0], [33.0, 315.0], [32.0, 248.25], [35.0, 281.66666666666663], [36.0, 235.0], [39.0, 4411.5], [38.0, 407.5], [41.0, 106.66666666666664], [40.0, 20.333333333333332], [43.0, 1919.0], [42.0, 90.06666666666666], [45.0, 75.83333333333333], [44.0, 57.19047619047618], [46.0, 24.490196078431367], [47.0, 15.446808510638299], [49.0, 3076.125], [48.0, 80.0], [50.0, 22.874999999999996], [51.0, 14.652173913043478], [53.0, 239.76315789473685], [52.0, 917.8000000000002], [55.0, 1510.7241379310344], [54.0, 51.55], [57.0, 1100.294117647059], [56.0, 54.45454545454545], [59.0, 964.5], [58.0, 1213.5714285714284], [60.0, 15.423728813559318], [61.0, 599.3191489361702], [63.0, 1862.3333333333333], [62.0, 1890.4], [64.0, 109.65238906465446], [74.0, 68.5], [75.0, 207.5], [73.0, 84.0], [72.0, 102.0], [76.0, 87.33333333333333], [77.0, 25.0], [78.0, 87.0], [80.0, 152.0], [84.0, 94.0], [90.0, 296.0], [88.0, 11.0], [92.0, 211.0], [97.0, 342.0], [102.0, 122.0], [101.0, 567.0], [100.0, 175.5], [105.0, 13.0], [104.0, 7.0], [110.0, 1892.0], [120.0, 116.57142857142857], [129.0, 9.0], [135.0, 534.0], [134.0, 14.0], [132.0, 64.0], [130.0, 131.0], [128.0, 161.0], [142.0, 529.0], [141.0, 87.0], [139.0, 35.0], [138.0, 201.0], [136.0, 6.0], [151.0, 12.0], [149.0, 12.0], [148.0, 525.0], [147.0, 7.0], [145.0, 6.0], [144.0, 253.0], [159.0, 32.0], [156.0, 70.0], [154.0, 520.0], [153.0, 297.0], [152.0, 180.0], [167.0, 12.0], [165.0, 84.0], [164.0, 165.0], [163.0, 183.5], [160.0, 259.0], [174.0, 212.0], [173.0, 503.0], [171.0, 558.0], [170.0, 558.0], [169.0, 559.0], [183.0, 492.0], [179.0, 125.0], [178.0, 176.0], [177.0, 529.0], [188.0, 259.0], [187.0, 499.0], [186.0, 196.0], [185.0, 169.0], [196.0, 9.0], [195.0, 86.0], [200.0, 92.33333333333333], [201.0, 63.6], [202.0, 121.33333333333333], [214.0, 448.0], [208.0, 7.0], [216.0, 446.0], [228.0, 162.33333333333334], [229.0, 301.6666666666667], [230.0, 52.5], [231.0, 148.44444444444446], [227.0, 178.0], [226.0, 20.0], [238.0, 428.0], [245.0, 102.5], [243.0, 7.0], [242.0, 19.0], [241.0, 212.0], [254.0, 395.0], [251.0, 8.5], [268.0, 105.5], [270.0, 208.0], [269.0, 590.3333333333333], [264.0, 8.5], [257.0, 9.5], [275.0, 72.66666666666666], [273.0, 387.0], [272.0, 94.0], [279.0, 359.0], [278.0, 246.0], [274.0, 91.6], [276.0, 14.0], [277.0, 11.0], [287.0, 232.0], [281.0, 355.0], [285.0, 172.0], [284.0, 343.0], [303.0, 330.0], [302.0, 160.5], [299.0, 275.0], [298.0, 12.0], [296.0, 12.0], [293.0, 179.0], [291.0, 168.0], [318.0, 272.0], [316.0, 1820.0], [314.0, 7.0], [309.0, 56.0], [308.0, 301.0], [306.0, 167.0], [305.0, 892.5], [304.0, 12.0], [333.0, 205.0], [320.0, 96.0], [326.0, 24.5], [325.0, 118.0], [324.0, 161.5], [321.0, 456.57142857142856], [322.0, 211.26315789473688], [334.0, 66.2], [332.0, 141.0], [323.0, 256.0], [330.0, 296.0], [329.0, 229.0], [328.0, 7.0], [349.0, 77.0], [345.0, 511.0], [347.0, 118.5], [348.0, 331.8461538461538], [339.0, 46.0], [338.0, 106.0], [337.0, 75.13793103448276], [336.0, 130.5], [351.0, 29.0], [346.0, 84.25], [344.0, 56.0], [343.0, 39.5], [342.0, 130.25], [341.0, 32.0], [340.0, 219.0], [365.0, 123.5], [363.0, 122.75], [362.0, 462.375], [361.0, 6.0], [359.0, 374.0], [353.0, 334.19999999999993], [352.0, 96.0], [358.0, 1522.0], [357.0, 14.5], [356.0, 19.0], [355.0, 6.0], [354.0, 23.333333333333332], [383.0, 72.0], [376.0, 5.0], [372.0, 6.0], [368.0, 6.0], [377.0, 7.0], [382.0, 1385.0], [399.0, 162.5], [398.0, 8.0], [396.0, 11.666666666666666], [395.0, 26.75], [404.0, 506.33333333333337], [405.0, 158.85714285714286], [415.0, 11.0], [413.0, 10.0], [410.0, 7.5], [409.0, 75.2], [407.0, 151.0], [430.0, 19.6], [429.0, 8.0], [428.0, 383.5], [420.0, 8.0], [441.0, 518.8], [442.0, 160.42857142857142], [440.0, 661.0], [439.0, 62.0], [438.0, 80.0], [435.0, 44.5], [434.0, 343.25], [433.0, 81.5], [453.0, 21.0], [448.0, 25.5], [477.0, 16.5], [476.0, 588.5], [474.0, 9.0], [495.0, 6.0], [488.0, 386.6666666666667], [490.0, 148.10526315789474], [491.0, 7.6], [494.0, 197.50000000000003], [493.0, 18.0], [492.0, 84.3157894736842], [482.0, 47.25], [480.0, 10.0], [510.0, 17.666666666666668], [511.0, 104.5151515151515], [509.0, 302.0], [508.0, 16.0], [507.0, 611.6666666666667], [506.0, 16.0], [505.0, 13.5], [504.0, 239.75], [503.0, 46.5], [498.0, 318.3333333333333], [501.0, 58.0], [500.0, 43.0], [512.0, 566.5884872404372], [1.0, 10735.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[410.3765487334811, 465.6116120594698]], "isOverall": false, "label": "post-Aggregated", "isController": false}, {"data": [[2.0, 6363.5], [3.0, 11700.0], [4.0, 4451.333333333333], [6.0, 5622.0], [7.0, 122.0], [8.0, 701.0], [9.0, 46.5], [10.0, 3670.3333333333335], [11.0, 442.0], [12.0, 33.0], [13.0, 524.3333333333334], [14.0, 1773.6], [15.0, 25.0], [16.0, 31.555555555555557], [17.0, 41.25], [19.0, 1264.0], [21.0, 2979.5], [22.0, 1516.5714285714287], [23.0, 2280.4], [24.0, 3430.3333333333335], [25.0, 890.0], [26.0, 47.7], [27.0, 1025.0], [28.0, 89.2], [29.0, 249.25], [30.0, 58.0], [31.0, 306.25], [33.0, 379.66666666666663], [32.0, 756.0], [34.0, 436.0], [35.0, 59.5], [37.0, 210.0], [36.0, 65.0], [38.0, 110.5], [39.0, 2431.0], [41.0, 310.6666666666667], [40.0, 297.3333333333333], [42.0, 160.15384615384613], [43.0, 2244.333333333333], [45.0, 54.60000000000001], [44.0, 87.27272727272728], [47.0, 67.52173913043475], [46.0, 44.07142857142858], [48.0, 199.16666666666666], [49.0, 636.7777777777778], [51.0, 645.4285714285714], [50.0, 141.57894736842107], [53.0, 379.78787878787887], [52.0, 1156.1875], [54.0, 450.9047619047619], [55.0, 247.8378378378378], [57.0, 1683.421052631579], [56.0, 62.52631578947369], [58.0, 1389.7], [59.0, 69.5], [61.0, 524.2682926829268], [60.0, 89.76666666666664], [63.0, 576.3333333333334], [62.0, 1951.0], [64.0, 152.666505207072], [65.0, 515.3333333333334], [67.0, 27.0], [66.0, 188.0], [70.0, 284.33333333333337], [69.0, 1377.0], [68.0, 1972.0], [73.0, 112.33333333333333], [74.0, 100.0], [75.0, 156.0], [72.0, 59.0], [76.0, 104.125], [79.0, 759.0], [83.0, 1337.0], [82.0, 920.0], [81.0, 63.0], [80.0, 18.0], [87.0, 597.0], [86.0, 740.0], [85.0, 411.0], [84.0, 914.0], [91.0, 268.0], [89.0, 640.6666666666666], [88.0, 1237.0], [94.0, 41.0], [95.0, 357.5], [93.0, 1293.0], [99.0, 211.0], [98.0, 584.0], [97.0, 535.5], [103.0, 612.5], [100.0, 377.3333333333333], [107.0, 394.0], [106.0, 887.0], [105.0, 890.0], [104.0, 58.0], [109.0, 440.0], [111.0, 22.8], [108.0, 169.0], [114.0, 32.666666666666664], [115.0, 711.5], [113.0, 1192.0], [112.0, 1211.6666666666667], [119.0, 985.0], [118.0, 148.0], [117.0, 782.5], [116.0, 1271.0], [120.0, 120.0], [121.0, 158.0], [122.0, 34.0], [123.0, 540.0], [126.0, 149.5], [127.0, 452.6666666666667], [125.0, 954.5], [130.0, 19.0], [134.0, 235.0], [133.0, 1137.0], [132.0, 536.0], [129.0, 670.0], [141.0, 644.0], [144.0, 558.0], [159.0, 50.0], [158.0, 302.0], [156.0, 58.0], [154.0, 571.0], [153.0, 85.0], [162.0, 109.25], [166.0, 119.0], [163.0, 126.0], [161.0, 504.0], [160.0, 49.0], [175.0, 1431.0], [174.0, 302.0], [171.0, 396.5], [169.0, 802.0], [183.0, 289.0], [182.0, 286.0], [181.0, 1112.0], [180.0, 653.0], [179.0, 1115.0], [177.0, 93.0], [176.0, 833.0], [191.0, 1116.0], [190.0, 299.5], [189.0, 118.0], [186.0, 281.0], [185.0, 1439.0], [184.0, 116.0], [199.0, 110.0], [198.0, 644.0], [197.0, 1099.0], [196.0, 1425.0], [195.0, 226.5], [193.0, 502.0], [192.0, 1162.0], [200.0, 224.75], [201.0, 99.5], [206.0, 136.0], [207.0, 28.0], [205.0, 1061.0], [204.0, 161.0], [203.0, 650.0], [202.0, 557.0], [215.0, 536.0], [213.0, 118.0], [212.0, 35.0], [211.0, 436.5], [208.0, 1200.3333333333333], [223.0, 631.5], [220.0, 81.0], [219.0, 725.0], [218.0, 464.5], [217.0, 1125.0], [216.0, 700.0], [228.0, 357.6666666666667], [229.0, 217.33333333333334], [231.0, 206.75], [230.0, 845.6666666666666], [226.0, 450.6666666666667], [224.0, 23.0], [232.0, 252.5], [239.0, 608.0], [237.0, 1368.0], [236.0, 525.0], [235.0, 888.5], [234.0, 19.0], [233.0, 173.0], [246.0, 43.0], [245.0, 600.0], [244.0, 910.6666666666667], [243.0, 693.0], [242.0, 547.0], [241.0, 737.0], [240.0, 211.0], [255.0, 689.0], [254.0, 642.0], [252.0, 434.0], [250.0, 504.0], [248.0, 612.6666666666666], [270.0, 696.0], [263.0, 307.66666666666663], [256.0, 391.0], [259.0, 503.0], [257.0, 522.75], [271.0, 1294.0], [269.0, 585.75], [268.0, 237.0], [267.0, 938.5], [265.0, 819.0], [264.0, 541.0], [262.0, 1675.0], [261.0, 1159.5], [275.0, 384.2], [273.0, 250.5], [272.0, 459.2], [279.0, 1306.0], [278.0, 373.5], [274.0, 252.63636363636363], [276.0, 542.0], [277.0, 387.6], [287.0, 151.0], [284.0, 229.66666666666669], [283.0, 247.0], [282.0, 1076.0], [281.0, 578.0], [280.0, 624.0], [303.0, 574.0], [301.0, 636.0], [298.0, 1026.0], [296.0, 362.25], [295.0, 180.0], [293.0, 179.0], [292.0, 962.0], [291.0, 459.0], [319.0, 475.0], [315.0, 26.0], [317.0, 609.5], [307.0, 867.6666666666666], [306.0, 935.0], [304.0, 628.0], [314.0, 1549.0], [313.0, 36.0], [312.0, 239.0], [311.0, 541.5], [309.0, 399.0], [308.0, 776.5], [334.0, 40.25], [320.0, 210.5], [321.0, 195.0], [322.0, 342.7142857142857], [323.0, 611.0], [330.0, 103.19999999999999], [331.0, 85.25], [329.0, 1180.0], [328.0, 816.0], [326.0, 267.8333333333333], [325.0, 72.0], [324.0, 507.5], [350.0, 212.5], [345.0, 171.0], [346.0, 97.33333333333333], [348.0, 224.16666666666669], [351.0, 126.25], [349.0, 137.0], [347.0, 124.0], [344.0, 102.0], [342.0, 1333.0], [337.0, 345.1875], [336.0, 30.0], [339.0, 485.0], [338.0, 486.0], [364.0, 1048.5], [356.0, 312.3333333333333], [365.0, 1215.0], [363.0, 717.0], [362.0, 455.4], [361.0, 626.0], [360.0, 576.0], [358.0, 753.5], [353.0, 43.49999999999999], [352.0, 232.33333333333331], [355.0, 829.75], [354.0, 481.6666666666667], [357.0, 695.0], [393.0, 22.0], [399.0, 153.25], [398.0, 326.0], [396.0, 182.0], [395.0, 178.0], [392.0, 43.0], [404.0, 212.26315789473688], [405.0, 605.25], [415.0, 169.66666666666666], [410.0, 167.5], [430.0, 620.4], [431.0, 256.5], [429.0, 706.0], [428.0, 531.25], [427.0, 18.0], [426.0, 706.5], [425.0, 614.0], [421.0, 368.6666666666667], [419.0, 68.0], [438.0, 296.0], [441.0, 467.625], [442.0, 355.43478260869557], [443.0, 525.5], [440.0, 699.5], [437.0, 1740.0], [434.0, 880.5], [433.0, 794.5], [458.0, 21.0], [464.0, 23.0], [477.0, 1799.0], [488.0, 357.2], [484.0, 20.0], [489.0, 72.0], [490.0, 357.79999999999995], [492.0, 1066.1], [493.0, 895.5], [495.0, 1089.0], [494.0, 1678.0], [482.0, 1762.0], [510.0, 1296.9999999999998], [511.0, 929.1481481481482], [509.0, 1596.0], [508.0, 1596.0], [507.0, 1242.5], [506.0, 1668.0], [505.0, 1549.0], [504.0, 1528.0], [503.0, 1591.0], [497.0, 1703.0], [496.0, 1648.4], [499.0, 1662.0], [498.0, 1451.5], [502.0, 1660.5], [501.0, 716.0], [500.0, 1649.142857142857], [512.0, 777.4630172548901], [1.0, 8517.0]], "isOverall": false, "label": "get", "isController": false}, {"data": [[409.14065329552284, 638.797126456412]], "isOverall": false, "label": "get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 512.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21937.0, "minX": 1.62502218E12, "maxY": 603119.4333333333, "series": [{"data": [[1.62502218E12, 23693.516666666666], [1.62502236E12, 144469.05], [1.62502224E12, 133998.63333333333], [1.6250223E12, 603119.4333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62502218E12, 21937.0], [1.62502236E12, 57342.933333333334], [1.62502224E12, 125239.11666666667], [1.6250223E12, 200436.88333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502236E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 82.12211845371804, "minX": 1.62502218E12, "maxY": 1064.8147854221365, "series": [{"data": [[1.62502218E12, 572.9848484848486], [1.62502236E12, 82.12211845371804], [1.62502224E12, 847.6552795031006], [1.6250223E12, 356.3623887849238]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502218E12, 672.4061679790028], [1.62502236E12, 116.95352677518292], [1.62502224E12, 1064.8147854221365], [1.6250223E12, 552.0486498840957]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502236E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 71.79016432202387, "minX": 1.62502218E12, "maxY": 1064.8098406690726, "series": [{"data": [[1.62502218E12, 572.9736652236662], [1.62502236E12, 71.79016432202387], [1.62502224E12, 847.6491292169062], [1.6250223E12, 310.29331232148076]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502218E12, 672.3920603674545], [1.62502236E12, 105.85397499410237], [1.62502224E12, 1064.8098406690726], [1.6250223E12, 466.8107552159844]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502236E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62502218E12, "maxY": 283.06908936559375, "series": [{"data": [[1.62502218E12, 0.0], [1.62502236E12, 12.056153209599284], [1.62502224E12, 0.0], [1.6250223E12, 118.40487212318241]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502218E12, 40.979002624671764], [1.62502236E12, 44.18235432885117], [1.62502224E12, 16.92381417495874], [1.6250223E12, 283.06908936559375]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502236E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.62502218E12, "maxY": 20569.0, "series": [{"data": [[1.62502218E12, 12621.0], [1.62502236E12, 16872.0], [1.62502224E12, 20569.0], [1.6250223E12, 13025.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62502218E12, 1400.0], [1.62502236E12, 127.0], [1.62502224E12, 1778.0], [1.6250223E12, 1331.9000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62502218E12, 3901.0], [1.62502236E12, 799.4799999999996], [1.62502224E12, 7296.980000000003], [1.6250223E12, 2461.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62502218E12, 2720.0], [1.62502236E12, 187.0], [1.62502224E12, 3901.9000000000015], [1.6250223E12, 1705.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62502218E12, 5.0], [1.62502236E12, 4.0], [1.62502224E12, 4.0], [1.6250223E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62502218E12, 406.0], [1.62502236E12, 36.0], [1.62502224E12, 89.0], [1.6250223E12, 100.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502236E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 1.0, "maxY": 16872.0, "series": [{"data": [[2.0, 11732.0], [3.0, 11016.0], [24.0, 14.0], [33.0, 15.0], [35.0, 14.0], [57.0, 1388.0], [84.0, 594.0], [86.0, 805.0], [88.0, 711.0], [89.0, 745.0], [95.0, 504.0], [94.0, 523.0], [93.0, 792.0], [98.0, 798.5], [104.0, 687.5], [123.0, 23.0], [133.0, 479.5], [132.0, 482.0], [138.0, 483.5], [140.0, 699.5], [137.0, 17.0], [149.0, 392.0], [148.0, 375.5], [144.0, 73.5], [146.0, 2086.0], [157.0, 407.0], [158.0, 19.0], [163.0, 399.0], [162.0, 404.0], [167.0, 500.0], [161.0, 15.0], [185.0, 99.0], [195.0, 310.0], [192.0, 86.5], [200.0, 67.0], [225.0, 102.0], [228.0, 2080.0], [227.0, 92.0], [224.0, 58.0], [239.0, 2390.0], [245.0, 1858.0], [246.0, 2683.5], [248.0, 105.0], [253.0, 2509.0], [251.0, 714.0], [249.0, 16.0], [271.0, 223.0], [256.0, 1329.0], [266.0, 2807.0], [262.0, 154.5], [286.0, 100.0], [298.0, 100.0], [295.0, 67.0], [336.0, 17.0], [382.0, 18.0], [389.0, 17.0], [404.0, 109.0], [416.0, 57.0], [478.0, 93.5], [508.0, 90.0], [505.0, 18.0], [542.0, 88.5], [516.0, 87.5], [517.0, 28.0], [569.0, 60.0], [568.0, 37.5], [571.0, 87.0], [545.0, 87.0], [544.0, 81.5], [549.0, 98.0], [560.0, 98.0], [588.0, 92.0], [579.0, 62.0], [602.0, 75.5], [614.0, 52.0], [648.0, 99.0], [673.0, 84.0], [702.0, 31.5], [733.0, 30.0], [708.0, 98.0], [713.0, 93.5], [760.0, 1403.5], [765.0, 55.0], [778.0, 46.0], [781.0, 92.0], [790.0, 163.0], [794.0, 46.0], [797.0, 28.0], [825.0, 52.0], [830.0, 72.0], [800.0, 115.5], [805.0, 711.0], [818.0, 920.0], [804.0, 168.0], [847.0, 38.0], [840.0, 92.5], [858.0, 96.0], [862.0, 200.5], [845.0, 49.0], [893.0, 99.0], [894.0, 94.0], [864.0, 90.0], [886.0, 202.5], [887.0, 284.0], [875.0, 591.5], [891.0, 214.0], [865.0, 44.0], [892.0, 167.0], [877.0, 68.5], [922.0, 107.0], [927.0, 101.0], [899.0, 490.0], [920.0, 203.0], [914.0, 313.5], [898.0, 283.0], [908.0, 32.0], [905.0, 758.0], [919.0, 48.5], [945.0, 94.0], [928.0, 107.0], [948.0, 309.0], [965.0, 346.0], [970.0, 596.0], [974.0, 365.0], [987.0, 47.5], [1022.0, 424.0], [1016.0, 394.5], [1009.0, 231.0], [1073.0, 294.0], [1042.0, 186.0], [1081.0, 314.0], [1080.0, 35.0], [1063.0, 407.0], [1058.0, 156.0], [1027.0, 372.0], [1030.0, 291.0], [1068.0, 376.0], [1069.0, 91.0], [1047.0, 380.0], [1052.0, 392.0], [1026.0, 58.0], [1055.0, 45.0], [1094.0, 429.5], [1149.0, 402.0], [1179.0, 97.0], [1195.0, 393.0], [1185.0, 404.0], [1192.0, 414.0], [1213.0, 321.5], [1176.0, 47.5], [1208.0, 35.0], [1242.0, 402.0], [1231.0, 408.0], [1221.0, 384.0], [1261.0, 32.0], [1299.0, 396.0], [1284.0, 395.5], [1300.0, 346.5], [1309.0, 39.0], [1343.0, 37.0], [1333.0, 41.0], [1353.0, 179.0], [1366.0, 41.0], [1.0, 16872.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[569.0, 10226.0], [568.0, 10181.0], [614.0, 10073.0], [708.0, 532.0], [713.0, 351.0], [760.0, 271.0], [765.0, 104.0], [790.0, 645.0], [794.0, 77.0], [805.0, 261.0], [818.0, 404.0], [804.0, 353.5], [845.0, 70.5], [875.0, 256.0], [891.0, 794.0], [892.0, 365.5], [877.0, 524.0], [865.0, 77.0], [927.0, 314.0], [898.0, 362.0], [908.0, 346.0], [905.0, 329.0], [919.0, 75.0], [928.0, 102.0], [948.0, 385.0], [970.0, 230.5], [974.0, 49.0], [987.0, 95.0], [1009.0, 83.0], [1030.0, 447.0], [1026.0, 142.0], [1069.0, 62.5], [1073.0, 147.0], [1055.0, 59.0], [1058.0, 69.0], [1080.0, 40.0], [1213.0, 307.0], [1208.0, 114.0], [1333.0, 158.0], [1353.0, 137.0], [224.0, 8379.0], [295.0, 666.0], [416.0, 10219.0], [508.0, 10092.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1366.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 16872.0, "series": [{"data": [[2.0, 11732.0], [3.0, 11016.0], [24.0, 14.0], [33.0, 15.0], [35.0, 14.0], [57.0, 1388.0], [84.0, 594.0], [86.0, 805.0], [88.0, 711.0], [89.0, 745.0], [95.0, 504.0], [94.0, 523.0], [93.0, 792.0], [98.0, 798.5], [104.0, 687.5], [123.0, 23.0], [133.0, 479.5], [132.0, 482.0], [138.0, 483.5], [140.0, 699.5], [137.0, 17.0], [149.0, 392.0], [148.0, 375.5], [144.0, 73.5], [146.0, 2086.0], [157.0, 407.0], [158.0, 19.0], [163.0, 399.0], [162.0, 404.0], [167.0, 500.0], [161.0, 15.0], [185.0, 99.0], [195.0, 310.0], [192.0, 86.5], [200.0, 67.0], [225.0, 102.0], [228.0, 2080.0], [227.0, 92.0], [224.0, 58.0], [239.0, 2390.0], [245.0, 1858.0], [246.0, 2683.5], [248.0, 105.0], [253.0, 2509.0], [251.0, 714.0], [249.0, 16.0], [271.0, 223.0], [256.0, 1329.0], [266.0, 2807.0], [262.0, 154.5], [286.0, 100.0], [298.0, 100.0], [295.0, 67.0], [336.0, 17.0], [382.0, 18.0], [389.0, 17.0], [404.0, 109.0], [416.0, 57.0], [478.0, 93.5], [508.0, 90.0], [505.0, 18.0], [542.0, 88.5], [516.0, 87.5], [517.0, 28.0], [569.0, 60.0], [568.0, 37.5], [571.0, 87.0], [545.0, 87.0], [544.0, 81.5], [549.0, 98.0], [560.0, 98.0], [588.0, 92.0], [579.0, 62.0], [602.0, 75.5], [614.0, 52.0], [648.0, 99.0], [673.0, 84.0], [702.0, 31.5], [733.0, 30.0], [708.0, 98.0], [713.0, 93.5], [760.0, 1403.5], [765.0, 55.0], [778.0, 46.0], [781.0, 92.0], [790.0, 163.0], [794.0, 46.0], [797.0, 28.0], [825.0, 52.0], [830.0, 72.0], [800.0, 115.5], [805.0, 711.0], [818.0, 920.0], [804.0, 168.0], [847.0, 38.0], [840.0, 92.5], [858.0, 96.0], [862.0, 200.5], [845.0, 49.0], [893.0, 99.0], [894.0, 94.0], [864.0, 90.0], [886.0, 202.5], [887.0, 284.0], [875.0, 591.5], [891.0, 214.0], [865.0, 44.0], [892.0, 167.0], [877.0, 68.5], [922.0, 107.0], [927.0, 101.0], [899.0, 490.0], [920.0, 203.0], [914.0, 313.5], [898.0, 283.0], [908.0, 32.0], [905.0, 758.0], [919.0, 48.5], [945.0, 94.0], [928.0, 107.0], [948.0, 308.0], [965.0, 346.0], [970.0, 596.0], [974.0, 365.0], [987.0, 47.5], [1022.0, 424.0], [1016.0, 394.5], [1009.0, 231.0], [1073.0, 294.0], [1042.0, 186.0], [1081.0, 314.0], [1080.0, 35.0], [1063.0, 407.0], [1058.0, 156.0], [1027.0, 372.0], [1030.0, 291.0], [1068.0, 376.0], [1069.0, 91.0], [1047.0, 380.0], [1052.0, 392.0], [1026.0, 58.0], [1055.0, 45.0], [1094.0, 429.5], [1149.0, 402.0], [1179.0, 96.5], [1195.0, 393.0], [1185.0, 404.0], [1192.0, 414.0], [1213.0, 321.5], [1176.0, 47.5], [1208.0, 35.0], [1242.0, 402.0], [1231.0, 408.0], [1221.0, 384.0], [1261.0, 32.0], [1299.0, 396.0], [1284.0, 395.5], [1300.0, 346.5], [1309.0, 39.0], [1343.0, 37.0], [1333.0, 41.0], [1353.0, 178.0], [1366.0, 41.0], [1.0, 16872.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[569.0, 10226.0], [568.0, 10181.0], [614.0, 10073.0], [708.0, 0.0], [713.0, 0.0], [760.0, 0.0], [765.0, 0.0], [790.0, 0.0], [794.0, 0.0], [805.0, 0.0], [818.0, 0.0], [804.0, 0.0], [845.0, 0.0], [875.0, 0.0], [891.0, 0.0], [892.0, 0.0], [877.0, 0.0], [865.0, 0.0], [927.0, 314.0], [898.0, 0.0], [908.0, 0.0], [905.0, 0.0], [919.0, 0.0], [928.0, 0.0], [948.0, 0.0], [970.0, 0.0], [974.0, 0.0], [987.0, 0.0], [1009.0, 0.0], [1030.0, 0.0], [1026.0, 0.0], [1069.0, 0.0], [1073.0, 0.0], [1055.0, 0.0], [1058.0, 0.0], [1080.0, 0.0], [1213.0, 0.0], [1208.0, 0.0], [1333.0, 0.0], [1353.0, 0.0], [224.0, 8379.0], [295.0, 666.0], [416.0, 10219.0], [508.0, 10092.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1366.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 105.53333333333333, "minX": 1.62502218E12, "maxY": 1010.6, "series": [{"data": [[1.62502218E12, 105.53333333333333], [1.62502236E12, 281.25], [1.62502224E12, 546.7166666666667], [1.6250223E12, 1010.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502236E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.62502218E12, "maxY": 865.2833333333333, "series": [{"data": [[1.62502218E12, 97.0], [1.62502236E12, 249.71666666666667], [1.62502224E12, 545.3833333333333], [1.6250223E12, 865.2833333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62502236E12, 0.016666666666666666], [1.62502224E12, 1.3333333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.62502236E12, 32.55], [1.6250223E12, 152.81666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502236E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.62502218E12, "maxY": 451.7, "series": [{"data": [[1.62502236E12, 17.716666666666665], [1.62502224E12, 0.65], [1.6250223E12, 96.86666666666666]], "isOverall": false, "label": "get-failure", "isController": false}, {"data": [[1.62502218E12, 50.8], [1.62502236E12, 123.58333333333333], [1.62502224E12, 272.3666666666667], [1.6250223E12, 413.5833333333333]], "isOverall": false, "label": "get-success", "isController": false}, {"data": [[1.62502218E12, 46.2], [1.62502236E12, 126.13333333333334], [1.62502224E12, 273.01666666666665], [1.6250223E12, 451.7]], "isOverall": false, "label": "post-success", "isController": false}, {"data": [[1.62502236E12, 14.85], [1.62502224E12, 0.6833333333333333], [1.6250223E12, 55.95]], "isOverall": false, "label": "post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502236E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.62502218E12, "maxY": 865.2833333333333, "series": [{"data": [[1.62502218E12, 97.0], [1.62502236E12, 249.71666666666667], [1.62502224E12, 545.3833333333333], [1.6250223E12, 865.2833333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62502236E12, 32.56666666666667], [1.62502224E12, 1.3333333333333333], [1.6250223E12, 152.81666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502236E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

