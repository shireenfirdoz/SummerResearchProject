/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 19446.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 7.0], [14.9, 7.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 8.0], [27.6, 8.0], [27.7, 8.0], [27.8, 8.0], [27.9, 8.0], [28.0, 8.0], [28.1, 8.0], [28.2, 8.0], [28.3, 8.0], [28.4, 8.0], [28.5, 8.0], [28.6, 8.0], [28.7, 8.0], [28.8, 8.0], [28.9, 8.0], [29.0, 8.0], [29.1, 8.0], [29.2, 8.0], [29.3, 8.0], [29.4, 8.0], [29.5, 8.0], [29.6, 8.0], [29.7, 8.0], [29.8, 8.0], [29.9, 8.0], [30.0, 8.0], [30.1, 8.0], [30.2, 8.0], [30.3, 8.0], [30.4, 8.0], [30.5, 8.0], [30.6, 8.0], [30.7, 8.0], [30.8, 8.0], [30.9, 8.0], [31.0, 8.0], [31.1, 8.0], [31.2, 8.0], [31.3, 8.0], [31.4, 8.0], [31.5, 8.0], [31.6, 8.0], [31.7, 8.0], [31.8, 8.0], [31.9, 8.0], [32.0, 8.0], [32.1, 8.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 8.0], [33.0, 8.0], [33.1, 8.0], [33.2, 8.0], [33.3, 8.0], [33.4, 8.0], [33.5, 8.0], [33.6, 8.0], [33.7, 8.0], [33.8, 8.0], [33.9, 8.0], [34.0, 8.0], [34.1, 8.0], [34.2, 8.0], [34.3, 8.0], [34.4, 8.0], [34.5, 8.0], [34.6, 8.0], [34.7, 8.0], [34.8, 8.0], [34.9, 8.0], [35.0, 8.0], [35.1, 8.0], [35.2, 8.0], [35.3, 8.0], [35.4, 8.0], [35.5, 8.0], [35.6, 8.0], [35.7, 8.0], [35.8, 8.0], [35.9, 8.0], [36.0, 8.0], [36.1, 8.0], [36.2, 8.0], [36.3, 8.0], [36.4, 8.0], [36.5, 8.0], [36.6, 8.0], [36.7, 8.0], [36.8, 8.0], [36.9, 8.0], [37.0, 8.0], [37.1, 8.0], [37.2, 8.0], [37.3, 8.0], [37.4, 8.0], [37.5, 8.0], [37.6, 8.0], [37.7, 8.0], [37.8, 8.0], [37.9, 9.0], [38.0, 9.0], [38.1, 9.0], [38.2, 9.0], [38.3, 9.0], [38.4, 9.0], [38.5, 9.0], [38.6, 9.0], [38.7, 9.0], [38.8, 9.0], [38.9, 9.0], [39.0, 9.0], [39.1, 9.0], [39.2, 9.0], [39.3, 9.0], [39.4, 9.0], [39.5, 9.0], [39.6, 9.0], [39.7, 9.0], [39.8, 9.0], [39.9, 9.0], [40.0, 9.0], [40.1, 9.0], [40.2, 9.0], [40.3, 9.0], [40.4, 9.0], [40.5, 9.0], [40.6, 9.0], [40.7, 9.0], [40.8, 9.0], [40.9, 9.0], [41.0, 9.0], [41.1, 9.0], [41.2, 9.0], [41.3, 9.0], [41.4, 9.0], [41.5, 9.0], [41.6, 9.0], [41.7, 9.0], [41.8, 9.0], [41.9, 9.0], [42.0, 9.0], [42.1, 9.0], [42.2, 9.0], [42.3, 9.0], [42.4, 9.0], [42.5, 9.0], [42.6, 9.0], [42.7, 9.0], [42.8, 9.0], [42.9, 9.0], [43.0, 9.0], [43.1, 9.0], [43.2, 9.0], [43.3, 9.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 10.0], [43.9, 10.0], [44.0, 10.0], [44.1, 10.0], [44.2, 10.0], [44.3, 10.0], [44.4, 10.0], [44.5, 10.0], [44.6, 10.0], [44.7, 10.0], [44.8, 10.0], [44.9, 10.0], [45.0, 10.0], [45.1, 10.0], [45.2, 10.0], [45.3, 10.0], [45.4, 10.0], [45.5, 10.0], [45.6, 10.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 11.0], [46.8, 11.0], [46.9, 11.0], [47.0, 11.0], [47.1, 11.0], [47.2, 11.0], [47.3, 11.0], [47.4, 11.0], [47.5, 11.0], [47.6, 11.0], [47.7, 11.0], [47.8, 11.0], [47.9, 11.0], [48.0, 11.0], [48.1, 11.0], [48.2, 11.0], [48.3, 11.0], [48.4, 11.0], [48.5, 11.0], [48.6, 12.0], [48.7, 12.0], [48.8, 12.0], [48.9, 12.0], [49.0, 12.0], [49.1, 12.0], [49.2, 12.0], [49.3, 12.0], [49.4, 12.0], [49.5, 12.0], [49.6, 12.0], [49.7, 12.0], [49.8, 13.0], [49.9, 13.0], [50.0, 13.0], [50.1, 13.0], [50.2, 13.0], [50.3, 13.0], [50.4, 13.0], [50.5, 13.0], [50.6, 14.0], [50.7, 14.0], [50.8, 14.0], [50.9, 14.0], [51.0, 14.0], [51.1, 14.0], [51.2, 15.0], [51.3, 15.0], [51.4, 15.0], [51.5, 16.0], [51.6, 16.0], [51.7, 16.0], [51.8, 17.0], [51.9, 17.0], [52.0, 17.0], [52.1, 18.0], [52.2, 18.0], [52.3, 19.0], [52.4, 20.0], [52.5, 20.0], [52.6, 21.0], [52.7, 22.0], [52.8, 23.0], [52.9, 25.0], [53.0, 27.0], [53.1, 29.0], [53.2, 31.0], [53.3, 34.0], [53.4, 36.0], [53.5, 38.0], [53.6, 40.0], [53.7, 41.0], [53.8, 43.0], [53.9, 44.0], [54.0, 45.0], [54.1, 47.0], [54.2, 48.0], [54.3, 49.0], [54.4, 51.0], [54.5, 52.0], [54.6, 53.0], [54.7, 54.0], [54.8, 55.0], [54.9, 56.0], [55.0, 57.0], [55.1, 57.0], [55.2, 58.0], [55.3, 58.0], [55.4, 59.0], [55.5, 60.0], [55.6, 60.0], [55.7, 61.0], [55.8, 62.0], [55.9, 62.0], [56.0, 63.0], [56.1, 63.0], [56.2, 64.0], [56.3, 64.0], [56.4, 65.0], [56.5, 65.0], [56.6, 66.0], [56.7, 66.0], [56.8, 67.0], [56.9, 67.0], [57.0, 68.0], [57.1, 68.0], [57.2, 68.0], [57.3, 69.0], [57.4, 69.0], [57.5, 70.0], [57.6, 70.0], [57.7, 70.0], [57.8, 71.0], [57.9, 71.0], [58.0, 72.0], [58.1, 72.0], [58.2, 72.0], [58.3, 73.0], [58.4, 73.0], [58.5, 73.0], [58.6, 73.0], [58.7, 74.0], [58.8, 74.0], [58.9, 74.0], [59.0, 74.0], [59.1, 75.0], [59.2, 75.0], [59.3, 75.0], [59.4, 75.0], [59.5, 76.0], [59.6, 76.0], [59.7, 76.0], [59.8, 76.0], [59.9, 76.0], [60.0, 77.0], [60.1, 77.0], [60.2, 77.0], [60.3, 77.0], [60.4, 77.0], [60.5, 78.0], [60.6, 78.0], [60.7, 78.0], [60.8, 78.0], [60.9, 78.0], [61.0, 78.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 79.0], [61.5, 79.0], [61.6, 80.0], [61.7, 80.0], [61.8, 80.0], [61.9, 80.0], [62.0, 80.0], [62.1, 80.0], [62.2, 80.0], [62.3, 81.0], [62.4, 81.0], [62.5, 81.0], [62.6, 81.0], [62.7, 81.0], [62.8, 82.0], [62.9, 82.0], [63.0, 82.0], [63.1, 82.0], [63.2, 82.0], [63.3, 82.0], [63.4, 82.0], [63.5, 83.0], [63.6, 83.0], [63.7, 83.0], [63.8, 83.0], [63.9, 83.0], [64.0, 83.0], [64.1, 83.0], [64.2, 83.0], [64.3, 84.0], [64.4, 84.0], [64.5, 84.0], [64.6, 84.0], [64.7, 84.0], [64.8, 84.0], [64.9, 84.0], [65.0, 84.0], [65.1, 84.0], [65.2, 85.0], [65.3, 85.0], [65.4, 85.0], [65.5, 85.0], [65.6, 85.0], [65.7, 85.0], [65.8, 85.0], [65.9, 85.0], [66.0, 86.0], [66.1, 86.0], [66.2, 86.0], [66.3, 86.0], [66.4, 86.0], [66.5, 86.0], [66.6, 86.0], [66.7, 86.0], [66.8, 87.0], [66.9, 87.0], [67.0, 87.0], [67.1, 87.0], [67.2, 87.0], [67.3, 87.0], [67.4, 87.0], [67.5, 87.0], [67.6, 88.0], [67.7, 88.0], [67.8, 88.0], [67.9, 88.0], [68.0, 88.0], [68.1, 88.0], [68.2, 88.0], [68.3, 88.0], [68.4, 89.0], [68.5, 89.0], [68.6, 89.0], [68.7, 89.0], [68.8, 89.0], [68.9, 89.0], [69.0, 89.0], [69.1, 89.0], [69.2, 89.0], [69.3, 90.0], [69.4, 90.0], [69.5, 90.0], [69.6, 90.0], [69.7, 90.0], [69.8, 90.0], [69.9, 90.0], [70.0, 90.0], [70.1, 91.0], [70.2, 91.0], [70.3, 91.0], [70.4, 91.0], [70.5, 91.0], [70.6, 91.0], [70.7, 91.0], [70.8, 91.0], [70.9, 92.0], [71.0, 92.0], [71.1, 92.0], [71.2, 92.0], [71.3, 92.0], [71.4, 92.0], [71.5, 92.0], [71.6, 93.0], [71.7, 93.0], [71.8, 93.0], [71.9, 93.0], [72.0, 93.0], [72.1, 93.0], [72.2, 93.0], [72.3, 94.0], [72.4, 94.0], [72.5, 94.0], [72.6, 94.0], [72.7, 94.0], [72.8, 94.0], [72.9, 94.0], [73.0, 94.0], [73.1, 95.0], [73.2, 95.0], [73.3, 95.0], [73.4, 95.0], [73.5, 95.0], [73.6, 95.0], [73.7, 95.0], [73.8, 96.0], [73.9, 96.0], [74.0, 96.0], [74.1, 96.0], [74.2, 96.0], [74.3, 96.0], [74.4, 96.0], [74.5, 97.0], [74.6, 97.0], [74.7, 97.0], [74.8, 97.0], [74.9, 97.0], [75.0, 97.0], [75.1, 98.0], [75.2, 98.0], [75.3, 98.0], [75.4, 98.0], [75.5, 98.0], [75.6, 98.0], [75.7, 99.0], [75.8, 99.0], [75.9, 99.0], [76.0, 99.0], [76.1, 99.0], [76.2, 100.0], [76.3, 100.0], [76.4, 100.0], [76.5, 100.0], [76.6, 100.0], [76.7, 101.0], [76.8, 101.0], [76.9, 101.0], [77.0, 101.0], [77.1, 102.0], [77.2, 102.0], [77.3, 102.0], [77.4, 102.0], [77.5, 103.0], [77.6, 103.0], [77.7, 104.0], [77.8, 104.0], [77.9, 104.0], [78.0, 105.0], [78.1, 106.0], [78.2, 107.0], [78.3, 107.0], [78.4, 108.0], [78.5, 110.0], [78.6, 111.0], [78.7, 113.0], [78.8, 117.0], [78.9, 122.0], [79.0, 139.0], [79.1, 149.0], [79.2, 159.0], [79.3, 166.0], [79.4, 171.0], [79.5, 173.0], [79.6, 175.0], [79.7, 177.0], [79.8, 179.0], [79.9, 181.0], [80.0, 182.0], [80.1, 183.0], [80.2, 185.0], [80.3, 187.0], [80.4, 189.0], [80.5, 191.0], [80.6, 192.0], [80.7, 194.0], [80.8, 195.0], [80.9, 196.0], [81.0, 197.0], [81.1, 198.0], [81.2, 199.0], [81.3, 200.0], [81.4, 201.0], [81.5, 202.0], [81.6, 204.0], [81.7, 205.0], [81.8, 207.0], [81.9, 209.0], [82.0, 212.0], [82.1, 219.0], [82.2, 227.0], [82.3, 255.0], [82.4, 266.0], [82.5, 274.0], [82.6, 280.0], [82.7, 284.0], [82.8, 287.0], [82.9, 290.0], [83.0, 293.0], [83.1, 295.0], [83.2, 298.0], [83.3, 301.0], [83.4, 304.0], [83.5, 308.0], [83.6, 314.0], [83.7, 322.0], [83.8, 368.0], [83.9, 379.0], [84.0, 387.0], [84.1, 393.0], [84.2, 398.0], [84.3, 401.0], [84.4, 404.0], [84.5, 407.0], [84.6, 411.0], [84.7, 418.0], [84.8, 469.0], [84.9, 481.0], [85.0, 487.0], [85.1, 493.0], [85.2, 497.0], [85.3, 501.0], [85.4, 504.0], [85.5, 507.0], [85.6, 510.0], [85.7, 521.0], [85.8, 571.0], [85.9, 578.0], [86.0, 582.0], [86.1, 588.0], [86.2, 593.0], [86.3, 598.0], [86.4, 601.0], [86.5, 604.0], [86.6, 607.0], [86.7, 612.0], [86.8, 625.0], [86.9, 670.0], [87.0, 682.0], [87.1, 687.0], [87.2, 690.0], [87.3, 693.0], [87.4, 697.0], [87.5, 702.0], [87.6, 708.0], [87.7, 713.0], [87.8, 723.0], [87.9, 769.0], [88.0, 778.0], [88.1, 785.0], [88.2, 791.0], [88.3, 795.0], [88.4, 799.0], [88.5, 803.0], [88.6, 807.0], [88.7, 812.0], [88.8, 818.0], [88.9, 833.0], [89.0, 871.0], [89.1, 878.0], [89.2, 884.0], [89.3, 890.0], [89.4, 895.0], [89.5, 899.0], [89.6, 901.0], [89.7, 904.0], [89.8, 907.0], [89.9, 910.0], [90.0, 916.0], [90.1, 921.0], [90.2, 929.0], [90.3, 972.0], [90.4, 976.0], [90.5, 981.0], [90.6, 985.0], [90.7, 988.0], [90.8, 990.0], [90.9, 993.0], [91.0, 995.0], [91.1, 997.0], [91.2, 1000.0], [91.3, 1003.0], [91.4, 1006.0], [91.5, 1010.0], [91.6, 1015.0], [91.7, 1024.0], [91.8, 1069.0], [91.9, 1075.0], [92.0, 1080.0], [92.1, 1085.0], [92.2, 1089.0], [92.3, 1092.0], [92.4, 1094.0], [92.5, 1098.0], [92.6, 1101.0], [92.7, 1106.0], [92.8, 1111.0], [92.9, 1162.0], [93.0, 1176.0], [93.1, 1182.0], [93.2, 1185.0], [93.3, 1190.0], [93.4, 1196.0], [93.5, 1202.0], [93.6, 1207.0], [93.7, 1219.0], [93.8, 1273.0], [93.9, 1282.0], [94.0, 1289.0], [94.1, 1294.0], [94.2, 1298.0], [94.3, 1304.0], [94.4, 1317.0], [94.5, 1376.0], [94.6, 1383.0], [94.7, 1389.0], [94.8, 1393.0], [94.9, 1397.0], [95.0, 1402.0], [95.1, 1409.0], [95.2, 1465.0], [95.3, 1480.0], [95.4, 1488.0], [95.5, 1498.0], [95.6, 1505.0], [95.7, 1585.0], [95.8, 1600.0], [95.9, 1662.0], [96.0, 1691.0], [96.1, 1702.0], [96.2, 1715.0], [96.3, 1790.0], [96.4, 1800.0], [96.5, 1806.0], [96.6, 1868.0], [96.7, 1894.0], [96.8, 1898.0], [96.9, 1907.0], [97.0, 1999.0], [97.1, 2010.0], [97.2, 2096.0], [97.3, 2105.0], [97.4, 2186.0], [97.5, 2218.0], [97.6, 2297.0], [97.7, 2314.0], [97.8, 2395.0], [97.9, 2469.0], [98.0, 2508.0], [98.1, 2575.0], [98.2, 2598.0], [98.3, 2801.0], [98.4, 3063.0], [98.5, 3184.0], [98.6, 5080.0], [98.7, 7129.0], [98.8, 7375.0], [98.9, 7610.0], [99.0, 7850.0], [99.1, 8187.0], [99.2, 8774.0], [99.3, 9868.0], [99.4, 10090.0], [99.5, 10169.0], [99.6, 10216.0], [99.7, 10281.0], [99.8, 10376.0], [99.9, 10614.0], [100.0, 19408.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 11.0], [0.1, 11.0], [0.2, 12.0], [0.3, 12.0], [0.4, 12.0], [0.5, 12.0], [0.6, 12.0], [0.7, 12.0], [0.8, 12.0], [0.9, 12.0], [1.0, 12.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 12.0], [1.6, 12.0], [1.7, 12.0], [1.8, 12.0], [1.9, 13.0], [2.0, 13.0], [2.1, 13.0], [2.2, 13.0], [2.3, 13.0], [2.4, 13.0], [2.5, 13.0], [2.6, 13.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 13.0], [3.1, 13.0], [3.2, 13.0], [3.3, 13.0], [3.4, 13.0], [3.5, 13.0], [3.6, 13.0], [3.7, 13.0], [3.8, 13.0], [3.9, 13.0], [4.0, 13.0], [4.1, 13.0], [4.2, 13.0], [4.3, 13.0], [4.4, 13.0], [4.5, 13.0], [4.6, 13.0], [4.7, 13.0], [4.8, 13.0], [4.9, 13.0], [5.0, 13.0], [5.1, 13.0], [5.2, 13.0], [5.3, 13.0], [5.4, 13.0], [5.5, 13.0], [5.6, 13.0], [5.7, 13.0], [5.8, 13.0], [5.9, 13.0], [6.0, 13.0], [6.1, 13.0], [6.2, 13.0], [6.3, 13.0], [6.4, 13.0], [6.5, 13.0], [6.6, 13.0], [6.7, 13.0], [6.8, 13.0], [6.9, 13.0], [7.0, 13.0], [7.1, 13.0], [7.2, 13.0], [7.3, 13.0], [7.4, 14.0], [7.5, 14.0], [7.6, 14.0], [7.7, 14.0], [7.8, 14.0], [7.9, 14.0], [8.0, 14.0], [8.1, 14.0], [8.2, 14.0], [8.3, 14.0], [8.4, 14.0], [8.5, 14.0], [8.6, 14.0], [8.7, 14.0], [8.8, 14.0], [8.9, 14.0], [9.0, 14.0], [9.1, 14.0], [9.2, 14.0], [9.3, 14.0], [9.4, 14.0], [9.5, 14.0], [9.6, 14.0], [9.7, 14.0], [9.8, 14.0], [9.9, 14.0], [10.0, 14.0], [10.1, 14.0], [10.2, 14.0], [10.3, 14.0], [10.4, 14.0], [10.5, 14.0], [10.6, 14.0], [10.7, 14.0], [10.8, 14.0], [10.9, 14.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 14.0], [12.4, 14.0], [12.5, 14.0], [12.6, 14.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 14.0], [13.7, 14.0], [13.8, 14.0], [13.9, 14.0], [14.0, 14.0], [14.1, 14.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 14.0], [15.6, 14.0], [15.7, 14.0], [15.8, 14.0], [15.9, 14.0], [16.0, 14.0], [16.1, 14.0], [16.2, 14.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 15.0], [17.3, 15.0], [17.4, 15.0], [17.5, 15.0], [17.6, 15.0], [17.7, 15.0], [17.8, 15.0], [17.9, 15.0], [18.0, 15.0], [18.1, 15.0], [18.2, 15.0], [18.3, 15.0], [18.4, 15.0], [18.5, 15.0], [18.6, 15.0], [18.7, 15.0], [18.8, 15.0], [18.9, 15.0], [19.0, 15.0], [19.1, 15.0], [19.2, 15.0], [19.3, 15.0], [19.4, 15.0], [19.5, 15.0], [19.6, 15.0], [19.7, 15.0], [19.8, 15.0], [19.9, 15.0], [20.0, 15.0], [20.1, 15.0], [20.2, 15.0], [20.3, 15.0], [20.4, 15.0], [20.5, 15.0], [20.6, 15.0], [20.7, 15.0], [20.8, 15.0], [20.9, 15.0], [21.0, 15.0], [21.1, 15.0], [21.2, 15.0], [21.3, 15.0], [21.4, 15.0], [21.5, 15.0], [21.6, 15.0], [21.7, 15.0], [21.8, 15.0], [21.9, 15.0], [22.0, 15.0], [22.1, 15.0], [22.2, 15.0], [22.3, 15.0], [22.4, 15.0], [22.5, 15.0], [22.6, 15.0], [22.7, 15.0], [22.8, 15.0], [22.9, 15.0], [23.0, 15.0], [23.1, 15.0], [23.2, 15.0], [23.3, 15.0], [23.4, 15.0], [23.5, 15.0], [23.6, 15.0], [23.7, 15.0], [23.8, 15.0], [23.9, 15.0], [24.0, 15.0], [24.1, 15.0], [24.2, 15.0], [24.3, 15.0], [24.4, 15.0], [24.5, 15.0], [24.6, 15.0], [24.7, 15.0], [24.8, 15.0], [24.9, 16.0], [25.0, 16.0], [25.1, 16.0], [25.2, 16.0], [25.3, 16.0], [25.4, 16.0], [25.5, 16.0], [25.6, 16.0], [25.7, 16.0], [25.8, 16.0], [25.9, 16.0], [26.0, 16.0], [26.1, 16.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 16.0], [26.7, 16.0], [26.8, 16.0], [26.9, 16.0], [27.0, 16.0], [27.1, 16.0], [27.2, 16.0], [27.3, 16.0], [27.4, 16.0], [27.5, 16.0], [27.6, 16.0], [27.7, 16.0], [27.8, 16.0], [27.9, 16.0], [28.0, 16.0], [28.1, 16.0], [28.2, 16.0], [28.3, 16.0], [28.4, 16.0], [28.5, 16.0], [28.6, 16.0], [28.7, 16.0], [28.8, 16.0], [28.9, 16.0], [29.0, 16.0], [29.1, 16.0], [29.2, 16.0], [29.3, 16.0], [29.4, 16.0], [29.5, 16.0], [29.6, 16.0], [29.7, 16.0], [29.8, 16.0], [29.9, 16.0], [30.0, 16.0], [30.1, 16.0], [30.2, 16.0], [30.3, 16.0], [30.4, 16.0], [30.5, 16.0], [30.6, 16.0], [30.7, 16.0], [30.8, 16.0], [30.9, 16.0], [31.0, 16.0], [31.1, 16.0], [31.2, 16.0], [31.3, 16.0], [31.4, 16.0], [31.5, 16.0], [31.6, 16.0], [31.7, 16.0], [31.8, 16.0], [31.9, 17.0], [32.0, 17.0], [32.1, 17.0], [32.2, 17.0], [32.3, 17.0], [32.4, 17.0], [32.5, 17.0], [32.6, 17.0], [32.7, 17.0], [32.8, 17.0], [32.9, 17.0], [33.0, 17.0], [33.1, 17.0], [33.2, 17.0], [33.3, 17.0], [33.4, 17.0], [33.5, 17.0], [33.6, 17.0], [33.7, 17.0], [33.8, 17.0], [33.9, 17.0], [34.0, 17.0], [34.1, 17.0], [34.2, 17.0], [34.3, 17.0], [34.4, 17.0], [34.5, 17.0], [34.6, 17.0], [34.7, 17.0], [34.8, 17.0], [34.9, 17.0], [35.0, 17.0], [35.1, 17.0], [35.2, 17.0], [35.3, 17.0], [35.4, 17.0], [35.5, 17.0], [35.6, 17.0], [35.7, 17.0], [35.8, 17.0], [35.9, 17.0], [36.0, 17.0], [36.1, 17.0], [36.2, 17.0], [36.3, 18.0], [36.4, 18.0], [36.5, 18.0], [36.6, 18.0], [36.7, 18.0], [36.8, 18.0], [36.9, 18.0], [37.0, 18.0], [37.1, 18.0], [37.2, 18.0], [37.3, 18.0], [37.4, 18.0], [37.5, 18.0], [37.6, 18.0], [37.7, 18.0], [37.8, 18.0], [37.9, 18.0], [38.0, 18.0], [38.1, 18.0], [38.2, 18.0], [38.3, 18.0], [38.4, 18.0], [38.5, 18.0], [38.6, 18.0], [38.7, 18.0], [38.8, 18.0], [38.9, 18.0], [39.0, 19.0], [39.1, 19.0], [39.2, 19.0], [39.3, 19.0], [39.4, 19.0], [39.5, 19.0], [39.6, 19.0], [39.7, 19.0], [39.8, 19.0], [39.9, 19.0], [40.0, 19.0], [40.1, 19.0], [40.2, 19.0], [40.3, 19.0], [40.4, 19.0], [40.5, 19.0], [40.6, 19.0], [40.7, 20.0], [40.8, 20.0], [40.9, 20.0], [41.0, 20.0], [41.1, 20.0], [41.2, 20.0], [41.3, 20.0], [41.4, 20.0], [41.5, 20.0], [41.6, 20.0], [41.7, 20.0], [41.8, 21.0], [41.9, 21.0], [42.0, 21.0], [42.1, 21.0], [42.2, 21.0], [42.3, 21.0], [42.4, 21.0], [42.5, 21.0], [42.6, 22.0], [42.7, 22.0], [42.8, 22.0], [42.9, 22.0], [43.0, 22.0], [43.1, 22.0], [43.2, 22.0], [43.3, 23.0], [43.4, 23.0], [43.5, 23.0], [43.6, 23.0], [43.7, 23.0], [43.8, 24.0], [43.9, 24.0], [44.0, 24.0], [44.1, 25.0], [44.2, 25.0], [44.3, 26.0], [44.4, 26.0], [44.5, 26.0], [44.6, 27.0], [44.7, 27.0], [44.8, 28.0], [44.9, 29.0], [45.0, 30.0], [45.1, 31.0], [45.2, 32.0], [45.3, 33.0], [45.4, 34.0], [45.5, 36.0], [45.6, 37.0], [45.7, 39.0], [45.8, 41.0], [45.9, 43.0], [46.0, 45.0], [46.1, 46.0], [46.2, 47.0], [46.3, 48.0], [46.4, 50.0], [46.5, 51.0], [46.6, 52.0], [46.7, 53.0], [46.8, 54.0], [46.9, 55.0], [47.0, 56.0], [47.1, 57.0], [47.2, 58.0], [47.3, 59.0], [47.4, 60.0], [47.5, 60.0], [47.6, 61.0], [47.7, 62.0], [47.8, 62.0], [47.9, 63.0], [48.0, 64.0], [48.1, 65.0], [48.2, 65.0], [48.3, 66.0], [48.4, 66.0], [48.5, 67.0], [48.6, 67.0], [48.7, 68.0], [48.8, 68.0], [48.9, 69.0], [49.0, 69.0], [49.1, 69.0], [49.2, 70.0], [49.3, 70.0], [49.4, 71.0], [49.5, 71.0], [49.6, 71.0], [49.7, 72.0], [49.8, 72.0], [49.9, 72.0], [50.0, 73.0], [50.1, 73.0], [50.2, 73.0], [50.3, 74.0], [50.4, 74.0], [50.5, 75.0], [50.6, 75.0], [50.7, 75.0], [50.8, 75.0], [50.9, 76.0], [51.0, 76.0], [51.1, 76.0], [51.2, 76.0], [51.3, 77.0], [51.4, 77.0], [51.5, 77.0], [51.6, 78.0], [51.7, 78.0], [51.8, 78.0], [51.9, 78.0], [52.0, 79.0], [52.1, 79.0], [52.2, 79.0], [52.3, 79.0], [52.4, 80.0], [52.5, 80.0], [52.6, 80.0], [52.7, 80.0], [52.8, 81.0], [52.9, 81.0], [53.0, 81.0], [53.1, 81.0], [53.2, 82.0], [53.3, 82.0], [53.4, 82.0], [53.5, 82.0], [53.6, 83.0], [53.7, 83.0], [53.8, 83.0], [53.9, 83.0], [54.0, 83.0], [54.1, 84.0], [54.2, 84.0], [54.3, 84.0], [54.4, 84.0], [54.5, 85.0], [54.6, 85.0], [54.7, 85.0], [54.8, 85.0], [54.9, 85.0], [55.0, 86.0], [55.1, 86.0], [55.2, 86.0], [55.3, 86.0], [55.4, 86.0], [55.5, 87.0], [55.6, 87.0], [55.7, 87.0], [55.8, 87.0], [55.9, 87.0], [56.0, 87.0], [56.1, 87.0], [56.2, 88.0], [56.3, 88.0], [56.4, 88.0], [56.5, 88.0], [56.6, 88.0], [56.7, 88.0], [56.8, 88.0], [56.9, 89.0], [57.0, 89.0], [57.1, 89.0], [57.2, 89.0], [57.3, 89.0], [57.4, 89.0], [57.5, 89.0], [57.6, 89.0], [57.7, 89.0], [57.8, 90.0], [57.9, 90.0], [58.0, 90.0], [58.1, 90.0], [58.2, 90.0], [58.3, 90.0], [58.4, 90.0], [58.5, 90.0], [58.6, 90.0], [58.7, 91.0], [58.8, 91.0], [58.9, 91.0], [59.0, 91.0], [59.1, 91.0], [59.2, 91.0], [59.3, 91.0], [59.4, 91.0], [59.5, 91.0], [59.6, 91.0], [59.7, 91.0], [59.8, 92.0], [59.9, 92.0], [60.0, 92.0], [60.1, 92.0], [60.2, 92.0], [60.3, 92.0], [60.4, 92.0], [60.5, 92.0], [60.6, 92.0], [60.7, 92.0], [60.8, 92.0], [60.9, 92.0], [61.0, 93.0], [61.1, 93.0], [61.2, 93.0], [61.3, 93.0], [61.4, 93.0], [61.5, 93.0], [61.6, 93.0], [61.7, 93.0], [61.8, 93.0], [61.9, 93.0], [62.0, 93.0], [62.1, 94.0], [62.2, 94.0], [62.3, 94.0], [62.4, 94.0], [62.5, 94.0], [62.6, 94.0], [62.7, 94.0], [62.8, 94.0], [62.9, 94.0], [63.0, 94.0], [63.1, 95.0], [63.2, 95.0], [63.3, 95.0], [63.4, 95.0], [63.5, 95.0], [63.6, 95.0], [63.7, 95.0], [63.8, 95.0], [63.9, 95.0], [64.0, 95.0], [64.1, 96.0], [64.2, 96.0], [64.3, 96.0], [64.4, 96.0], [64.5, 96.0], [64.6, 96.0], [64.7, 96.0], [64.8, 96.0], [64.9, 97.0], [65.0, 97.0], [65.1, 97.0], [65.2, 97.0], [65.3, 97.0], [65.4, 97.0], [65.5, 97.0], [65.6, 97.0], [65.7, 97.0], [65.8, 97.0], [65.9, 98.0], [66.0, 98.0], [66.1, 98.0], [66.2, 98.0], [66.3, 98.0], [66.4, 98.0], [66.5, 98.0], [66.6, 98.0], [66.7, 98.0], [66.8, 98.0], [66.9, 98.0], [67.0, 98.0], [67.1, 99.0], [67.2, 99.0], [67.3, 99.0], [67.4, 99.0], [67.5, 99.0], [67.6, 99.0], [67.7, 99.0], [67.8, 99.0], [67.9, 99.0], [68.0, 99.0], [68.1, 99.0], [68.2, 99.0], [68.3, 100.0], [68.4, 100.0], [68.5, 100.0], [68.6, 100.0], [68.7, 100.0], [68.8, 100.0], [68.9, 100.0], [69.0, 100.0], [69.1, 100.0], [69.2, 100.0], [69.3, 100.0], [69.4, 100.0], [69.5, 100.0], [69.6, 101.0], [69.7, 101.0], [69.8, 101.0], [69.9, 101.0], [70.0, 101.0], [70.1, 101.0], [70.2, 101.0], [70.3, 101.0], [70.4, 101.0], [70.5, 101.0], [70.6, 101.0], [70.7, 102.0], [70.8, 102.0], [70.9, 102.0], [71.0, 102.0], [71.1, 102.0], [71.2, 102.0], [71.3, 102.0], [71.4, 102.0], [71.5, 103.0], [71.6, 103.0], [71.7, 103.0], [71.8, 103.0], [71.9, 103.0], [72.0, 104.0], [72.1, 104.0], [72.2, 104.0], [72.3, 104.0], [72.4, 104.0], [72.5, 104.0], [72.6, 105.0], [72.7, 105.0], [72.8, 105.0], [72.9, 105.0], [73.0, 106.0], [73.1, 106.0], [73.2, 107.0], [73.3, 107.0], [73.4, 107.0], [73.5, 108.0], [73.6, 108.0], [73.7, 108.0], [73.8, 109.0], [73.9, 109.0], [74.0, 110.0], [74.1, 111.0], [74.2, 112.0], [74.3, 113.0], [74.4, 114.0], [74.5, 116.0], [74.6, 118.0], [74.7, 123.0], [74.8, 131.0], [74.9, 145.0], [75.0, 158.0], [75.1, 164.0], [75.2, 169.0], [75.3, 173.0], [75.4, 176.0], [75.5, 178.0], [75.6, 181.0], [75.7, 182.0], [75.8, 183.0], [75.9, 185.0], [76.0, 186.0], [76.1, 187.0], [76.2, 188.0], [76.3, 190.0], [76.4, 191.0], [76.5, 192.0], [76.6, 193.0], [76.7, 194.0], [76.8, 195.0], [76.9, 195.0], [77.0, 196.0], [77.1, 197.0], [77.2, 197.0], [77.3, 198.0], [77.4, 199.0], [77.5, 200.0], [77.6, 201.0], [77.7, 201.0], [77.8, 203.0], [77.9, 204.0], [78.0, 205.0], [78.1, 207.0], [78.2, 208.0], [78.3, 210.0], [78.4, 212.0], [78.5, 214.0], [78.6, 218.0], [78.7, 224.0], [78.8, 263.0], [78.9, 274.0], [79.0, 279.0], [79.1, 283.0], [79.2, 286.0], [79.3, 288.0], [79.4, 290.0], [79.5, 291.0], [79.6, 293.0], [79.7, 295.0], [79.8, 296.0], [79.9, 298.0], [80.0, 299.0], [80.1, 301.0], [80.2, 303.0], [80.3, 305.0], [80.4, 307.0], [80.5, 309.0], [80.6, 312.0], [80.7, 317.0], [80.8, 332.0], [80.9, 376.0], [81.0, 382.0], [81.1, 387.0], [81.2, 390.0], [81.3, 396.0], [81.4, 399.0], [81.5, 402.0], [81.6, 405.0], [81.7, 409.0], [81.8, 412.0], [81.9, 419.0], [82.0, 469.0], [82.1, 482.0], [82.2, 488.0], [82.3, 493.0], [82.4, 496.0], [82.5, 499.0], [82.6, 502.0], [82.7, 505.0], [82.8, 509.0], [82.9, 512.0], [83.0, 517.0], [83.1, 530.0], [83.2, 571.0], [83.3, 583.0], [83.4, 587.0], [83.5, 591.0], [83.6, 593.0], [83.7, 596.0], [83.8, 598.0], [83.9, 600.0], [84.0, 604.0], [84.1, 607.0], [84.2, 609.0], [84.3, 612.0], [84.4, 619.0], [84.5, 658.0], [84.6, 680.0], [84.7, 689.0], [84.8, 692.0], [84.9, 695.0], [85.0, 698.0], [85.1, 701.0], [85.2, 705.0], [85.3, 710.0], [85.4, 719.0], [85.5, 765.0], [85.6, 783.0], [85.7, 788.0], [85.8, 793.0], [85.9, 796.0], [86.0, 799.0], [86.1, 803.0], [86.2, 806.0], [86.3, 811.0], [86.4, 817.0], [86.5, 823.0], [86.6, 871.0], [86.7, 878.0], [86.8, 885.0], [86.9, 888.0], [87.0, 891.0], [87.1, 894.0], [87.2, 898.0], [87.3, 901.0], [87.4, 905.0], [87.5, 909.0], [87.6, 913.0], [87.7, 917.0], [87.8, 923.0], [87.9, 935.0], [88.0, 972.0], [88.1, 981.0], [88.2, 985.0], [88.3, 989.0], [88.4, 991.0], [88.5, 993.0], [88.6, 995.0], [88.7, 996.0], [88.8, 998.0], [88.9, 1000.0], [89.0, 1000.0], [89.1, 1003.0], [89.2, 1005.0], [89.3, 1007.0], [89.4, 1010.0], [89.5, 1019.0], [89.6, 1031.0], [89.7, 1074.0], [89.8, 1080.0], [89.9, 1083.0], [90.0, 1087.0], [90.1, 1090.0], [90.2, 1093.0], [90.3, 1096.0], [90.4, 1098.0], [90.5, 1100.0], [90.6, 1103.0], [90.7, 1106.0], [90.8, 1109.0], [90.9, 1115.0], [91.0, 1129.0], [91.1, 1176.0], [91.2, 1181.0], [91.3, 1185.0], [91.4, 1188.0], [91.5, 1192.0], [91.6, 1196.0], [91.7, 1198.0], [91.8, 1202.0], [91.9, 1209.0], [92.0, 1221.0], [92.1, 1265.0], [92.2, 1281.0], [92.3, 1289.0], [92.4, 1292.0], [92.5, 1296.0], [92.6, 1300.0], [92.7, 1303.0], [92.8, 1306.0], [92.9, 1312.0], [93.0, 1351.0], [93.1, 1378.0], [93.2, 1385.0], [93.3, 1390.0], [93.4, 1394.0], [93.5, 1396.0], [93.6, 1399.0], [93.7, 1402.0], [93.8, 1408.0], [93.9, 1421.0], [94.0, 1472.0], [94.1, 1483.0], [94.2, 1490.0], [94.3, 1496.0], [94.4, 1503.0], [94.5, 1575.0], [94.6, 1593.0], [94.7, 1603.0], [94.8, 1668.0], [94.9, 1691.0], [95.0, 1706.0], [95.1, 1780.0], [95.2, 1802.0], [95.3, 1883.0], [95.4, 1898.0], [95.5, 1906.0], [95.6, 1963.0], [95.7, 1995.0], [95.8, 2004.0], [95.9, 2085.0], [96.0, 2098.0], [96.1, 2105.0], [96.2, 2137.0], [96.3, 2187.0], [96.4, 2197.0], [96.5, 2209.0], [96.6, 2275.0], [96.7, 2293.0], [96.8, 2305.0], [96.9, 2376.0], [97.0, 2394.0], [97.1, 2403.0], [97.2, 2480.0], [97.3, 2496.0], [97.4, 2505.0], [97.5, 2579.0], [97.6, 2597.0], [97.7, 2607.0], [97.8, 2717.0], [97.9, 2986.0], [98.0, 3167.0], [98.1, 3292.0], [98.2, 5575.0], [98.3, 7000.0], [98.4, 7299.0], [98.5, 7413.0], [98.6, 7690.0], [98.7, 7857.0], [98.8, 8012.0], [98.9, 8296.0], [99.0, 8587.0], [99.1, 9397.0], [99.2, 9888.0], [99.3, 10096.0], [99.4, 10156.0], [99.5, 10187.0], [99.6, 10281.0], [99.7, 10373.0], [99.8, 10600.0], [99.9, 10845.0], [100.0, 19446.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 19561.0, "series": [{"data": [[0.0, 19561.0], [600.0, 284.0], [700.0, 247.0], [800.0, 292.0], [900.0, 418.0], [1000.0, 356.0], [1100.0, 229.0], [1200.0, 195.0], [1300.0, 185.0], [1400.0, 155.0], [1500.0, 66.0], [1600.0, 72.0], [1700.0, 78.0], [1800.0, 118.0], [1900.0, 44.0], [2000.0, 62.0], [2100.0, 54.0], [2300.0, 52.0], [2200.0, 42.0], [2400.0, 35.0], [2500.0, 65.0], [2600.0, 20.0], [2800.0, 10.0], [2700.0, 2.0], [2900.0, 12.0], [3000.0, 12.0], [3100.0, 25.0], [3200.0, 9.0], [3300.0, 5.0], [3400.0, 3.0], [4900.0, 1.0], [5000.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [5300.0, 2.0], [5600.0, 2.0], [6900.0, 6.0], [6800.0, 3.0], [7000.0, 9.0], [7100.0, 14.0], [7400.0, 10.0], [7300.0, 11.0], [7200.0, 9.0], [7600.0, 12.0], [7500.0, 6.0], [7700.0, 16.0], [7800.0, 7.0], [7900.0, 5.0], [8100.0, 12.0], [8000.0, 5.0], [8700.0, 5.0], [8600.0, 6.0], [8500.0, 6.0], [8400.0, 4.0], [8300.0, 1.0], [8200.0, 3.0], [8800.0, 4.0], [8900.0, 3.0], [9200.0, 3.0], [9000.0, 1.0], [9100.0, 1.0], [9600.0, 3.0], [9500.0, 4.0], [9700.0, 2.0], [9400.0, 1.0], [9300.0, 1.0], [9800.0, 4.0], [9900.0, 3.0], [10200.0, 40.0], [10100.0, 43.0], [10000.0, 23.0], [10600.0, 6.0], [10500.0, 3.0], [10300.0, 21.0], [10400.0, 16.0], [10700.0, 4.0], [10800.0, 4.0], [10900.0, 1.0], [11200.0, 1.0], [15800.0, 2.0], [15500.0, 1.0], [16200.0, 2.0], [16400.0, 1.0], [17000.0, 1.0], [17500.0, 1.0], [18000.0, 1.0], [19400.0, 1.0], [18800.0, 1.0], [100.0, 1303.0], [200.0, 522.0], [300.0, 258.0], [400.0, 254.0], [500.0, 282.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 17618.0], [100.0, 2394.0], [200.0, 654.0], [300.0, 361.0], [400.0, 291.0], [500.0, 339.0], [600.0, 314.0], [700.0, 247.0], [800.0, 321.0], [900.0, 423.0], [1000.0, 402.0], [1100.0, 335.0], [1200.0, 217.0], [1300.0, 266.0], [1400.0, 188.0], [1500.0, 80.0], [1600.0, 81.0], [1700.0, 57.0], [1800.0, 57.0], [1900.0, 90.0], [2000.0, 67.0], [2100.0, 105.0], [2200.0, 87.0], [2300.0, 78.0], [2400.0, 68.0], [2500.0, 79.0], [2600.0, 38.0], [2700.0, 12.0], [2800.0, 9.0], [2900.0, 13.0], [3000.0, 14.0], [3100.0, 24.0], [3200.0, 19.0], [3300.0, 12.0], [3400.0, 1.0], [5100.0, 1.0], [5400.0, 1.0], [5500.0, 3.0], [5600.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 3.0], [6000.0, 3.0], [6400.0, 3.0], [6900.0, 10.0], [6800.0, 1.0], [7000.0, 7.0], [7100.0, 6.0], [7300.0, 18.0], [7400.0, 18.0], [7200.0, 15.0], [7600.0, 12.0], [7500.0, 6.0], [7700.0, 19.0], [7900.0, 17.0], [7800.0, 12.0], [8000.0, 14.0], [8100.0, 8.0], [8500.0, 9.0], [8400.0, 11.0], [8300.0, 10.0], [8700.0, 3.0], [8600.0, 5.0], [8200.0, 5.0], [9200.0, 3.0], [9100.0, 4.0], [8900.0, 3.0], [9600.0, 7.0], [9300.0, 4.0], [9400.0, 5.0], [9700.0, 3.0], [9500.0, 6.0], [9800.0, 5.0], [10200.0, 33.0], [10000.0, 28.0], [10100.0, 49.0], [9900.0, 3.0], [10400.0, 22.0], [10300.0, 19.0], [10700.0, 11.0], [10600.0, 7.0], [10800.0, 11.0], [10900.0, 5.0], [11200.0, 1.0], [11100.0, 1.0], [11300.0, 1.0], [11500.0, 1.0], [12500.0, 1.0], [15100.0, 2.0], [15200.0, 1.0], [15800.0, 2.0], [15700.0, 1.0], [16000.0, 1.0], [16300.0, 1.0], [16500.0, 1.0], [17500.0, 1.0], [19300.0, 1.0], [19400.0, 1.0], [18600.0, 1.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 236.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 43234.0, "series": [{"data": [[0.0, 43234.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5687.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2361.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 236.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 30.550000000000015, "minX": 1.6250208E12, "maxY": 128.0, "series": [{"data": [[1.62502092E12, 127.90565569703983], [1.62502098E12, 30.550000000000015], [1.6250208E12, 115.72327044025154], [1.62502086E12, 128.0]], "isOverall": false, "label": "JavaTest_peek", "isController": false}, {"data": [[1.62502098E12, 63.57069560927479]], "isOverall": false, "label": "JavaTest_cool", "isController": false}, {"data": [[1.6250208E12, 62.08634538152611]], "isOverall": false, "label": "JavaTest_warm", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502098E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.5, "minX": 1.0, "maxY": 17020.0, "series": [{"data": [[2.0, 12619.0], [3.0, 15820.0], [5.0, 429.0], [6.0, 481.0], [7.0, 7762.0], [8.0, 5556.5], [9.0, 7741.0], [10.0, 586.0], [12.0, 5689.0], [13.0, 5601.0], [14.0, 283.0], [16.0, 223.0], [17.0, 652.6666666666666], [18.0, 2883.0], [19.0, 2798.5], [20.0, 2215.0], [21.0, 2707.0], [22.0, 229.0], [23.0, 2652.5], [24.0, 1573.5], [25.0, 7267.0], [26.0, 72.28571428571428], [27.0, 52.2], [28.0, 349.5], [29.0, 354.5], [31.0, 198.0], [32.0, 7.0], [34.0, 3749.0], [37.0, 208.0], [36.0, 565.6666666666667], [38.0, 27.0], [40.0, 7393.0], [41.0, 7.0], [42.0, 7775.0], [43.0, 169.0], [44.0, 2414.333333333333], [45.0, 178.0], [47.0, 4263.5], [46.0, 992.0], [49.0, 343.4], [48.0, 6.5], [51.0, 793.888888888889], [50.0, 71.5], [52.0, 795.6666666666667], [53.0, 52.0], [55.0, 1719.2], [54.0, 84.0], [57.0, 4038.0], [56.0, 100.0], [59.0, 2759.0], [58.0, 3994.0], [61.0, 4266.5], [63.0, 952.0], [64.0, 290.04123711340327], [65.0, 17020.0], [70.0, 7687.0], [72.0, 7679.0], [79.0, 111.0], [77.0, 7484.0], [76.0, 7488.0], [80.0, 104.0], [82.0, 59.0], [81.0, 7375.0], [87.0, 7178.0], [85.0, 7189.0], [84.0, 7194.0], [91.0, 403.0], [89.0, 7090.0], [94.0, 7079.0], [93.0, 486.0], [99.0, 409.0], [96.0, 412.0], [100.0, 469.0], [104.0, 15824.0], [111.0, 332.0], [108.0, 406.0], [112.0, 331.0], [118.0, 391.0], [117.0, 373.0], [116.0, 370.0], [120.0, 330.0], [126.0, 127.66666666666667], [127.0, 25.5], [124.0, 398.0], [128.0, 332.83131750535085], [1.0, 11036.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[113.96687169106126, 336.48326066645944]], "isOverall": false, "label": "post-Aggregated", "isController": false}, {"data": [[2.0, 7914.0], [3.0, 7857.0], [4.0, 10648.5], [5.0, 7211.333333333334], [6.0, 6923.0], [7.0, 5993.0], [8.0, 3141.0], [9.0, 3099.0], [10.0, 3081.5], [11.0, 3142.0], [12.0, 4061.5], [14.0, 2980.0], [15.0, 2926.5], [16.0, 2193.0], [17.0, 1213.6], [18.0, 235.0], [20.0, 73.25], [22.0, 1752.3333333333333], [24.0, 305.75], [25.0, 24.8], [26.0, 1218.1666666666667], [27.0, 3606.5], [28.0, 1275.5], [29.0, 86.4], [30.0, 7331.0], [31.0, 7488.0], [33.0, 7398.0], [32.0, 2510.0], [35.0, 3884.5], [34.0, 193.2], [36.0, 639.4], [37.0, 2536.666666666667], [39.0, 3192.0], [38.0, 1943.7500000000002], [40.0, 5665.0], [41.0, 3712.5], [43.0, 1867.4999999999998], [45.0, 3659.5], [47.0, 771.75], [46.0, 347.0], [49.0, 1630.6666666666667], [48.0, 4381.25], [50.0, 3508.666666666667], [51.0, 52.0], [53.0, 7396.0], [52.0, 3846.5], [54.0, 4838.0], [55.0, 1616.8], [57.0, 931.5], [56.0, 7985.0], [58.0, 27.0], [60.0, 7887.0], [61.0, 104.0], [63.0, 2833.5], [62.0, 7800.0], [64.0, 386.0038398244653], [67.0, 7786.0], [66.0, 7752.0], [71.0, 7691.0], [69.0, 7698.0], [68.0, 7789.0], [75.0, 7590.0], [74.0, 7592.0], [73.0, 7680.0], [79.0, 1351.0000000000002], [78.0, 7402.0], [83.0, 7294.0], [82.0, 7295.0], [80.0, 7387.0], [84.0, 123.0], [86.0, 7176.0], [90.0, 6999.0], [88.0, 7091.0], [95.0, 419.0], [93.0, 6910.0], [98.0, 418.5], [103.0, 7317.0], [102.0, 7107.0], [101.0, 480.0], [105.0, 403.0], [110.0, 338.0], [109.0, 405.0], [108.0, 409.0], [115.0, 366.0], [114.0, 365.0], [113.0, 368.0], [119.0, 332.0], [123.0, 399.0], [122.0, 376.0], [121.0, 371.0], [126.0, 154.5], [127.0, 64.5], [125.0, 211.0], [128.0, 405.6349774002868]], "isOverall": false, "label": "get", "isController": false}, {"data": [[113.74374758033241, 419.75060007742934]], "isOverall": false, "label": "get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 128.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4271.25, "minX": 1.6250208E12, "maxY": 99513.73333333334, "series": [{"data": [[1.62502092E12, 99513.73333333334], [1.62502098E12, 41523.78333333333], [1.6250208E12, 4690.433333333333], [1.62502086E12, 65272.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62502092E12, 92323.53333333334], [1.62502098E12, 38861.916666666664], [1.6250208E12, 4271.25], [1.62502086E12, 61028.333333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502098E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 194.97693672383207, "minX": 1.6250208E12, "maxY": 1842.1207430340546, "series": [{"data": [[1.62502092E12, 268.5073985285606], [1.62502098E12, 194.97693672383207], [1.6250208E12, 1674.0962671905704], [1.62502086E12, 443.77762517168156]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502092E12, 334.78099412786406], [1.62502098E12, 277.72237407262907], [1.6250208E12, 1842.1207430340546], [1.62502086E12, 524.6289047798266]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502098E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 194.97200867336926, "minX": 1.6250208E12, "maxY": 1842.0727554179587, "series": [{"data": [[1.62502092E12, 268.50392659337024], [1.62502098E12, 194.97200867336926], [1.6250208E12, 1674.0707269155205], [1.62502086E12, 443.7718816331649]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502092E12, 334.77718964518965], [1.62502098E12, 277.71690745802465], [1.6250208E12, 1842.0727554179587], [1.62502086E12, 524.6232593150168]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502098E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.6250208E12, "maxY": 130.01393188854482, "series": [{"data": [[1.62502092E12, 0.0], [1.62502098E12, 0.0], [1.6250208E12, 0.0], [1.62502086E12, 0.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.62502092E12, 8.349764287486574], [1.62502098E12, 8.666731745411926], [1.6250208E12, 130.01393188854482], [1.62502086E12, 8.447120812946931]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502098E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.6250208E12, "maxY": 19446.0, "series": [{"data": [[1.62502092E12, 18840.0], [1.62502098E12, 17500.0], [1.6250208E12, 17571.0], [1.62502086E12, 19446.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62502092E12, 201.0], [1.62502098E12, 184.0], [1.6250208E12, 2602.0], [1.62502086E12, 1207.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62502092E12, 1901.0], [1.62502098E12, 7714.1199999999735], [1.6250208E12, 9767.64000000001], [1.62502086E12, 3198.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62502092E12, 880.0], [1.62502098E12, 263.0], [1.6250208E12, 7834.000000000008], [1.62502086E12, 2107.8499999999985]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62502092E12, 4.0], [1.62502098E12, 4.0], [1.6250208E12, 6.0], [1.62502086E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62502092E12, 16.0], [1.62502098E12, 23.0], [1.6250208E12, 1312.0], [1.62502086E12, 80.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502098E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 15512.5, "series": [{"data": [[3.0, 7914.0], [6.0, 2399.0], [9.0, 5989.0], [16.0, 1312.0], [20.0, 3692.0], [21.0, 2016.0], [22.0, 1289.5], [24.0, 2600.0], [25.0, 5094.5], [26.0, 1509.0], [27.0, 2304.0], [28.0, 7084.0], [37.0, 89.0], [40.0, 1399.0], [41.0, 31.0], [42.0, 1395.5], [44.0, 1398.5], [46.0, 1196.0], [47.0, 1303.0], [50.0, 1893.5], [54.0, 1211.0], [60.0, 1895.0], [61.0, 2106.0], [69.0, 1579.0], [75.0, 1999.0], [77.0, 589.0], [79.0, 1611.0], [78.0, 1167.5], [82.0, 297.5], [84.0, 703.5], [92.0, 328.0], [96.0, 14.0], [106.0, 14.0], [109.0, 14.0], [139.0, 14.0], [145.0, 2064.0], [155.0, 85.0], [181.0, 18.0], [188.0, 101.5], [185.0, 961.0], [184.0, 17.0], [199.0, 69.0], [196.0, 664.0], [221.0, 97.0], [223.0, 935.0], [224.0, 814.5], [242.0, 195.0], [241.0, 15.0], [249.0, 34.5], [250.0, 94.0], [257.0, 25.5], [266.0, 15.0], [279.0, 98.0], [285.0, 18.0], [281.0, 14.0], [276.0, 502.0], [278.0, 79.0], [296.0, 392.5], [299.0, 23.0], [292.0, 70.0], [291.0, 114.0], [298.0, 57.5], [293.0, 15.0], [295.0, 15.0], [308.0, 429.0], [306.0, 96.0], [309.0, 14.0], [311.0, 94.0], [307.0, 15.0], [305.0, 14.0], [331.0, 16.0], [324.0, 92.0], [333.0, 55.0], [328.0, 94.0], [344.0, 14.0], [340.0, 16.0], [351.0, 15.0], [341.0, 407.0], [336.0, 16.5], [337.0, 16.0], [349.0, 75.0], [339.0, 15.0], [360.0, 86.0], [364.0, 301.5], [357.0, 199.0], [366.0, 76.0], [363.0, 15.0], [362.0, 15.0], [361.0, 15.0], [377.0, 67.0], [373.0, 46.0], [368.0, 14.0], [383.0, 14.0], [371.0, 17.0], [376.0, 97.0], [397.0, 34.0], [396.0, 17.0], [395.0, 21.0], [388.0, 100.0], [390.0, 101.0], [386.0, 67.5], [385.0, 66.0], [394.0, 26.0], [393.0, 70.0], [400.0, 16.0], [405.0, 19.0], [411.0, 14.0], [407.0, 88.0], [404.0, 15.0], [418.0, 98.5], [422.0, 61.0], [423.0, 75.0], [417.0, 71.0], [428.0, 324.5], [430.0, 86.5], [424.0, 87.0], [431.0, 16.0], [426.0, 30.0], [427.0, 14.0], [445.0, 17.0], [438.0, 280.5], [441.0, 100.0], [437.0, 58.0], [433.0, 14.0], [440.0, 14.0], [435.0, 13.0], [443.0, 86.0], [452.0, 16.0], [454.0, 14.0], [471.0, 14.0], [483.0, 17.0], [481.0, 91.0], [480.0, 84.0], [498.0, 72.0], [508.0, 13.0], [511.0, 14.0], [516.0, 13.0], [528.0, 13.0], [530.0, 14.0], [521.0, 14.0], [529.0, 93.0], [532.0, 102.0], [603.0, 15.0], [606.0, 20.0], [656.0, 20.0], [644.0, 72.0], [1.0, 15512.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[603.0, 10629.5], [656.0, 10161.0], [644.0, 10212.0], [285.0, 10114.0], [337.0, 11260.0], [368.0, 10712.5], [377.0, 10335.5], [383.0, 10795.0], [411.0, 10160.0], [407.0, 12850.0], [422.0, 10113.0], [426.0, 10375.0], [508.0, 10277.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 656.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 15512.5, "series": [{"data": [[3.0, 7914.0], [6.0, 2399.0], [9.0, 5989.0], [16.0, 1312.0], [20.0, 3692.0], [21.0, 2016.0], [22.0, 1289.5], [24.0, 2600.0], [25.0, 5094.5], [26.0, 1509.0], [27.0, 2304.0], [28.0, 7084.0], [37.0, 89.0], [40.0, 1399.0], [41.0, 31.0], [42.0, 1395.5], [44.0, 1398.5], [46.0, 1196.0], [47.0, 1303.0], [50.0, 1893.5], [54.0, 1211.0], [60.0, 1895.0], [61.0, 2106.0], [69.0, 1579.0], [75.0, 1999.0], [77.0, 589.0], [79.0, 1611.0], [78.0, 1167.5], [82.0, 297.5], [84.0, 703.5], [92.0, 328.0], [96.0, 14.0], [106.0, 14.0], [109.0, 14.0], [139.0, 13.0], [145.0, 2064.0], [155.0, 85.0], [181.0, 18.0], [188.0, 101.5], [185.0, 961.0], [184.0, 17.0], [199.0, 69.0], [196.0, 664.0], [221.0, 97.0], [223.0, 935.0], [224.0, 814.5], [242.0, 195.0], [241.0, 15.0], [249.0, 34.5], [250.0, 94.0], [257.0, 25.5], [266.0, 15.0], [279.0, 98.0], [285.0, 18.0], [281.0, 14.0], [276.0, 502.0], [278.0, 79.0], [296.0, 392.5], [299.0, 23.0], [292.0, 70.0], [291.0, 114.0], [298.0, 57.5], [293.0, 15.0], [295.0, 15.0], [308.0, 429.0], [306.0, 96.0], [309.0, 14.0], [311.0, 94.0], [307.0, 15.0], [305.0, 14.0], [331.0, 16.0], [324.0, 92.0], [333.0, 55.0], [328.0, 94.0], [344.0, 14.0], [340.0, 16.0], [351.0, 15.0], [341.0, 407.0], [336.0, 16.5], [337.0, 16.0], [349.0, 75.0], [339.0, 15.0], [360.0, 86.0], [364.0, 301.5], [357.0, 199.0], [366.0, 76.0], [363.0, 15.0], [362.0, 15.0], [361.0, 15.0], [377.0, 67.0], [373.0, 46.0], [368.0, 14.0], [383.0, 14.0], [371.0, 17.0], [376.0, 97.0], [397.0, 34.0], [396.0, 17.0], [395.0, 21.0], [388.0, 100.0], [390.0, 101.0], [386.0, 67.5], [385.0, 66.0], [394.0, 26.0], [393.0, 70.0], [400.0, 16.0], [405.0, 19.0], [411.0, 14.0], [407.0, 88.0], [404.0, 15.0], [418.0, 98.5], [422.0, 61.0], [423.0, 75.0], [417.0, 71.0], [428.0, 324.5], [430.0, 86.5], [424.0, 87.0], [431.0, 16.0], [426.0, 30.0], [427.0, 14.0], [445.0, 17.0], [438.0, 280.5], [441.0, 100.0], [437.0, 58.0], [433.0, 14.0], [440.0, 14.0], [435.0, 13.0], [443.0, 86.0], [452.0, 16.0], [454.0, 14.0], [471.0, 14.0], [483.0, 17.0], [481.0, 91.0], [480.0, 84.0], [498.0, 72.0], [508.0, 13.0], [511.0, 14.0], [516.0, 13.0], [528.0, 13.0], [530.0, 14.0], [521.0, 14.0], [529.0, 93.0], [532.0, 102.0], [603.0, 15.0], [606.0, 20.0], [656.0, 20.0], [644.0, 72.0], [1.0, 15512.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[603.0, 10629.5], [656.0, 10161.0], [644.0, 10212.0], [285.0, 10114.0], [337.0, 11260.0], [368.0, 10712.5], [377.0, 10335.5], [383.0, 10795.0], [411.0, 10160.0], [407.0, 12850.0], [422.0, 10113.0], [426.0, 10375.0], [508.0, 10277.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 656.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 21.383333333333333, "minX": 1.6250208E12, "maxY": 402.0, "series": [{"data": [[1.62502092E12, 402.0], [1.62502098E12, 168.91666666666666], [1.6250208E12, 21.383333333333333], [1.62502086E12, 266.3333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502098E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.6250208E12, "maxY": 399.8333333333333, "series": [{"data": [[1.62502092E12, 399.8333333333333], [1.62502098E12, 169.91666666666666], [1.6250208E12, 19.25], [1.62502086E12, 265.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62502092E12, 3.3], [1.62502086E12, 0.6333333333333333]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502098E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.6250208E12, "maxY": 200.15, "series": [{"data": [[1.62502092E12, 1.8333333333333333], [1.62502086E12, 0.35]], "isOverall": false, "label": "get-failure", "isController": false}, {"data": [[1.62502092E12, 199.68333333333334], [1.62502098E12, 85.36666666666666], [1.6250208E12, 10.766666666666667], [1.62502086E12, 132.5]], "isOverall": false, "label": "get-success", "isController": false}, {"data": [[1.62502092E12, 200.15], [1.62502098E12, 84.55], [1.6250208E12, 8.483333333333333], [1.62502086E12, 133.2]], "isOverall": false, "label": "post-success", "isController": false}, {"data": [[1.62502092E12, 1.4666666666666666], [1.62502086E12, 0.2833333333333333]], "isOverall": false, "label": "post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502098E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.6250208E12, "maxY": 399.8333333333333, "series": [{"data": [[1.62502092E12, 399.8333333333333], [1.62502098E12, 169.91666666666666], [1.6250208E12, 19.25], [1.62502086E12, 265.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62502092E12, 3.3], [1.62502086E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502098E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

