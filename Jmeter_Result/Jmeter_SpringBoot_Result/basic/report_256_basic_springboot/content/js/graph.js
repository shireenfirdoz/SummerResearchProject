/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 20496.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 7.0], [12.6, 7.0], [12.7, 7.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 7.0], [14.9, 7.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 8.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 8.0], [24.3, 8.0], [24.4, 8.0], [24.5, 8.0], [24.6, 8.0], [24.7, 8.0], [24.8, 8.0], [24.9, 8.0], [25.0, 8.0], [25.1, 8.0], [25.2, 8.0], [25.3, 8.0], [25.4, 8.0], [25.5, 8.0], [25.6, 8.0], [25.7, 8.0], [25.8, 8.0], [25.9, 8.0], [26.0, 8.0], [26.1, 8.0], [26.2, 8.0], [26.3, 8.0], [26.4, 8.0], [26.5, 8.0], [26.6, 8.0], [26.7, 8.0], [26.8, 8.0], [26.9, 8.0], [27.0, 8.0], [27.1, 8.0], [27.2, 8.0], [27.3, 8.0], [27.4, 8.0], [27.5, 8.0], [27.6, 8.0], [27.7, 8.0], [27.8, 8.0], [27.9, 8.0], [28.0, 8.0], [28.1, 8.0], [28.2, 8.0], [28.3, 8.0], [28.4, 8.0], [28.5, 8.0], [28.6, 8.0], [28.7, 8.0], [28.8, 8.0], [28.9, 8.0], [29.0, 8.0], [29.1, 8.0], [29.2, 8.0], [29.3, 8.0], [29.4, 8.0], [29.5, 8.0], [29.6, 9.0], [29.7, 9.0], [29.8, 9.0], [29.9, 9.0], [30.0, 9.0], [30.1, 9.0], [30.2, 9.0], [30.3, 9.0], [30.4, 9.0], [30.5, 9.0], [30.6, 9.0], [30.7, 9.0], [30.8, 9.0], [30.9, 9.0], [31.0, 9.0], [31.1, 9.0], [31.2, 9.0], [31.3, 9.0], [31.4, 9.0], [31.5, 9.0], [31.6, 9.0], [31.7, 9.0], [31.8, 9.0], [31.9, 9.0], [32.0, 9.0], [32.1, 9.0], [32.2, 9.0], [32.3, 9.0], [32.4, 9.0], [32.5, 9.0], [32.6, 9.0], [32.7, 9.0], [32.8, 9.0], [32.9, 9.0], [33.0, 9.0], [33.1, 9.0], [33.2, 9.0], [33.3, 9.0], [33.4, 9.0], [33.5, 9.0], [33.6, 9.0], [33.7, 9.0], [33.8, 9.0], [33.9, 9.0], [34.0, 9.0], [34.1, 9.0], [34.2, 9.0], [34.3, 9.0], [34.4, 9.0], [34.5, 9.0], [34.6, 9.0], [34.7, 9.0], [34.8, 9.0], [34.9, 9.0], [35.0, 9.0], [35.1, 9.0], [35.2, 9.0], [35.3, 9.0], [35.4, 9.0], [35.5, 9.0], [35.6, 9.0], [35.7, 9.0], [35.8, 10.0], [35.9, 10.0], [36.0, 10.0], [36.1, 10.0], [36.2, 10.0], [36.3, 10.0], [36.4, 10.0], [36.5, 10.0], [36.6, 10.0], [36.7, 10.0], [36.8, 10.0], [36.9, 10.0], [37.0, 10.0], [37.1, 10.0], [37.2, 10.0], [37.3, 10.0], [37.4, 10.0], [37.5, 10.0], [37.6, 10.0], [37.7, 10.0], [37.8, 10.0], [37.9, 10.0], [38.0, 10.0], [38.1, 10.0], [38.2, 10.0], [38.3, 10.0], [38.4, 10.0], [38.5, 10.0], [38.6, 10.0], [38.7, 10.0], [38.8, 10.0], [38.9, 10.0], [39.0, 10.0], [39.1, 10.0], [39.2, 10.0], [39.3, 10.0], [39.4, 10.0], [39.5, 10.0], [39.6, 10.0], [39.7, 10.0], [39.8, 11.0], [39.9, 11.0], [40.0, 11.0], [40.1, 11.0], [40.2, 11.0], [40.3, 11.0], [40.4, 11.0], [40.5, 11.0], [40.6, 11.0], [40.7, 11.0], [40.8, 11.0], [40.9, 11.0], [41.0, 11.0], [41.1, 11.0], [41.2, 11.0], [41.3, 11.0], [41.4, 11.0], [41.5, 11.0], [41.6, 11.0], [41.7, 11.0], [41.8, 11.0], [41.9, 11.0], [42.0, 11.0], [42.1, 11.0], [42.2, 11.0], [42.3, 11.0], [42.4, 11.0], [42.5, 12.0], [42.6, 12.0], [42.7, 12.0], [42.8, 12.0], [42.9, 12.0], [43.0, 12.0], [43.1, 12.0], [43.2, 12.0], [43.3, 12.0], [43.4, 12.0], [43.5, 12.0], [43.6, 12.0], [43.7, 12.0], [43.8, 12.0], [43.9, 12.0], [44.0, 12.0], [44.1, 12.0], [44.2, 13.0], [44.3, 13.0], [44.4, 13.0], [44.5, 13.0], [44.6, 13.0], [44.7, 13.0], [44.8, 13.0], [44.9, 13.0], [45.0, 13.0], [45.1, 13.0], [45.2, 13.0], [45.3, 14.0], [45.4, 14.0], [45.5, 14.0], [45.6, 14.0], [45.7, 14.0], [45.8, 14.0], [45.9, 14.0], [46.0, 14.0], [46.1, 14.0], [46.2, 15.0], [46.3, 15.0], [46.4, 15.0], [46.5, 15.0], [46.6, 15.0], [46.7, 15.0], [46.8, 16.0], [46.9, 16.0], [47.0, 16.0], [47.1, 16.0], [47.2, 16.0], [47.3, 17.0], [47.4, 17.0], [47.5, 17.0], [47.6, 17.0], [47.7, 18.0], [47.8, 18.0], [47.9, 19.0], [48.0, 19.0], [48.1, 20.0], [48.2, 20.0], [48.3, 21.0], [48.4, 22.0], [48.5, 23.0], [48.6, 24.0], [48.7, 25.0], [48.8, 27.0], [48.9, 29.0], [49.0, 32.0], [49.1, 33.0], [49.2, 36.0], [49.3, 39.0], [49.4, 41.0], [49.5, 43.0], [49.6, 45.0], [49.7, 46.0], [49.8, 48.0], [49.9, 49.0], [50.0, 50.0], [50.1, 51.0], [50.2, 52.0], [50.3, 52.0], [50.4, 53.0], [50.5, 54.0], [50.6, 55.0], [50.7, 56.0], [50.8, 57.0], [50.9, 58.0], [51.0, 58.0], [51.1, 59.0], [51.2, 59.0], [51.3, 60.0], [51.4, 61.0], [51.5, 61.0], [51.6, 62.0], [51.7, 62.0], [51.8, 63.0], [51.9, 63.0], [52.0, 63.0], [52.1, 64.0], [52.2, 64.0], [52.3, 65.0], [52.4, 65.0], [52.5, 66.0], [52.6, 66.0], [52.7, 67.0], [52.8, 67.0], [52.9, 67.0], [53.0, 68.0], [53.1, 68.0], [53.2, 68.0], [53.3, 69.0], [53.4, 69.0], [53.5, 69.0], [53.6, 70.0], [53.7, 70.0], [53.8, 70.0], [53.9, 70.0], [54.0, 71.0], [54.1, 71.0], [54.2, 71.0], [54.3, 72.0], [54.4, 72.0], [54.5, 72.0], [54.6, 72.0], [54.7, 72.0], [54.8, 73.0], [54.9, 73.0], [55.0, 73.0], [55.1, 73.0], [55.2, 74.0], [55.3, 74.0], [55.4, 74.0], [55.5, 74.0], [55.6, 75.0], [55.7, 75.0], [55.8, 75.0], [55.9, 75.0], [56.0, 75.0], [56.1, 75.0], [56.2, 76.0], [56.3, 76.0], [56.4, 76.0], [56.5, 76.0], [56.6, 76.0], [56.7, 77.0], [56.8, 77.0], [56.9, 77.0], [57.0, 77.0], [57.1, 77.0], [57.2, 77.0], [57.3, 78.0], [57.4, 78.0], [57.5, 78.0], [57.6, 78.0], [57.7, 78.0], [57.8, 78.0], [57.9, 79.0], [58.0, 79.0], [58.1, 79.0], [58.2, 79.0], [58.3, 79.0], [58.4, 80.0], [58.5, 80.0], [58.6, 80.0], [58.7, 80.0], [58.8, 80.0], [58.9, 80.0], [59.0, 81.0], [59.1, 81.0], [59.2, 81.0], [59.3, 81.0], [59.4, 81.0], [59.5, 81.0], [59.6, 82.0], [59.7, 82.0], [59.8, 82.0], [59.9, 82.0], [60.0, 82.0], [60.1, 82.0], [60.2, 83.0], [60.3, 83.0], [60.4, 83.0], [60.5, 83.0], [60.6, 83.0], [60.7, 83.0], [60.8, 83.0], [60.9, 84.0], [61.0, 84.0], [61.1, 84.0], [61.2, 84.0], [61.3, 84.0], [61.4, 84.0], [61.5, 84.0], [61.6, 85.0], [61.7, 85.0], [61.8, 85.0], [61.9, 85.0], [62.0, 85.0], [62.1, 85.0], [62.2, 85.0], [62.3, 86.0], [62.4, 86.0], [62.5, 86.0], [62.6, 86.0], [62.7, 86.0], [62.8, 86.0], [62.9, 86.0], [63.0, 87.0], [63.1, 87.0], [63.2, 87.0], [63.3, 87.0], [63.4, 87.0], [63.5, 87.0], [63.6, 87.0], [63.7, 87.0], [63.8, 88.0], [63.9, 88.0], [64.0, 88.0], [64.1, 88.0], [64.2, 88.0], [64.3, 88.0], [64.4, 88.0], [64.5, 88.0], [64.6, 89.0], [64.7, 89.0], [64.8, 89.0], [64.9, 89.0], [65.0, 89.0], [65.1, 89.0], [65.2, 89.0], [65.3, 89.0], [65.4, 90.0], [65.5, 90.0], [65.6, 90.0], [65.7, 90.0], [65.8, 90.0], [65.9, 90.0], [66.0, 90.0], [66.1, 90.0], [66.2, 91.0], [66.3, 91.0], [66.4, 91.0], [66.5, 91.0], [66.6, 91.0], [66.7, 91.0], [66.8, 91.0], [66.9, 91.0], [67.0, 91.0], [67.1, 92.0], [67.2, 92.0], [67.3, 92.0], [67.4, 92.0], [67.5, 92.0], [67.6, 92.0], [67.7, 92.0], [67.8, 92.0], [67.9, 93.0], [68.0, 93.0], [68.1, 93.0], [68.2, 93.0], [68.3, 93.0], [68.4, 93.0], [68.5, 93.0], [68.6, 94.0], [68.7, 94.0], [68.8, 94.0], [68.9, 94.0], [69.0, 94.0], [69.1, 94.0], [69.2, 94.0], [69.3, 94.0], [69.4, 94.0], [69.5, 95.0], [69.6, 95.0], [69.7, 95.0], [69.8, 95.0], [69.9, 95.0], [70.0, 95.0], [70.1, 95.0], [70.2, 95.0], [70.3, 95.0], [70.4, 96.0], [70.5, 96.0], [70.6, 96.0], [70.7, 96.0], [70.8, 96.0], [70.9, 96.0], [71.0, 96.0], [71.1, 96.0], [71.2, 96.0], [71.3, 97.0], [71.4, 97.0], [71.5, 97.0], [71.6, 97.0], [71.7, 97.0], [71.8, 97.0], [71.9, 97.0], [72.0, 97.0], [72.1, 98.0], [72.2, 98.0], [72.3, 98.0], [72.4, 98.0], [72.5, 98.0], [72.6, 98.0], [72.7, 98.0], [72.8, 98.0], [72.9, 99.0], [73.0, 99.0], [73.1, 99.0], [73.2, 99.0], [73.3, 99.0], [73.4, 99.0], [73.5, 99.0], [73.6, 100.0], [73.7, 100.0], [73.8, 100.0], [73.9, 100.0], [74.0, 100.0], [74.1, 101.0], [74.2, 101.0], [74.3, 101.0], [74.4, 101.0], [74.5, 102.0], [74.6, 102.0], [74.7, 102.0], [74.8, 103.0], [74.9, 103.0], [75.0, 103.0], [75.1, 104.0], [75.2, 104.0], [75.3, 105.0], [75.4, 105.0], [75.5, 106.0], [75.6, 106.0], [75.7, 107.0], [75.8, 108.0], [75.9, 109.0], [76.0, 111.0], [76.1, 112.0], [76.2, 114.0], [76.3, 115.0], [76.4, 118.0], [76.5, 124.0], [76.6, 134.0], [76.7, 143.0], [76.8, 152.0], [76.9, 157.0], [77.0, 159.0], [77.1, 163.0], [77.2, 165.0], [77.3, 167.0], [77.4, 169.0], [77.5, 171.0], [77.6, 173.0], [77.7, 175.0], [77.8, 177.0], [77.9, 178.0], [78.0, 179.0], [78.1, 181.0], [78.2, 182.0], [78.3, 184.0], [78.4, 185.0], [78.5, 187.0], [78.6, 188.0], [78.7, 189.0], [78.8, 191.0], [78.9, 192.0], [79.0, 194.0], [79.1, 195.0], [79.2, 197.0], [79.3, 199.0], [79.4, 200.0], [79.5, 202.0], [79.6, 203.0], [79.7, 205.0], [79.8, 206.0], [79.9, 208.0], [80.0, 209.0], [80.1, 211.0], [80.2, 212.0], [80.3, 214.0], [80.4, 218.0], [80.5, 234.0], [80.6, 261.0], [80.7, 267.0], [80.8, 273.0], [80.9, 276.0], [81.0, 279.0], [81.1, 282.0], [81.2, 285.0], [81.3, 287.0], [81.4, 289.0], [81.5, 291.0], [81.6, 293.0], [81.7, 294.0], [81.8, 295.0], [81.9, 297.0], [82.0, 298.0], [82.1, 299.0], [82.2, 301.0], [82.3, 302.0], [82.4, 305.0], [82.5, 307.0], [82.6, 310.0], [82.7, 312.0], [82.8, 315.0], [82.9, 320.0], [83.0, 328.0], [83.1, 366.0], [83.2, 373.0], [83.3, 378.0], [83.4, 382.0], [83.5, 384.0], [83.6, 388.0], [83.7, 390.0], [83.8, 392.0], [83.9, 394.0], [84.0, 396.0], [84.1, 398.0], [84.2, 400.0], [84.3, 402.0], [84.4, 404.0], [84.5, 407.0], [84.6, 411.0], [84.7, 416.0], [84.8, 425.0], [84.9, 464.0], [85.0, 475.0], [85.1, 481.0], [85.2, 486.0], [85.3, 490.0], [85.4, 493.0], [85.5, 496.0], [85.6, 498.0], [85.7, 500.0], [85.8, 502.0], [85.9, 504.0], [86.0, 507.0], [86.1, 510.0], [86.2, 517.0], [86.3, 567.0], [86.4, 581.0], [86.5, 588.0], [86.6, 592.0], [86.7, 595.0], [86.8, 597.0], [86.9, 600.0], [87.0, 603.0], [87.1, 605.0], [87.2, 609.0], [87.3, 613.0], [87.4, 621.0], [87.5, 667.0], [87.6, 677.0], [87.7, 684.0], [87.8, 689.0], [87.9, 692.0], [88.0, 695.0], [88.1, 698.0], [88.2, 701.0], [88.3, 705.0], [88.4, 712.0], [88.5, 724.0], [88.6, 774.0], [88.7, 784.0], [88.8, 789.0], [88.9, 794.0], [89.0, 798.0], [89.1, 802.0], [89.2, 808.0], [89.3, 818.0], [89.4, 878.0], [89.5, 890.0], [89.6, 898.0], [89.7, 906.0], [89.8, 919.0], [89.9, 983.0], [90.0, 999.0], [90.1, 1006.0], [90.2, 1054.0], [90.3, 1090.0], [90.4, 1102.0], [90.5, 1112.0], [90.6, 1185.0], [90.7, 1199.0], [90.8, 1267.0], [90.9, 1296.0], [91.0, 1307.0], [91.1, 1340.0], [91.2, 1380.0], [91.3, 1386.0], [91.4, 1391.0], [91.5, 1396.0], [91.6, 1401.0], [91.7, 1407.0], [91.8, 1413.0], [91.9, 1458.0], [92.0, 1474.0], [92.1, 1482.0], [92.2, 1487.0], [92.3, 1493.0], [92.4, 1500.0], [92.5, 1506.0], [92.6, 1561.0], [92.7, 1581.0], [92.8, 1592.0], [92.9, 1605.0], [93.0, 1662.0], [93.1, 1684.0], [93.2, 1697.0], [93.3, 1706.0], [93.4, 1724.0], [93.5, 1781.0], [93.6, 1790.0], [93.7, 1795.0], [93.8, 1801.0], [93.9, 1810.0], [94.0, 1870.0], [94.1, 1882.0], [94.2, 1892.0], [94.3, 1900.0], [94.4, 1910.0], [94.5, 1964.0], [94.6, 1979.0], [94.7, 1990.0], [94.8, 1999.0], [94.9, 2007.0], [95.0, 2058.0], [95.1, 2083.0], [95.2, 2092.0], [95.3, 2100.0], [95.4, 2110.0], [95.5, 2173.0], [95.6, 2191.0], [95.7, 2205.0], [95.8, 2290.0], [95.9, 2316.0], [96.0, 2424.0], [96.1, 2503.0], [96.2, 2579.0], [96.3, 2594.0], [96.4, 2603.0], [96.5, 2670.0], [96.6, 2688.0], [96.7, 2708.0], [96.8, 2784.0], [96.9, 2797.0], [97.0, 2815.0], [97.1, 2889.0], [97.2, 2904.0], [97.3, 2988.0], [97.4, 3081.0], [97.5, 3111.0], [97.6, 3201.0], [97.7, 3574.0], [97.8, 4103.0], [97.9, 4811.0], [98.0, 5162.0], [98.1, 5270.0], [98.2, 5377.0], [98.3, 5475.0], [98.4, 5604.0], [98.5, 5885.0], [98.6, 6188.0], [98.7, 7471.0], [98.8, 8476.0], [98.9, 9558.0], [99.0, 10016.0], [99.1, 10083.0], [99.2, 10103.0], [99.3, 10162.0], [99.4, 10199.0], [99.5, 10259.0], [99.6, 10312.0], [99.7, 10403.0], [99.8, 10484.0], [99.9, 10794.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 11.0], [0.1, 12.0], [0.2, 12.0], [0.3, 12.0], [0.4, 12.0], [0.5, 12.0], [0.6, 12.0], [0.7, 12.0], [0.8, 13.0], [0.9, 13.0], [1.0, 13.0], [1.1, 13.0], [1.2, 13.0], [1.3, 13.0], [1.4, 13.0], [1.5, 13.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 13.0], [2.1, 13.0], [2.2, 13.0], [2.3, 13.0], [2.4, 13.0], [2.5, 13.0], [2.6, 13.0], [2.7, 13.0], [2.8, 13.0], [2.9, 13.0], [3.0, 13.0], [3.1, 13.0], [3.2, 14.0], [3.3, 14.0], [3.4, 14.0], [3.5, 14.0], [3.6, 14.0], [3.7, 14.0], [3.8, 14.0], [3.9, 14.0], [4.0, 14.0], [4.1, 14.0], [4.2, 14.0], [4.3, 14.0], [4.4, 14.0], [4.5, 14.0], [4.6, 14.0], [4.7, 14.0], [4.8, 14.0], [4.9, 14.0], [5.0, 14.0], [5.1, 14.0], [5.2, 14.0], [5.3, 14.0], [5.4, 14.0], [5.5, 14.0], [5.6, 14.0], [5.7, 14.0], [5.8, 14.0], [5.9, 14.0], [6.0, 14.0], [6.1, 14.0], [6.2, 14.0], [6.3, 14.0], [6.4, 14.0], [6.5, 14.0], [6.6, 14.0], [6.7, 14.0], [6.8, 14.0], [6.9, 14.0], [7.0, 14.0], [7.1, 14.0], [7.2, 14.0], [7.3, 15.0], [7.4, 15.0], [7.5, 15.0], [7.6, 15.0], [7.7, 15.0], [7.8, 15.0], [7.9, 15.0], [8.0, 15.0], [8.1, 15.0], [8.2, 15.0], [8.3, 15.0], [8.4, 15.0], [8.5, 15.0], [8.6, 15.0], [8.7, 15.0], [8.8, 15.0], [8.9, 15.0], [9.0, 15.0], [9.1, 15.0], [9.2, 15.0], [9.3, 15.0], [9.4, 15.0], [9.5, 15.0], [9.6, 15.0], [9.7, 15.0], [9.8, 15.0], [9.9, 15.0], [10.0, 15.0], [10.1, 15.0], [10.2, 15.0], [10.3, 15.0], [10.4, 15.0], [10.5, 15.0], [10.6, 15.0], [10.7, 15.0], [10.8, 15.0], [10.9, 15.0], [11.0, 15.0], [11.1, 15.0], [11.2, 15.0], [11.3, 15.0], [11.4, 15.0], [11.5, 15.0], [11.6, 15.0], [11.7, 15.0], [11.8, 15.0], [11.9, 15.0], [12.0, 15.0], [12.1, 15.0], [12.2, 15.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 16.0], [12.7, 16.0], [12.8, 16.0], [12.9, 16.0], [13.0, 16.0], [13.1, 16.0], [13.2, 16.0], [13.3, 16.0], [13.4, 16.0], [13.5, 16.0], [13.6, 16.0], [13.7, 16.0], [13.8, 16.0], [13.9, 16.0], [14.0, 16.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 16.0], [14.5, 16.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 16.0], [15.0, 16.0], [15.1, 16.0], [15.2, 16.0], [15.3, 16.0], [15.4, 16.0], [15.5, 16.0], [15.6, 16.0], [15.7, 16.0], [15.8, 16.0], [15.9, 16.0], [16.0, 16.0], [16.1, 16.0], [16.2, 16.0], [16.3, 16.0], [16.4, 16.0], [16.5, 16.0], [16.6, 16.0], [16.7, 16.0], [16.8, 16.0], [16.9, 16.0], [17.0, 16.0], [17.1, 16.0], [17.2, 16.0], [17.3, 16.0], [17.4, 16.0], [17.5, 16.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 17.0], [18.1, 17.0], [18.2, 17.0], [18.3, 17.0], [18.4, 17.0], [18.5, 17.0], [18.6, 17.0], [18.7, 17.0], [18.8, 17.0], [18.9, 17.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 17.0], [19.4, 17.0], [19.5, 17.0], [19.6, 17.0], [19.7, 17.0], [19.8, 17.0], [19.9, 17.0], [20.0, 17.0], [20.1, 17.0], [20.2, 17.0], [20.3, 17.0], [20.4, 17.0], [20.5, 17.0], [20.6, 17.0], [20.7, 17.0], [20.8, 17.0], [20.9, 17.0], [21.0, 17.0], [21.1, 17.0], [21.2, 17.0], [21.3, 17.0], [21.4, 17.0], [21.5, 17.0], [21.6, 17.0], [21.7, 17.0], [21.8, 17.0], [21.9, 17.0], [22.0, 17.0], [22.1, 17.0], [22.2, 17.0], [22.3, 17.0], [22.4, 17.0], [22.5, 18.0], [22.6, 18.0], [22.7, 18.0], [22.8, 18.0], [22.9, 18.0], [23.0, 18.0], [23.1, 18.0], [23.2, 18.0], [23.3, 18.0], [23.4, 18.0], [23.5, 18.0], [23.6, 18.0], [23.7, 18.0], [23.8, 18.0], [23.9, 18.0], [24.0, 18.0], [24.1, 18.0], [24.2, 18.0], [24.3, 18.0], [24.4, 18.0], [24.5, 18.0], [24.6, 18.0], [24.7, 18.0], [24.8, 18.0], [24.9, 18.0], [25.0, 18.0], [25.1, 18.0], [25.2, 18.0], [25.3, 18.0], [25.4, 18.0], [25.5, 18.0], [25.6, 18.0], [25.7, 18.0], [25.8, 18.0], [25.9, 18.0], [26.0, 18.0], [26.1, 19.0], [26.2, 19.0], [26.3, 19.0], [26.4, 19.0], [26.5, 19.0], [26.6, 19.0], [26.7, 19.0], [26.8, 19.0], [26.9, 19.0], [27.0, 19.0], [27.1, 19.0], [27.2, 19.0], [27.3, 19.0], [27.4, 19.0], [27.5, 19.0], [27.6, 19.0], [27.7, 19.0], [27.8, 19.0], [27.9, 19.0], [28.0, 19.0], [28.1, 19.0], [28.2, 19.0], [28.3, 19.0], [28.4, 19.0], [28.5, 19.0], [28.6, 19.0], [28.7, 19.0], [28.8, 19.0], [28.9, 20.0], [29.0, 20.0], [29.1, 20.0], [29.2, 20.0], [29.3, 20.0], [29.4, 20.0], [29.5, 20.0], [29.6, 20.0], [29.7, 20.0], [29.8, 20.0], [29.9, 20.0], [30.0, 20.0], [30.1, 20.0], [30.2, 20.0], [30.3, 20.0], [30.4, 20.0], [30.5, 20.0], [30.6, 20.0], [30.7, 20.0], [30.8, 20.0], [30.9, 20.0], [31.0, 20.0], [31.1, 21.0], [31.2, 21.0], [31.3, 21.0], [31.4, 21.0], [31.5, 21.0], [31.6, 21.0], [31.7, 21.0], [31.8, 21.0], [31.9, 21.0], [32.0, 21.0], [32.1, 21.0], [32.2, 21.0], [32.3, 21.0], [32.4, 21.0], [32.5, 21.0], [32.6, 21.0], [32.7, 22.0], [32.8, 22.0], [32.9, 22.0], [33.0, 22.0], [33.1, 22.0], [33.2, 22.0], [33.3, 22.0], [33.4, 22.0], [33.5, 22.0], [33.6, 22.0], [33.7, 22.0], [33.8, 22.0], [33.9, 22.0], [34.0, 23.0], [34.1, 23.0], [34.2, 23.0], [34.3, 23.0], [34.4, 23.0], [34.5, 23.0], [34.6, 23.0], [34.7, 23.0], [34.8, 23.0], [34.9, 24.0], [35.0, 24.0], [35.1, 24.0], [35.2, 24.0], [35.3, 24.0], [35.4, 24.0], [35.5, 24.0], [35.6, 24.0], [35.7, 25.0], [35.8, 25.0], [35.9, 25.0], [36.0, 25.0], [36.1, 25.0], [36.2, 26.0], [36.3, 26.0], [36.4, 26.0], [36.5, 26.0], [36.6, 26.0], [36.7, 27.0], [36.8, 27.0], [36.9, 27.0], [37.0, 27.0], [37.1, 28.0], [37.2, 28.0], [37.3, 28.0], [37.4, 29.0], [37.5, 29.0], [37.6, 29.0], [37.7, 30.0], [37.8, 30.0], [37.9, 31.0], [38.0, 31.0], [38.1, 32.0], [38.2, 33.0], [38.3, 33.0], [38.4, 34.0], [38.5, 36.0], [38.6, 37.0], [38.7, 38.0], [38.8, 39.0], [38.9, 41.0], [39.0, 42.0], [39.1, 44.0], [39.2, 45.0], [39.3, 46.0], [39.4, 48.0], [39.5, 49.0], [39.6, 50.0], [39.7, 51.0], [39.8, 52.0], [39.9, 53.0], [40.0, 54.0], [40.1, 56.0], [40.2, 57.0], [40.3, 58.0], [40.4, 59.0], [40.5, 59.0], [40.6, 60.0], [40.7, 61.0], [40.8, 62.0], [40.9, 62.0], [41.0, 63.0], [41.1, 64.0], [41.2, 64.0], [41.3, 65.0], [41.4, 65.0], [41.5, 66.0], [41.6, 66.0], [41.7, 67.0], [41.8, 67.0], [41.9, 67.0], [42.0, 68.0], [42.1, 68.0], [42.2, 68.0], [42.3, 69.0], [42.4, 69.0], [42.5, 70.0], [42.6, 70.0], [42.7, 71.0], [42.8, 71.0], [42.9, 72.0], [43.0, 72.0], [43.1, 72.0], [43.2, 73.0], [43.3, 73.0], [43.4, 73.0], [43.5, 74.0], [43.6, 74.0], [43.7, 74.0], [43.8, 75.0], [43.9, 75.0], [44.0, 75.0], [44.1, 75.0], [44.2, 76.0], [44.3, 76.0], [44.4, 76.0], [44.5, 77.0], [44.6, 77.0], [44.7, 77.0], [44.8, 78.0], [44.9, 78.0], [45.0, 78.0], [45.1, 78.0], [45.2, 79.0], [45.3, 79.0], [45.4, 79.0], [45.5, 79.0], [45.6, 80.0], [45.7, 80.0], [45.8, 80.0], [45.9, 80.0], [46.0, 81.0], [46.1, 81.0], [46.2, 81.0], [46.3, 81.0], [46.4, 82.0], [46.5, 82.0], [46.6, 82.0], [46.7, 82.0], [46.8, 82.0], [46.9, 83.0], [47.0, 83.0], [47.1, 83.0], [47.2, 83.0], [47.3, 83.0], [47.4, 84.0], [47.5, 84.0], [47.6, 84.0], [47.7, 84.0], [47.8, 84.0], [47.9, 85.0], [48.0, 85.0], [48.1, 85.0], [48.2, 85.0], [48.3, 85.0], [48.4, 85.0], [48.5, 85.0], [48.6, 86.0], [48.7, 86.0], [48.8, 86.0], [48.9, 86.0], [49.0, 86.0], [49.1, 86.0], [49.2, 86.0], [49.3, 87.0], [49.4, 87.0], [49.5, 87.0], [49.6, 87.0], [49.7, 87.0], [49.8, 87.0], [49.9, 87.0], [50.0, 88.0], [50.1, 88.0], [50.2, 88.0], [50.3, 88.0], [50.4, 88.0], [50.5, 88.0], [50.6, 88.0], [50.7, 88.0], [50.8, 89.0], [50.9, 89.0], [51.0, 89.0], [51.1, 89.0], [51.2, 89.0], [51.3, 89.0], [51.4, 89.0], [51.5, 89.0], [51.6, 89.0], [51.7, 90.0], [51.8, 90.0], [51.9, 90.0], [52.0, 90.0], [52.1, 90.0], [52.2, 90.0], [52.3, 90.0], [52.4, 90.0], [52.5, 90.0], [52.6, 90.0], [52.7, 90.0], [52.8, 91.0], [52.9, 91.0], [53.0, 91.0], [53.1, 91.0], [53.2, 91.0], [53.3, 91.0], [53.4, 91.0], [53.5, 91.0], [53.6, 91.0], [53.7, 91.0], [53.8, 92.0], [53.9, 92.0], [54.0, 92.0], [54.1, 92.0], [54.2, 92.0], [54.3, 92.0], [54.4, 92.0], [54.5, 92.0], [54.6, 92.0], [54.7, 92.0], [54.8, 92.0], [54.9, 93.0], [55.0, 93.0], [55.1, 93.0], [55.2, 93.0], [55.3, 93.0], [55.4, 93.0], [55.5, 93.0], [55.6, 93.0], [55.7, 93.0], [55.8, 93.0], [55.9, 94.0], [56.0, 94.0], [56.1, 94.0], [56.2, 94.0], [56.3, 94.0], [56.4, 94.0], [56.5, 94.0], [56.6, 94.0], [56.7, 94.0], [56.8, 94.0], [56.9, 94.0], [57.0, 94.0], [57.1, 94.0], [57.2, 95.0], [57.3, 95.0], [57.4, 95.0], [57.5, 95.0], [57.6, 95.0], [57.7, 95.0], [57.8, 95.0], [57.9, 95.0], [58.0, 95.0], [58.1, 95.0], [58.2, 95.0], [58.3, 96.0], [58.4, 96.0], [58.5, 96.0], [58.6, 96.0], [58.7, 96.0], [58.8, 96.0], [58.9, 96.0], [59.0, 96.0], [59.1, 96.0], [59.2, 96.0], [59.3, 96.0], [59.4, 97.0], [59.5, 97.0], [59.6, 97.0], [59.7, 97.0], [59.8, 97.0], [59.9, 97.0], [60.0, 97.0], [60.1, 97.0], [60.2, 97.0], [60.3, 97.0], [60.4, 97.0], [60.5, 98.0], [60.6, 98.0], [60.7, 98.0], [60.8, 98.0], [60.9, 98.0], [61.0, 98.0], [61.1, 98.0], [61.2, 98.0], [61.3, 98.0], [61.4, 98.0], [61.5, 98.0], [61.6, 98.0], [61.7, 98.0], [61.8, 99.0], [61.9, 99.0], [62.0, 99.0], [62.1, 99.0], [62.2, 99.0], [62.3, 99.0], [62.4, 99.0], [62.5, 99.0], [62.6, 99.0], [62.7, 99.0], [62.8, 99.0], [62.9, 99.0], [63.0, 99.0], [63.1, 100.0], [63.2, 100.0], [63.3, 100.0], [63.4, 100.0], [63.5, 100.0], [63.6, 100.0], [63.7, 100.0], [63.8, 100.0], [63.9, 100.0], [64.0, 100.0], [64.1, 100.0], [64.2, 100.0], [64.3, 100.0], [64.4, 101.0], [64.5, 101.0], [64.6, 101.0], [64.7, 101.0], [64.8, 101.0], [64.9, 101.0], [65.0, 101.0], [65.1, 101.0], [65.2, 101.0], [65.3, 101.0], [65.4, 101.0], [65.5, 101.0], [65.6, 102.0], [65.7, 102.0], [65.8, 102.0], [65.9, 102.0], [66.0, 102.0], [66.1, 102.0], [66.2, 102.0], [66.3, 102.0], [66.4, 103.0], [66.5, 103.0], [66.6, 103.0], [66.7, 103.0], [66.8, 103.0], [66.9, 103.0], [67.0, 103.0], [67.1, 103.0], [67.2, 104.0], [67.3, 104.0], [67.4, 104.0], [67.5, 104.0], [67.6, 104.0], [67.7, 105.0], [67.8, 105.0], [67.9, 105.0], [68.0, 105.0], [68.1, 105.0], [68.2, 106.0], [68.3, 106.0], [68.4, 106.0], [68.5, 106.0], [68.6, 107.0], [68.7, 107.0], [68.8, 107.0], [68.9, 108.0], [69.0, 108.0], [69.1, 108.0], [69.2, 109.0], [69.3, 109.0], [69.4, 110.0], [69.5, 110.0], [69.6, 111.0], [69.7, 111.0], [69.8, 112.0], [69.9, 113.0], [70.0, 113.0], [70.1, 114.0], [70.2, 115.0], [70.3, 116.0], [70.4, 118.0], [70.5, 119.0], [70.6, 122.0], [70.7, 125.0], [70.8, 129.0], [70.9, 136.0], [71.0, 146.0], [71.1, 156.0], [71.2, 161.0], [71.3, 164.0], [71.4, 166.0], [71.5, 168.0], [71.6, 170.0], [71.7, 173.0], [71.8, 174.0], [71.9, 176.0], [72.0, 178.0], [72.1, 179.0], [72.2, 180.0], [72.3, 181.0], [72.4, 182.0], [72.5, 183.0], [72.6, 184.0], [72.7, 184.0], [72.8, 185.0], [72.9, 186.0], [73.0, 187.0], [73.1, 188.0], [73.2, 188.0], [73.3, 189.0], [73.4, 190.0], [73.5, 191.0], [73.6, 191.0], [73.7, 192.0], [73.8, 193.0], [73.9, 194.0], [74.0, 195.0], [74.1, 196.0], [74.2, 197.0], [74.3, 197.0], [74.4, 198.0], [74.5, 199.0], [74.6, 200.0], [74.7, 201.0], [74.8, 202.0], [74.9, 202.0], [75.0, 203.0], [75.1, 204.0], [75.2, 206.0], [75.3, 207.0], [75.4, 209.0], [75.5, 210.0], [75.6, 211.0], [75.7, 212.0], [75.8, 215.0], [75.9, 218.0], [76.0, 221.0], [76.1, 226.0], [76.2, 243.0], [76.3, 263.0], [76.4, 271.0], [76.5, 277.0], [76.6, 281.0], [76.7, 283.0], [76.8, 286.0], [76.9, 287.0], [77.0, 289.0], [77.1, 290.0], [77.2, 292.0], [77.3, 293.0], [77.4, 294.0], [77.5, 295.0], [77.6, 296.0], [77.7, 297.0], [77.8, 298.0], [77.9, 299.0], [78.0, 300.0], [78.1, 301.0], [78.2, 302.0], [78.3, 303.0], [78.4, 304.0], [78.5, 305.0], [78.6, 307.0], [78.7, 309.0], [78.8, 312.0], [78.9, 314.0], [79.0, 319.0], [79.1, 328.0], [79.2, 354.0], [79.3, 373.0], [79.4, 378.0], [79.5, 383.0], [79.6, 386.0], [79.7, 388.0], [79.8, 390.0], [79.9, 393.0], [80.0, 394.0], [80.1, 396.0], [80.2, 397.0], [80.3, 399.0], [80.4, 401.0], [80.5, 402.0], [80.6, 404.0], [80.7, 406.0], [80.8, 408.0], [80.9, 411.0], [81.0, 414.0], [81.1, 420.0], [81.2, 432.0], [81.3, 469.0], [81.4, 478.0], [81.5, 485.0], [81.6, 489.0], [81.7, 492.0], [81.8, 494.0], [81.9, 497.0], [82.0, 499.0], [82.1, 501.0], [82.2, 504.0], [82.3, 507.0], [82.4, 509.0], [82.5, 513.0], [82.6, 518.0], [82.7, 527.0], [82.8, 578.0], [82.9, 586.0], [83.0, 589.0], [83.1, 593.0], [83.2, 596.0], [83.3, 599.0], [83.4, 601.0], [83.5, 603.0], [83.6, 605.0], [83.7, 608.0], [83.8, 610.0], [83.9, 614.0], [84.0, 623.0], [84.1, 648.0], [84.2, 676.0], [84.3, 684.0], [84.4, 688.0], [84.5, 692.0], [84.6, 694.0], [84.7, 696.0], [84.8, 698.0], [84.9, 700.0], [85.0, 702.0], [85.1, 704.0], [85.2, 706.0], [85.3, 711.0], [85.4, 720.0], [85.5, 763.0], [85.6, 783.0], [85.7, 788.0], [85.8, 792.0], [85.9, 796.0], [86.0, 800.0], [86.1, 802.0], [86.2, 805.0], [86.3, 808.0], [86.4, 814.0], [86.5, 853.0], [86.6, 883.0], [86.7, 894.0], [86.8, 898.0], [86.9, 904.0], [87.0, 912.0], [87.1, 958.0], [87.2, 994.0], [87.3, 1006.0], [87.4, 1017.0], [87.5, 1075.0], [87.6, 1094.0], [87.7, 1106.0], [87.8, 1125.0], [87.9, 1195.0], [88.0, 1206.0], [88.1, 1220.0], [88.2, 1292.0], [88.3, 1303.0], [88.4, 1314.0], [88.5, 1346.0], [88.6, 1389.0], [88.7, 1394.0], [88.8, 1399.0], [88.9, 1402.0], [89.0, 1405.0], [89.1, 1408.0], [89.2, 1411.0], [89.3, 1416.0], [89.4, 1426.0], [89.5, 1477.0], [89.6, 1483.0], [89.7, 1488.0], [89.8, 1491.0], [89.9, 1496.0], [90.0, 1499.0], [90.1, 1503.0], [90.2, 1506.0], [90.3, 1512.0], [90.4, 1524.0], [90.5, 1578.0], [90.6, 1587.0], [90.7, 1591.0], [90.8, 1597.0], [90.9, 1602.0], [91.0, 1610.0], [91.1, 1630.0], [91.2, 1682.0], [91.3, 1691.0], [91.4, 1700.0], [91.5, 1712.0], [91.6, 1779.0], [91.7, 1788.0], [91.8, 1795.0], [91.9, 1799.0], [92.0, 1805.0], [92.1, 1810.0], [92.2, 1820.0], [92.3, 1875.0], [92.4, 1883.0], [92.5, 1890.0], [92.6, 1894.0], [92.7, 1901.0], [92.8, 1907.0], [92.9, 1968.0], [93.0, 1982.0], [93.1, 1988.0], [93.2, 1993.0], [93.3, 1999.0], [93.4, 2005.0], [93.5, 2014.0], [93.6, 2076.0], [93.7, 2089.0], [93.8, 2094.0], [93.9, 2100.0], [94.0, 2106.0], [94.1, 2116.0], [94.2, 2183.0], [94.3, 2191.0], [94.4, 2199.0], [94.5, 2210.0], [94.6, 2295.0], [94.7, 2306.0], [94.8, 2393.0], [94.9, 2490.0], [95.0, 2511.0], [95.1, 2590.0], [95.2, 2600.0], [95.3, 2612.0], [95.4, 2674.0], [95.5, 2689.0], [95.6, 2697.0], [95.7, 2710.0], [95.8, 2783.0], [95.9, 2800.0], [96.0, 2808.0], [96.1, 2866.0], [96.2, 2888.0], [96.3, 2899.0], [96.4, 2911.0], [96.5, 2995.0], [96.6, 3020.0], [96.7, 3101.0], [96.8, 3170.0], [96.9, 3206.0], [97.0, 3573.0], [97.1, 4184.0], [97.2, 4880.0], [97.3, 5071.0], [97.4, 5173.0], [97.5, 5217.0], [97.6, 5301.0], [97.7, 5387.0], [97.8, 5471.0], [97.9, 5552.0], [98.0, 5794.0], [98.1, 6001.0], [98.2, 6324.0], [98.3, 7812.0], [98.4, 8492.0], [98.5, 9375.0], [98.6, 9706.0], [98.7, 10012.0], [98.8, 10077.0], [98.9, 10108.0], [99.0, 10122.0], [99.1, 10191.0], [99.2, 10208.0], [99.3, 10231.0], [99.4, 10296.0], [99.5, 10334.0], [99.6, 10408.0], [99.7, 10463.0], [99.8, 10591.0], [99.9, 11021.0], [100.0, 19844.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 27790.0, "series": [{"data": [[0.0, 27790.0], [100.0, 2191.0], [200.0, 1055.0], [300.0, 769.0], [400.0, 569.0], [500.0, 457.0], [600.0, 480.0], [700.0, 331.0], [800.0, 229.0], [900.0, 142.0], [1000.0, 141.0], [1100.0, 121.0], [1200.0, 83.0], [1300.0, 248.0], [1400.0, 311.0], [1500.0, 174.0], [1600.0, 141.0], [1700.0, 205.0], [1800.0, 197.0], [1900.0, 191.0], [2000.0, 183.0], [2100.0, 141.0], [2200.0, 71.0], [2300.0, 46.0], [2400.0, 45.0], [2500.0, 104.0], [2600.0, 104.0], [2700.0, 106.0], [2800.0, 97.0], [2900.0, 63.0], [3000.0, 44.0], [3100.0, 51.0], [3200.0, 21.0], [3300.0, 12.0], [3400.0, 2.0], [3500.0, 8.0], [3700.0, 2.0], [3600.0, 2.0], [3800.0, 6.0], [3900.0, 9.0], [4000.0, 13.0], [4100.0, 14.0], [4300.0, 1.0], [4200.0, 3.0], [4600.0, 3.0], [4500.0, 2.0], [4700.0, 15.0], [4800.0, 12.0], [4900.0, 8.0], [5000.0, 14.0], [5100.0, 26.0], [5200.0, 39.0], [5300.0, 33.0], [5400.0, 39.0], [5500.0, 18.0], [5600.0, 19.0], [5700.0, 13.0], [5800.0, 14.0], [5900.0, 16.0], [6000.0, 12.0], [6100.0, 4.0], [6200.0, 13.0], [6300.0, 9.0], [6400.0, 2.0], [6500.0, 1.0], [6800.0, 2.0], [6900.0, 1.0], [7100.0, 3.0], [7000.0, 1.0], [7400.0, 1.0], [7200.0, 2.0], [7300.0, 3.0], [7500.0, 6.0], [7600.0, 4.0], [7700.0, 5.0], [7800.0, 3.0], [7900.0, 3.0], [8100.0, 3.0], [8000.0, 2.0], [8400.0, 4.0], [8200.0, 5.0], [8500.0, 3.0], [8300.0, 3.0], [8700.0, 1.0], [8600.0, 2.0], [9100.0, 5.0], [9200.0, 2.0], [8900.0, 1.0], [9000.0, 2.0], [8800.0, 1.0], [9700.0, 5.0], [9500.0, 7.0], [9400.0, 12.0], [9300.0, 5.0], [9600.0, 4.0], [10200.0, 55.0], [10100.0, 82.0], [10000.0, 82.0], [9900.0, 8.0], [9800.0, 5.0], [10300.0, 52.0], [10400.0, 56.0], [10600.0, 11.0], [10500.0, 14.0], [10700.0, 2.0], [10900.0, 5.0], [11100.0, 3.0], [11000.0, 2.0], [11200.0, 2.0], [10800.0, 5.0], [11300.0, 1.0], [11600.0, 1.0], [11400.0, 1.0], [12200.0, 1.0], [12000.0, 1.0], [12700.0, 1.0], [14800.0, 1.0], [16100.0, 1.0], [18000.0, 2.0], [18100.0, 1.0], [18300.0, 1.0], [18700.0, 1.0], [19100.0, 1.0], [19600.0, 1.0], [20200.0, 1.0], [20300.0, 1.0], [20400.0, 1.0], [19900.0, 1.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[0.0, 23967.0], [100.0, 4383.0], [200.0, 1292.0], [300.0, 906.0], [400.0, 637.0], [500.0, 500.0], [600.0, 591.0], [700.0, 419.0], [800.0, 318.0], [900.0, 154.0], [1000.0, 154.0], [1100.0, 115.0], [1200.0, 121.0], [1300.0, 216.0], [1400.0, 453.0], [1500.0, 311.0], [1600.0, 209.0], [1700.0, 195.0], [1800.0, 301.0], [1900.0, 236.0], [2000.0, 217.0], [2100.0, 199.0], [2200.0, 92.0], [2300.0, 64.0], [2400.0, 45.0], [2500.0, 100.0], [2600.0, 159.0], [2800.0, 155.0], [2700.0, 106.0], [2900.0, 78.0], [3000.0, 69.0], [3100.0, 56.0], [3200.0, 42.0], [3300.0, 10.0], [3400.0, 4.0], [3500.0, 8.0], [3700.0, 1.0], [3600.0, 1.0], [3800.0, 5.0], [3900.0, 7.0], [4000.0, 12.0], [4100.0, 14.0], [4200.0, 1.0], [4300.0, 1.0], [4600.0, 5.0], [4500.0, 1.0], [4400.0, 1.0], [4700.0, 15.0], [4800.0, 18.0], [4900.0, 21.0], [5000.0, 25.0], [5100.0, 44.0], [5200.0, 53.0], [5300.0, 54.0], [5400.0, 54.0], [5500.0, 23.0], [5600.0, 15.0], [5700.0, 9.0], [5800.0, 14.0], [5900.0, 21.0], [6000.0, 12.0], [6100.0, 12.0], [6300.0, 15.0], [6200.0, 6.0], [6400.0, 4.0], [6500.0, 1.0], [6600.0, 1.0], [6900.0, 2.0], [6800.0, 2.0], [7000.0, 2.0], [7300.0, 5.0], [7400.0, 2.0], [7200.0, 3.0], [7500.0, 3.0], [7600.0, 3.0], [7800.0, 6.0], [7900.0, 6.0], [8000.0, 5.0], [8100.0, 1.0], [8500.0, 7.0], [8200.0, 9.0], [8400.0, 13.0], [8300.0, 2.0], [8600.0, 3.0], [8700.0, 3.0], [9200.0, 7.0], [9100.0, 5.0], [8800.0, 2.0], [8900.0, 4.0], [9000.0, 2.0], [9400.0, 17.0], [9600.0, 3.0], [9700.0, 6.0], [9300.0, 8.0], [9500.0, 13.0], [9800.0, 19.0], [9900.0, 11.0], [10200.0, 100.0], [10100.0, 108.0], [10000.0, 62.0], [10300.0, 66.0], [10700.0, 13.0], [10400.0, 65.0], [10600.0, 8.0], [10500.0, 25.0], [11200.0, 2.0], [11000.0, 7.0], [10800.0, 5.0], [10900.0, 5.0], [11100.0, 2.0], [11400.0, 3.0], [11900.0, 1.0], [12100.0, 1.0], [11800.0, 1.0], [12500.0, 2.0], [12400.0, 1.0], [12900.0, 1.0], [13100.0, 1.0], [13500.0, 1.0], [14500.0, 1.0], [15800.0, 1.0], [15600.0, 1.0], [15500.0, 1.0], [15900.0, 1.0], [16300.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [16800.0, 1.0], [17100.0, 1.0], [17600.0, 3.0], [18600.0, 1.0], [19200.0, 1.0], [19700.0, 1.0], [19800.0, 1.0], [19500.0, 1.0]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 600.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 63595.0, "series": [{"data": [[0.0, 63595.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5559.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6055.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 600.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 63.451779407769656, "minX": 1.62502158E12, "maxY": 256.0, "series": [{"data": [[1.6250217E12, 256.0], [1.62502176E12, 253.8753297706827], [1.62502164E12, 253.36539612851595]], "isOverall": false, "label": "JavaTest_peek", "isController": false}, {"data": [[1.62502176E12, 63.84012663237069], [1.62502182E12, 63.69810526315787]], "isOverall": false, "label": "JavaTest_cool", "isController": false}, {"data": [[1.62502158E12, 64.0], [1.62502164E12, 63.451779407769656]], "isOverall": false, "label": "JavaTest_warm", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502182E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "maxY": 19908.0, "series": [{"data": [[2.0, 18017.0], [5.0, 10627.0], [7.0, 5987.0], [8.0, 1179.0], [9.0, 1109.0], [11.0, 8486.4], [12.0, 5631.0], [13.0, 1082.0], [14.0, 1006.0], [15.0, 1043.0], [16.0, 8691.0], [19.0, 977.0], [20.0, 10831.5], [21.0, 10690.0], [23.0, 7.0], [24.0, 914.0], [25.0, 7.0], [27.0, 7061.333333333333], [28.0, 492.5], [30.0, 897.0], [31.0, 302.33333333333337], [35.0, 9.666666666666666], [37.0, 7280.166666666667], [39.0, 108.66666666666664], [38.0, 303.33333333333337], [41.0, 892.0], [40.0, 6308.2], [43.0, 823.0], [42.0, 3629.6666666666665], [45.0, 334.0], [44.0, 11.5], [46.0, 16.5], [47.0, 81.0], [49.0, 942.0], [48.0, 28.999999999999996], [53.0, 229.74999999999997], [52.0, 10.5], [55.0, 491.5], [54.0, 454.5], [57.0, 494.5], [56.0, 979.0], [58.0, 30.0], [59.0, 19.8], [61.0, 203.2857142857143], [60.0, 45.5], [62.0, 46.75], [64.0, 144.7051902457542], [70.0, 10203.0], [74.0, 10340.75], [73.0, 10269.666666666666], [77.0, 10719.0], [76.0, 10522.333333333334], [83.0, 10717.0], [95.0, 108.5], [96.0, 46.36363636363636], [102.0, 10241.0], [106.0, 15.0], [105.0, 10305.0], [110.0, 10305.0], [109.0, 10225.666666666666], [117.0, 10089.0], [116.0, 10359.75], [122.0, 4995.5], [125.0, 9807.0], [124.0, 9895.0], [133.0, 9587.0], [132.0, 9676.0], [143.0, 9375.0], [140.0, 9452.0], [139.0, 9459.0], [138.0, 9461.0], [136.0, 9506.0], [151.0, 9410.0], [150.0, 9481.0], [149.0, 9492.0], [144.0, 9376.0], [159.0, 9191.0], [158.0, 9283.0], [156.0, 9383.0], [155.0, 19908.0], [153.0, 9474.0], [164.0, 9009.0], [162.0, 9391.0], [175.0, 8872.0], [174.0, 8380.0], [183.0, 8222.0], [179.0, 8287.0], [178.0, 9409.0], [177.0, 8293.0], [176.0, 9426.0], [189.0, 8411.5], [199.0, 8369.0], [198.0, 7984.0], [197.0, 7982.0], [192.0, 19122.0], [200.0, 205.0], [206.0, 167.0], [207.0, 4214.5], [202.0, 7902.0], [209.0, 201.0], [210.0, 4863.0], [213.0, 104.0], [215.0, 152.0], [214.0, 7895.0], [217.0, 33.857142857142854], [222.0, 18796.0], [219.0, 8079.0], [216.0, 7810.0], [231.0, 7683.0], [228.0, 7737.5], [226.0, 7707.0], [239.0, 18388.0], [238.0, 7559.0], [237.0, 7568.0], [234.0, 7599.0], [233.0, 7607.0], [232.0, 7588.0], [246.0, 84.0], [247.0, 119.0], [245.0, 18058.0], [241.0, 7471.0], [240.0, 18142.0], [248.0, 81.63636363636363], [252.0, 60.333333333333336], [254.0, 163.0], [255.0, 64.0], [253.0, 23.5], [250.0, 45.5], [249.0, 72.0], [256.0, 484.6014836795257]], "isOverall": false, "label": "post", "isController": false}, {"data": [[201.4011220196359, 417.2468443197777]], "isOverall": false, "label": "post-Aggregated", "isController": false}, {"data": [[2.0, 13312.0], [3.0, 15381.666666666666], [4.0, 9054.5], [5.0, 8958.5], [6.0, 9236.0], [8.0, 10992.0], [9.0, 10463.0], [10.0, 1152.0], [11.0, 10528.0], [14.0, 10130.0], [15.0, 13148.0], [16.0, 981.0], [17.0, 4732.5], [18.0, 3157.6666666666665], [19.0, 8480.0], [20.0, 8853.1], [21.0, 981.0], [22.0, 912.0], [23.0, 172.83333333333331], [24.0, 24.333333333333332], [25.0, 507.5], [26.0, 988.0], [27.0, 8530.0], [28.0, 3461.6666666666665], [29.0, 2283.333333333333], [31.0, 30.75], [33.0, 900.0], [32.0, 204.40000000000003], [35.0, 146.125], [34.0, 1157.1999999999998], [36.0, 899.0], [37.0, 9985.214285714284], [38.0, 34.5], [39.0, 20.4], [40.0, 8013.777777777777], [41.0, 10131.0], [42.0, 19.0], [43.0, 4988.5], [44.0, 3573.0], [45.0, 22.0], [47.0, 475.5], [46.0, 239.49999999999997], [48.0, 127.00000000000001], [49.0, 42.25], [51.0, 360.66666666666663], [50.0, 908.0], [52.0, 237.75000000000003], [53.0, 14.75], [55.0, 17.0], [54.0, 23.0], [57.0, 26.6], [56.0, 16.0], [59.0, 235.8], [58.0, 34.8], [61.0, 968.0], [60.0, 281.75], [62.0, 40.0], [63.0, 87.5], [64.0, 199.60181508791763], [68.0, 24.5], [69.0, 10196.0], [74.0, 10316.5], [73.0, 10208.333333333334], [77.0, 10433.0], [76.0, 10704.333333333334], [83.0, 10828.214285714286], [82.0, 11038.0], [85.0, 20.0], [91.0, 22.5], [92.0, 19.0], [94.0, 5073.0], [95.0, 86.61538461538461], [96.0, 112.27272727272728], [99.0, 36.0], [98.0, 10323.0], [101.0, 49.0], [103.0, 10287.666666666666], [102.0, 10122.0], [106.0, 10140.0], [110.0, 10022.0], [109.0, 10219.0], [117.0, 26.0], [118.0, 3358.6666666666665], [119.0, 10078.0], [116.0, 10401.875000000002], [123.0, 9916.0], [121.0, 10001.0], [120.0, 10085.0], [127.0, 9890.0], [126.0, 9895.0], [130.0, 3248.3333333333335], [135.0, 9513.0], [134.0, 9599.0], [131.0, 9706.0], [129.0, 9803.0], [128.0, 9805.0], [143.0, 9375.0], [141.0, 9471.0], [137.0, 9554.0], [148.0, 9504.0], [147.0, 9407.0], [146.0, 9300.0], [145.0, 9314.0], [157.0, 9403.0], [154.0, 9493.0], [152.0, 9489.0], [167.0, 9090.0], [166.0, 9409.0], [165.0, 8509.0], [163.0, 9402.0], [161.0, 9111.0], [160.0, 9204.0], [173.0, 8411.0], [172.0, 8979.0], [171.0, 9006.0], [170.0, 8491.0], [169.0, 8420.0], [168.0, 8424.0], [182.0, 8222.0], [181.0, 8794.0], [180.0, 8813.0], [184.0, 2961.0], [187.0, 4127.0], [191.0, 4612.5], [190.0, 8667.0], [186.0, 8706.0], [185.0, 8257.0], [197.0, 42.0], [198.0, 36.0], [196.0, 8020.0], [195.0, 8075.0], [194.0, 8082.0], [193.0, 8090.0], [200.0, 4056.5], [201.0, 4206.5], [203.0, 4051.0], [206.0, 8301.0], [205.0, 7970.0], [204.0, 8285.0], [209.0, 1428.8571428571427], [211.0, 2061.75], [213.0, 2116.25], [214.0, 205.0], [215.0, 8200.0], [212.0, 7910.0], [208.0, 9558.0], [217.0, 2106.0], [221.0, 45.0], [223.0, 7812.0], [222.0, 7803.0], [220.0, 8036.0], [218.0, 7888.0], [229.0, 3873.0], [231.0, 7696.0], [225.0, 7801.0], [224.0, 7803.0], [232.0, 56.0], [236.0, 7588.0], [246.0, 62.0], [247.0, 116.59999999999998], [244.0, 7398.0], [243.0, 7379.0], [242.0, 7387.0], [248.0, 135.16666666666666], [251.0, 93.9090909090909], [252.0, 193.0], [254.0, 202.4782608695652], [255.0, 155.0], [253.0, 38.3], [256.0, 608.0274297575811], [1.0, 15290.666666666666]], "isOverall": false, "label": "get", "isController": false}, {"data": [[200.85323513940043, 535.6820620725948]], "isOverall": false, "label": "get-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 256.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1577.8166666666666, "minX": 1.62502158E12, "maxY": 120845.05, "series": [{"data": [[1.6250217E12, 120845.05], [1.62502158E12, 1714.4333333333334], [1.62502176E12, 103738.06666666667], [1.62502182E12, 29298.55], [1.62502164E12, 56130.76666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6250217E12, 113245.68333333333], [1.62502158E12, 1577.8166666666666], [1.62502176E12, 94921.65], [1.62502182E12, 27170.75], [1.62502164E12, 52190.78333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502182E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 135.33905941988164, "minX": 1.62502158E12, "maxY": 854.782222222222, "series": [{"data": [[1.6250217E12, 471.18491812116554], [1.62502158E12, 502.17346938775506], [1.62502176E12, 350.0351442850226], [1.62502182E12, 135.33905941988164], [1.62502164E12, 566.9967632779168]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.6250217E12, 594.4336480107901], [1.62502158E12, 854.782222222222], [1.62502176E12, 446.9742891469752], [1.62502182E12, 254.7811975377725], [1.62502164E12, 704.8643208803958]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502182E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 135.33624331174315, "minX": 1.62502158E12, "maxY": 854.5555555555555, "series": [{"data": [[1.6250217E12, 471.1802682121405], [1.62502158E12, 502.10714285714295], [1.62502176E12, 350.03079155247536], [1.62502182E12, 135.33624331174315], [1.62502164E12, 566.9899955862882]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.6250217E12, 594.4313553607575], [1.62502158E12, 854.5555555555555], [1.62502176E12, 446.97004405286225], [1.62502182E12, 254.77783995523225], [1.62502164E12, 704.8583840138972]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502182E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62502158E12, "maxY": 377.1244444444441, "series": [{"data": [[1.6250217E12, 0.0], [1.62502158E12, 0.0], [1.62502176E12, 0.0], [1.62502182E12, 0.0], [1.62502164E12, 0.0]], "isOverall": false, "label": "post", "isController": false}, {"data": [[1.6250217E12, 11.258664868509802], [1.62502158E12, 377.1244444444441], [1.62502176E12, 11.20648778534239], [1.62502182E12, 10.168998321208743], [1.62502164E12, 11.453084274543846]], "isOverall": false, "label": "get", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502182E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.62502158E12, "maxY": 20496.0, "series": [{"data": [[1.6250217E12, 19844.0], [1.62502158E12, 1996.0], [1.62502176E12, 20496.0], [1.62502182E12, 19295.0], [1.62502164E12, 12234.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6250217E12, 1792.9000000000015], [1.62502158E12, 1403.8], [1.62502176E12, 112.0], [1.62502182E12, 100.0], [1.62502164E12, 1691.6000000000022]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6250217E12, 2818.9900000000016], [1.62502158E12, 1904.78], [1.62502176E12, 8292.94000000001], [1.62502182E12, 275.0], [1.62502164E12, 10088.63]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6250217E12, 2104.0], [1.62502158E12, 1679.4999999999982], [1.62502176E12, 201.0], [1.62502182E12, 109.0], [1.62502164E12, 2673.1499999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6250217E12, 4.0], [1.62502158E12, 8.0], [1.62502176E12, 4.0], [1.62502182E12, 4.0], [1.62502164E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6250217E12, 97.0], [1.62502158E12, 578.0], [1.62502176E12, 20.0], [1.62502182E12, 21.0], [1.62502164E12, 87.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502182E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 17429.5, "series": [{"data": [[3.0, 13351.0], [11.0, 8487.0], [13.0, 11441.5], [17.0, 7588.0], [27.0, 9705.0], [37.0, 9283.0], [46.0, 959.5], [47.0, 8079.0], [55.0, 18.0], [56.0, 888.0], [67.0, 76.0], [75.0, 887.0], [79.0, 19.0], [81.0, 818.0], [80.0, 675.0], [84.0, 789.5], [85.0, 705.0], [91.0, 631.0], [88.0, 700.0], [97.0, 695.5], [101.0, 575.0], [108.0, 593.5], [118.0, 516.0], [116.0, 522.5], [122.0, 90.0], [125.0, 496.0], [127.0, 497.0], [143.0, 395.0], [144.0, 89.5], [161.0, 390.0], [172.0, 14.0], [180.0, 308.0], [185.0, 98.5], [186.0, 14.0], [231.0, 1316.0], [226.0, 13.0], [232.0, 291.0], [236.0, 1406.0], [241.0, 1296.0], [269.0, 64.0], [260.0, 1109.0], [271.0, 20.0], [262.0, 17.0], [265.0, 14.0], [266.0, 15.0], [274.0, 302.0], [278.0, 165.5], [272.0, 1063.5], [279.0, 90.0], [302.0, 297.5], [297.0, 95.0], [303.0, 20.0], [298.0, 16.0], [304.0, 604.0], [319.0, 378.0], [316.0, 96.0], [312.0, 18.0], [317.0, 93.0], [313.0, 16.0], [307.0, 15.0], [314.0, 15.0], [323.0, 93.0], [327.0, 15.0], [344.0, 84.0], [351.0, 97.0], [346.0, 18.0], [357.0, 205.0], [356.0, 20.0], [366.0, 87.0], [362.0, 99.0], [352.0, 86.0], [369.0, 27.0], [383.0, 16.0], [370.0, 98.0], [372.0, 99.5], [384.0, 436.5], [392.0, 17.0], [396.0, 79.5], [394.0, 15.0], [400.0, 17.0], [403.0, 64.0], [401.0, 18.0], [431.0, 20.0], [429.0, 15.0], [422.0, 16.0], [437.0, 15.0], [442.0, 17.0], [433.0, 15.0], [436.0, 96.0], [444.0, 16.0], [432.0, 17.0], [455.0, 63.0], [462.0, 86.0], [449.0, 19.0], [458.0, 15.0], [459.0, 16.0], [451.0, 16.0], [467.0, 18.0], [477.0, 69.5], [464.0, 16.0], [476.0, 16.0], [470.0, 94.0], [468.0, 390.5], [465.0, 17.0], [487.0, 80.0], [485.0, 27.0], [491.0, 81.0], [480.0, 54.5], [486.0, 16.0], [500.0, 17.0], [511.0, 19.0], [508.0, 16.0], [510.0, 79.5], [505.0, 82.0], [498.0, 502.5], [506.0, 495.0], [504.0, 80.0], [528.0, 17.0], [529.0, 87.0], [539.0, 85.0], [531.0, 103.0], [521.0, 501.0], [513.0, 104.0], [523.0, 15.0], [532.0, 17.0], [518.0, 19.0], [569.0, 15.0], [560.0, 23.0], [565.0, 16.0], [559.0, 96.0], [544.0, 17.0], [564.0, 17.0], [546.0, 15.0], [572.0, 84.0], [574.0, 20.0], [556.0, 24.0], [590.0, 90.5], [585.0, 98.0], [584.0, 69.5], [592.0, 82.0], [598.0, 100.0], [594.0, 194.5], [589.0, 89.0], [602.0, 100.0], [581.0, 90.0], [601.0, 91.0], [580.0, 190.5], [577.0, 396.0], [591.0, 23.0], [604.0, 87.0], [603.0, 20.0], [606.0, 98.0], [607.0, 95.0], [613.0, 105.0], [627.0, 19.0], [614.0, 21.0], [628.0, 70.0], [667.0, 95.0], [656.0, 23.0], [683.0, 16.0], [686.0, 46.0], [676.0, 21.0], [702.0, 31.0], [727.0, 97.0], [713.0, 81.0], [735.0, 68.5], [747.0, 91.0], [737.0, 88.0], [739.0, 70.0], [770.0, 79.0], [808.0, 124.0], [1.0, 17429.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 10627.0], [565.0, 10194.0], [556.0, 10204.0], [574.0, 10202.0], [604.0, 10389.0], [627.0, 10399.5], [628.0, 10280.0], [667.0, 10294.0], [702.0, 10317.0], [735.0, 10221.0], [3.0, 10658.0], [808.0, 10301.0], [4.0, 10214.0], [80.0, 10416.0], [6.0, 10256.5], [122.0, 701.0], [180.0, 294.0], [11.0, 10466.0], [13.0, 10344.0], [1.0, 10867.0], [400.0, 10118.0], [429.0, 10780.0], [26.0, 10728.5], [437.0, 10171.5], [442.0, 10046.0], [464.0, 10340.5], [480.0, 10304.0], [486.0, 10723.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 808.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 1.0, "maxY": 17429.5, "series": [{"data": [[3.0, 13351.0], [11.0, 8487.0], [13.0, 11441.5], [17.0, 7588.0], [27.0, 9705.0], [37.0, 9283.0], [46.0, 959.5], [47.0, 8079.0], [55.0, 18.0], [56.0, 888.0], [67.0, 76.0], [75.0, 887.0], [79.0, 19.0], [81.0, 818.0], [80.0, 675.0], [84.0, 789.5], [85.0, 705.0], [91.0, 631.0], [88.0, 700.0], [97.0, 695.5], [101.0, 575.0], [108.0, 593.5], [118.0, 516.0], [116.0, 522.5], [122.0, 90.0], [125.0, 496.0], [127.0, 497.0], [143.0, 395.0], [144.0, 89.5], [161.0, 390.0], [172.0, 14.0], [180.0, 308.0], [185.0, 98.5], [186.0, 14.0], [231.0, 1316.0], [226.0, 13.0], [232.0, 291.0], [236.0, 1406.0], [241.0, 1296.0], [269.0, 64.0], [260.0, 1109.0], [271.0, 20.0], [262.0, 17.0], [265.0, 14.0], [266.0, 15.0], [274.0, 302.0], [278.0, 165.5], [272.0, 1063.5], [279.0, 90.0], [302.0, 297.5], [297.0, 95.0], [303.0, 20.0], [298.0, 16.0], [304.0, 604.0], [319.0, 378.0], [316.0, 96.0], [312.0, 18.0], [317.0, 93.0], [313.0, 16.0], [307.0, 15.0], [314.0, 15.0], [323.0, 93.0], [327.0, 15.0], [344.0, 84.0], [351.0, 97.0], [346.0, 18.0], [357.0, 205.0], [356.0, 20.0], [366.0, 87.0], [362.0, 99.0], [352.0, 86.0], [369.0, 27.0], [383.0, 16.0], [370.0, 98.0], [372.0, 99.5], [384.0, 436.5], [392.0, 17.0], [396.0, 79.5], [394.0, 15.0], [400.0, 17.0], [403.0, 64.0], [401.0, 18.0], [431.0, 20.0], [429.0, 15.0], [422.0, 16.0], [437.0, 15.0], [442.0, 17.0], [433.0, 15.0], [436.0, 96.0], [444.0, 16.0], [432.0, 17.0], [455.0, 63.0], [462.0, 86.0], [449.0, 19.0], [458.0, 15.0], [459.0, 16.0], [451.0, 16.0], [467.0, 18.0], [477.0, 69.5], [464.0, 16.0], [476.0, 16.0], [470.0, 94.0], [468.0, 390.5], [465.0, 17.0], [487.0, 80.0], [485.0, 26.5], [491.0, 81.0], [480.0, 54.5], [486.0, 16.0], [500.0, 17.0], [511.0, 19.0], [508.0, 16.0], [510.0, 79.5], [505.0, 82.0], [498.0, 502.5], [506.0, 495.0], [504.0, 80.0], [528.0, 17.0], [529.0, 87.0], [539.0, 85.0], [531.0, 103.0], [521.0, 501.0], [513.0, 104.0], [523.0, 15.0], [532.0, 17.0], [518.0, 19.0], [569.0, 15.0], [560.0, 23.0], [565.0, 16.0], [559.0, 96.0], [544.0, 17.0], [564.0, 17.0], [546.0, 15.0], [572.0, 84.0], [574.0, 20.0], [556.0, 24.0], [590.0, 90.0], [585.0, 98.0], [584.0, 69.5], [592.0, 82.0], [598.0, 100.0], [594.0, 194.5], [589.0, 89.0], [602.0, 100.0], [581.0, 90.0], [601.0, 91.0], [580.0, 190.5], [577.0, 396.0], [591.0, 23.0], [604.0, 87.0], [603.0, 20.0], [606.0, 98.0], [607.0, 95.0], [613.0, 105.0], [627.0, 19.0], [614.0, 21.0], [628.0, 70.0], [667.0, 95.0], [656.0, 23.0], [683.0, 16.0], [686.0, 46.0], [676.0, 21.0], [702.0, 31.0], [727.0, 97.0], [713.0, 81.0], [735.0, 68.5], [747.0, 91.0], [737.0, 88.0], [739.0, 70.0], [770.0, 79.0], [808.0, 124.0], [1.0, 17429.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 10627.0], [565.0, 10194.0], [556.0, 10204.0], [574.0, 10202.0], [604.0, 10389.0], [627.0, 10399.5], [628.0, 10280.0], [667.0, 10294.0], [702.0, 10317.0], [735.0, 10221.0], [3.0, 10658.0], [808.0, 10301.0], [4.0, 10214.0], [80.0, 10416.0], [6.0, 10256.5], [122.0, 701.0], [180.0, 294.0], [11.0, 10466.0], [13.0, 10344.0], [1.0, 10867.0], [400.0, 10118.0], [429.0, 10780.0], [26.0, 10728.5], [437.0, 10171.5], [442.0, 10046.0], [464.0, 10340.5], [480.0, 10304.0], [486.0, 10723.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 808.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.083333333333334, "minX": 1.62502158E12, "maxY": 494.48333333333335, "series": [{"data": [[1.6250217E12, 494.48333333333335], [1.62502158E12, 8.083333333333334], [1.62502176E12, 411.65], [1.62502182E12, 117.68333333333334], [1.62502164E12, 231.58333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502182E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.62502158E12, "maxY": 494.48333333333335, "series": [{"data": [[1.6250217E12, 494.48333333333335], [1.62502158E12, 7.016666666666667], [1.62502176E12, 406.8833333333333], [1.62502182E12, 117.83333333333333], [1.62502164E12, 227.26666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.62502176E12, 7.966666666666667], [1.62502182E12, 0.9166666666666666], [1.62502164E12, 1.1166666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62502182E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.62502158E12, "maxY": 247.31666666666666, "series": [{"data": [[1.62502176E12, 4.516666666666667], [1.62502182E12, 0.6], [1.62502164E12, 0.6]], "isOverall": false, "label": "get-failure", "isController": false}, {"data": [[1.6250217E12, 247.16666666666666], [1.62502158E12, 3.75], [1.62502176E12, 203.56666666666666], [1.62502182E12, 58.96666666666667], [1.62502164E12, 114.5]], "isOverall": false, "label": "get-success", "isController": false}, {"data": [[1.6250217E12, 247.31666666666666], [1.62502158E12, 3.2666666666666666], [1.62502176E12, 203.31666666666666], [1.62502182E12, 58.86666666666667], [1.62502164E12, 112.76666666666667]], "isOverall": false, "label": "post-success", "isController": false}, {"data": [[1.62502176E12, 3.45], [1.62502182E12, 0.31666666666666665], [1.62502164E12, 0.5166666666666667]], "isOverall": false, "label": "post-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502182E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.9166666666666666, "minX": 1.62502158E12, "maxY": 494.48333333333335, "series": [{"data": [[1.6250217E12, 494.48333333333335], [1.62502158E12, 7.016666666666667], [1.62502176E12, 406.8833333333333], [1.62502182E12, 117.83333333333333], [1.62502164E12, 227.26666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.62502176E12, 7.966666666666667], [1.62502182E12, 0.9166666666666666], [1.62502164E12, 1.1166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62502182E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

