/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 7479.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 5.0], [4.8, 5.0], [4.9, 5.0], [5.0, 5.0], [5.1, 5.0], [5.2, 5.0], [5.3, 5.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 6.0], [18.3, 6.0], [18.4, 6.0], [18.5, 6.0], [18.6, 6.0], [18.7, 6.0], [18.8, 6.0], [18.9, 6.0], [19.0, 6.0], [19.1, 6.0], [19.2, 6.0], [19.3, 6.0], [19.4, 6.0], [19.5, 6.0], [19.6, 6.0], [19.7, 6.0], [19.8, 6.0], [19.9, 6.0], [20.0, 6.0], [20.1, 6.0], [20.2, 6.0], [20.3, 6.0], [20.4, 6.0], [20.5, 6.0], [20.6, 6.0], [20.7, 6.0], [20.8, 6.0], [20.9, 6.0], [21.0, 6.0], [21.1, 6.0], [21.2, 6.0], [21.3, 6.0], [21.4, 6.0], [21.5, 6.0], [21.6, 6.0], [21.7, 6.0], [21.8, 6.0], [21.9, 6.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 7.0], [31.2, 7.0], [31.3, 7.0], [31.4, 7.0], [31.5, 7.0], [31.6, 7.0], [31.7, 7.0], [31.8, 7.0], [31.9, 7.0], [32.0, 7.0], [32.1, 7.0], [32.2, 7.0], [32.3, 7.0], [32.4, 7.0], [32.5, 7.0], [32.6, 7.0], [32.7, 7.0], [32.8, 7.0], [32.9, 7.0], [33.0, 7.0], [33.1, 7.0], [33.2, 7.0], [33.3, 7.0], [33.4, 7.0], [33.5, 7.0], [33.6, 7.0], [33.7, 7.0], [33.8, 7.0], [33.9, 7.0], [34.0, 7.0], [34.1, 7.0], [34.2, 7.0], [34.3, 7.0], [34.4, 7.0], [34.5, 7.0], [34.6, 7.0], [34.7, 7.0], [34.8, 7.0], [34.9, 7.0], [35.0, 7.0], [35.1, 7.0], [35.2, 7.0], [35.3, 7.0], [35.4, 7.0], [35.5, 7.0], [35.6, 7.0], [35.7, 7.0], [35.8, 7.0], [35.9, 7.0], [36.0, 7.0], [36.1, 7.0], [36.2, 7.0], [36.3, 7.0], [36.4, 7.0], [36.5, 7.0], [36.6, 7.0], [36.7, 7.0], [36.8, 7.0], [36.9, 7.0], [37.0, 7.0], [37.1, 7.0], [37.2, 7.0], [37.3, 7.0], [37.4, 7.0], [37.5, 7.0], [37.6, 7.0], [37.7, 7.0], [37.8, 7.0], [37.9, 7.0], [38.0, 7.0], [38.1, 7.0], [38.2, 7.0], [38.3, 7.0], [38.4, 7.0], [38.5, 7.0], [38.6, 7.0], [38.7, 7.0], [38.8, 7.0], [38.9, 7.0], [39.0, 7.0], [39.1, 7.0], [39.2, 7.0], [39.3, 7.0], [39.4, 7.0], [39.5, 7.0], [39.6, 7.0], [39.7, 7.0], [39.8, 7.0], [39.9, 7.0], [40.0, 7.0], [40.1, 7.0], [40.2, 7.0], [40.3, 7.0], [40.4, 7.0], [40.5, 7.0], [40.6, 7.0], [40.7, 7.0], [40.8, 7.0], [40.9, 7.0], [41.0, 7.0], [41.1, 7.0], [41.2, 7.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 8.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 8.0], [47.2, 8.0], [47.3, 8.0], [47.4, 8.0], [47.5, 8.0], [47.6, 8.0], [47.7, 8.0], [47.8, 8.0], [47.9, 8.0], [48.0, 8.0], [48.1, 8.0], [48.2, 8.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 8.0], [48.9, 8.0], [49.0, 8.0], [49.1, 8.0], [49.2, 8.0], [49.3, 8.0], [49.4, 8.0], [49.5, 8.0], [49.6, 8.0], [49.7, 8.0], [49.8, 8.0], [49.9, 8.0], [50.0, 8.0], [50.1, 8.0], [50.2, 8.0], [50.3, 8.0], [50.4, 8.0], [50.5, 8.0], [50.6, 8.0], [50.7, 8.0], [50.8, 8.0], [50.9, 8.0], [51.0, 8.0], [51.1, 8.0], [51.2, 8.0], [51.3, 8.0], [51.4, 8.0], [51.5, 8.0], [51.6, 8.0], [51.7, 8.0], [51.8, 8.0], [51.9, 8.0], [52.0, 8.0], [52.1, 8.0], [52.2, 8.0], [52.3, 8.0], [52.4, 8.0], [52.5, 8.0], [52.6, 8.0], [52.7, 8.0], [52.8, 8.0], [52.9, 8.0], [53.0, 8.0], [53.1, 8.0], [53.2, 8.0], [53.3, 8.0], [53.4, 8.0], [53.5, 8.0], [53.6, 8.0], [53.7, 8.0], [53.8, 8.0], [53.9, 8.0], [54.0, 8.0], [54.1, 8.0], [54.2, 8.0], [54.3, 8.0], [54.4, 8.0], [54.5, 8.0], [54.6, 8.0], [54.7, 8.0], [54.8, 8.0], [54.9, 8.0], [55.0, 8.0], [55.1, 8.0], [55.2, 8.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 9.0], [58.9, 9.0], [59.0, 9.0], [59.1, 9.0], [59.2, 9.0], [59.3, 9.0], [59.4, 9.0], [59.5, 9.0], [59.6, 9.0], [59.7, 9.0], [59.8, 9.0], [59.9, 9.0], [60.0, 9.0], [60.1, 9.0], [60.2, 9.0], [60.3, 9.0], [60.4, 9.0], [60.5, 9.0], [60.6, 9.0], [60.7, 9.0], [60.8, 9.0], [60.9, 9.0], [61.0, 9.0], [61.1, 9.0], [61.2, 9.0], [61.3, 9.0], [61.4, 9.0], [61.5, 9.0], [61.6, 9.0], [61.7, 9.0], [61.8, 9.0], [61.9, 9.0], [62.0, 9.0], [62.1, 9.0], [62.2, 9.0], [62.3, 9.0], [62.4, 9.0], [62.5, 9.0], [62.6, 9.0], [62.7, 9.0], [62.8, 9.0], [62.9, 9.0], [63.0, 9.0], [63.1, 9.0], [63.2, 9.0], [63.3, 9.0], [63.4, 9.0], [63.5, 9.0], [63.6, 9.0], [63.7, 9.0], [63.8, 9.0], [63.9, 9.0], [64.0, 10.0], [64.1, 10.0], [64.2, 10.0], [64.3, 10.0], [64.4, 10.0], [64.5, 10.0], [64.6, 10.0], [64.7, 10.0], [64.8, 10.0], [64.9, 10.0], [65.0, 10.0], [65.1, 10.0], [65.2, 10.0], [65.3, 10.0], [65.4, 10.0], [65.5, 10.0], [65.6, 10.0], [65.7, 10.0], [65.8, 10.0], [65.9, 10.0], [66.0, 10.0], [66.1, 10.0], [66.2, 10.0], [66.3, 10.0], [66.4, 10.0], [66.5, 10.0], [66.6, 10.0], [66.7, 10.0], [66.8, 10.0], [66.9, 10.0], [67.0, 10.0], [67.1, 10.0], [67.2, 10.0], [67.3, 10.0], [67.4, 10.0], [67.5, 10.0], [67.6, 10.0], [67.7, 10.0], [67.8, 10.0], [67.9, 10.0], [68.0, 10.0], [68.1, 10.0], [68.2, 10.0], [68.3, 10.0], [68.4, 10.0], [68.5, 10.0], [68.6, 10.0], [68.7, 10.0], [68.8, 10.0], [68.9, 10.0], [69.0, 10.0], [69.1, 11.0], [69.2, 11.0], [69.3, 11.0], [69.4, 11.0], [69.5, 11.0], [69.6, 11.0], [69.7, 11.0], [69.8, 11.0], [69.9, 11.0], [70.0, 11.0], [70.1, 11.0], [70.2, 11.0], [70.3, 11.0], [70.4, 11.0], [70.5, 11.0], [70.6, 11.0], [70.7, 11.0], [70.8, 11.0], [70.9, 11.0], [71.0, 11.0], [71.1, 11.0], [71.2, 11.0], [71.3, 11.0], [71.4, 11.0], [71.5, 11.0], [71.6, 11.0], [71.7, 11.0], [71.8, 11.0], [71.9, 11.0], [72.0, 12.0], [72.1, 12.0], [72.2, 12.0], [72.3, 12.0], [72.4, 12.0], [72.5, 12.0], [72.6, 12.0], [72.7, 12.0], [72.8, 12.0], [72.9, 12.0], [73.0, 12.0], [73.1, 12.0], [73.2, 12.0], [73.3, 12.0], [73.4, 13.0], [73.5, 13.0], [73.6, 13.0], [73.7, 13.0], [73.8, 13.0], [73.9, 13.0], [74.0, 13.0], [74.1, 13.0], [74.2, 13.0], [74.3, 14.0], [74.4, 14.0], [74.5, 14.0], [74.6, 14.0], [74.7, 15.0], [74.8, 15.0], [74.9, 15.0], [75.0, 15.0], [75.1, 16.0], [75.2, 16.0], [75.3, 17.0], [75.4, 17.0], [75.5, 18.0], [75.6, 18.0], [75.7, 19.0], [75.8, 20.0], [75.9, 20.0], [76.0, 21.0], [76.1, 22.0], [76.2, 23.0], [76.3, 24.0], [76.4, 25.0], [76.5, 25.0], [76.6, 26.0], [76.7, 27.0], [76.8, 28.0], [76.9, 29.0], [77.0, 30.0], [77.1, 30.0], [77.2, 31.0], [77.3, 32.0], [77.4, 33.0], [77.5, 33.0], [77.6, 34.0], [77.7, 35.0], [77.8, 35.0], [77.9, 36.0], [78.0, 37.0], [78.1, 37.0], [78.2, 38.0], [78.3, 38.0], [78.4, 39.0], [78.5, 40.0], [78.6, 40.0], [78.7, 41.0], [78.8, 41.0], [78.9, 42.0], [79.0, 42.0], [79.1, 43.0], [79.2, 43.0], [79.3, 44.0], [79.4, 44.0], [79.5, 45.0], [79.6, 45.0], [79.7, 46.0], [79.8, 46.0], [79.9, 47.0], [80.0, 47.0], [80.1, 48.0], [80.2, 48.0], [80.3, 49.0], [80.4, 49.0], [80.5, 50.0], [80.6, 50.0], [80.7, 51.0], [80.8, 51.0], [80.9, 52.0], [81.0, 52.0], [81.1, 53.0], [81.2, 53.0], [81.3, 53.0], [81.4, 54.0], [81.5, 54.0], [81.6, 55.0], [81.7, 55.0], [81.8, 56.0], [81.9, 56.0], [82.0, 57.0], [82.1, 57.0], [82.2, 57.0], [82.3, 58.0], [82.4, 58.0], [82.5, 59.0], [82.6, 59.0], [82.7, 60.0], [82.8, 60.0], [82.9, 61.0], [83.0, 61.0], [83.1, 61.0], [83.2, 62.0], [83.3, 62.0], [83.4, 63.0], [83.5, 63.0], [83.6, 63.0], [83.7, 64.0], [83.8, 64.0], [83.9, 65.0], [84.0, 65.0], [84.1, 65.0], [84.2, 66.0], [84.3, 66.0], [84.4, 67.0], [84.5, 67.0], [84.6, 67.0], [84.7, 68.0], [84.8, 68.0], [84.9, 68.0], [85.0, 69.0], [85.1, 69.0], [85.2, 69.0], [85.3, 70.0], [85.4, 70.0], [85.5, 70.0], [85.6, 71.0], [85.7, 71.0], [85.8, 71.0], [85.9, 72.0], [86.0, 72.0], [86.1, 72.0], [86.2, 73.0], [86.3, 73.0], [86.4, 73.0], [86.5, 74.0], [86.6, 74.0], [86.7, 74.0], [86.8, 75.0], [86.9, 75.0], [87.0, 75.0], [87.1, 76.0], [87.2, 76.0], [87.3, 76.0], [87.4, 76.0], [87.5, 77.0], [87.6, 77.0], [87.7, 77.0], [87.8, 78.0], [87.9, 78.0], [88.0, 78.0], [88.1, 78.0], [88.2, 79.0], [88.3, 79.0], [88.4, 79.0], [88.5, 80.0], [88.6, 80.0], [88.7, 80.0], [88.8, 80.0], [88.9, 81.0], [89.0, 81.0], [89.1, 81.0], [89.2, 82.0], [89.3, 82.0], [89.4, 82.0], [89.5, 83.0], [89.6, 83.0], [89.7, 83.0], [89.8, 84.0], [89.9, 84.0], [90.0, 84.0], [90.1, 85.0], [90.2, 85.0], [90.3, 85.0], [90.4, 85.0], [90.5, 86.0], [90.6, 86.0], [90.7, 86.0], [90.8, 87.0], [90.9, 87.0], [91.0, 87.0], [91.1, 88.0], [91.2, 88.0], [91.3, 88.0], [91.4, 89.0], [91.5, 89.0], [91.6, 89.0], [91.7, 90.0], [91.8, 90.0], [91.9, 91.0], [92.0, 91.0], [92.1, 91.0], [92.2, 92.0], [92.3, 92.0], [92.4, 92.0], [92.5, 93.0], [92.6, 93.0], [92.7, 93.0], [92.8, 94.0], [92.9, 94.0], [93.0, 94.0], [93.1, 95.0], [93.2, 95.0], [93.3, 95.0], [93.4, 96.0], [93.5, 96.0], [93.6, 97.0], [93.7, 97.0], [93.8, 97.0], [93.9, 98.0], [94.0, 98.0], [94.1, 99.0], [94.2, 99.0], [94.3, 100.0], [94.4, 100.0], [94.5, 101.0], [94.6, 101.0], [94.7, 102.0], [94.8, 103.0], [94.9, 104.0], [95.0, 105.0], [95.1, 107.0], [95.2, 110.0], [95.3, 114.0], [95.4, 118.0], [95.5, 123.0], [95.6, 128.0], [95.7, 132.0], [95.8, 137.0], [95.9, 141.0], [96.0, 144.0], [96.1, 148.0], [96.2, 153.0], [96.3, 157.0], [96.4, 161.0], [96.5, 165.0], [96.6, 170.0], [96.7, 175.0], [96.8, 179.0], [96.9, 183.0], [97.0, 186.0], [97.1, 189.0], [97.2, 192.0], [97.3, 195.0], [97.4, 197.0], [97.5, 201.0], [97.6, 205.0], [97.7, 214.0], [97.8, 230.0], [97.9, 242.0], [98.0, 255.0], [98.1, 272.0], [98.2, 284.0], [98.3, 293.0], [98.4, 302.0], [98.5, 325.0], [98.6, 356.0], [98.7, 382.0], [98.8, 398.0], [98.9, 424.0], [99.0, 475.0], [99.1, 500.0], [99.2, 561.0], [99.3, 606.0], [99.4, 697.0], [99.5, 818.0], [99.6, 1024.0], [99.7, 1298.0], [99.8, 1583.0], [99.9, 2085.0], [100.0, 7467.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 6.0], [18.3, 6.0], [18.4, 6.0], [18.5, 6.0], [18.6, 6.0], [18.7, 6.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 7.0], [31.2, 7.0], [31.3, 7.0], [31.4, 7.0], [31.5, 7.0], [31.6, 7.0], [31.7, 7.0], [31.8, 7.0], [31.9, 7.0], [32.0, 7.0], [32.1, 7.0], [32.2, 7.0], [32.3, 7.0], [32.4, 7.0], [32.5, 7.0], [32.6, 7.0], [32.7, 7.0], [32.8, 7.0], [32.9, 7.0], [33.0, 7.0], [33.1, 7.0], [33.2, 7.0], [33.3, 7.0], [33.4, 7.0], [33.5, 7.0], [33.6, 7.0], [33.7, 7.0], [33.8, 7.0], [33.9, 7.0], [34.0, 7.0], [34.1, 7.0], [34.2, 7.0], [34.3, 7.0], [34.4, 7.0], [34.5, 7.0], [34.6, 7.0], [34.7, 7.0], [34.8, 7.0], [34.9, 7.0], [35.0, 7.0], [35.1, 7.0], [35.2, 7.0], [35.3, 7.0], [35.4, 7.0], [35.5, 7.0], [35.6, 7.0], [35.7, 7.0], [35.8, 7.0], [35.9, 7.0], [36.0, 7.0], [36.1, 7.0], [36.2, 7.0], [36.3, 7.0], [36.4, 7.0], [36.5, 7.0], [36.6, 7.0], [36.7, 7.0], [36.8, 7.0], [36.9, 7.0], [37.0, 7.0], [37.1, 7.0], [37.2, 7.0], [37.3, 7.0], [37.4, 7.0], [37.5, 7.0], [37.6, 7.0], [37.7, 7.0], [37.8, 7.0], [37.9, 7.0], [38.0, 7.0], [38.1, 7.0], [38.2, 7.0], [38.3, 7.0], [38.4, 8.0], [38.5, 8.0], [38.6, 8.0], [38.7, 8.0], [38.8, 8.0], [38.9, 8.0], [39.0, 8.0], [39.1, 8.0], [39.2, 8.0], [39.3, 8.0], [39.4, 8.0], [39.5, 8.0], [39.6, 8.0], [39.7, 8.0], [39.8, 8.0], [39.9, 8.0], [40.0, 8.0], [40.1, 8.0], [40.2, 8.0], [40.3, 8.0], [40.4, 8.0], [40.5, 8.0], [40.6, 8.0], [40.7, 8.0], [40.8, 8.0], [40.9, 8.0], [41.0, 8.0], [41.1, 8.0], [41.2, 8.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 8.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 8.0], [47.2, 8.0], [47.3, 8.0], [47.4, 8.0], [47.5, 8.0], [47.6, 8.0], [47.7, 8.0], [47.8, 8.0], [47.9, 8.0], [48.0, 8.0], [48.1, 8.0], [48.2, 8.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 8.0], [48.9, 8.0], [49.0, 8.0], [49.1, 8.0], [49.2, 8.0], [49.3, 8.0], [49.4, 8.0], [49.5, 8.0], [49.6, 8.0], [49.7, 8.0], [49.8, 8.0], [49.9, 8.0], [50.0, 8.0], [50.1, 8.0], [50.2, 8.0], [50.3, 8.0], [50.4, 8.0], [50.5, 8.0], [50.6, 8.0], [50.7, 8.0], [50.8, 8.0], [50.9, 8.0], [51.0, 8.0], [51.1, 8.0], [51.2, 8.0], [51.3, 8.0], [51.4, 8.0], [51.5, 8.0], [51.6, 8.0], [51.7, 8.0], [51.8, 8.0], [51.9, 8.0], [52.0, 8.0], [52.1, 8.0], [52.2, 8.0], [52.3, 8.0], [52.4, 8.0], [52.5, 8.0], [52.6, 8.0], [52.7, 8.0], [52.8, 8.0], [52.9, 8.0], [53.0, 8.0], [53.1, 8.0], [53.2, 8.0], [53.3, 9.0], [53.4, 9.0], [53.5, 9.0], [53.6, 9.0], [53.7, 9.0], [53.8, 9.0], [53.9, 9.0], [54.0, 9.0], [54.1, 9.0], [54.2, 9.0], [54.3, 9.0], [54.4, 9.0], [54.5, 9.0], [54.6, 9.0], [54.7, 9.0], [54.8, 9.0], [54.9, 9.0], [55.0, 9.0], [55.1, 9.0], [55.2, 9.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 9.0], [58.9, 9.0], [59.0, 9.0], [59.1, 9.0], [59.2, 9.0], [59.3, 9.0], [59.4, 9.0], [59.5, 9.0], [59.6, 9.0], [59.7, 9.0], [59.8, 9.0], [59.9, 9.0], [60.0, 9.0], [60.1, 9.0], [60.2, 9.0], [60.3, 9.0], [60.4, 9.0], [60.5, 9.0], [60.6, 9.0], [60.7, 9.0], [60.8, 9.0], [60.9, 9.0], [61.0, 9.0], [61.1, 9.0], [61.2, 9.0], [61.3, 9.0], [61.4, 9.0], [61.5, 9.0], [61.6, 9.0], [61.7, 9.0], [61.8, 9.0], [61.9, 9.0], [62.0, 9.0], [62.1, 9.0], [62.2, 9.0], [62.3, 9.0], [62.4, 9.0], [62.5, 9.0], [62.6, 9.0], [62.7, 9.0], [62.8, 10.0], [62.9, 10.0], [63.0, 10.0], [63.1, 10.0], [63.2, 10.0], [63.3, 10.0], [63.4, 10.0], [63.5, 10.0], [63.6, 10.0], [63.7, 10.0], [63.8, 10.0], [63.9, 10.0], [64.0, 10.0], [64.1, 10.0], [64.2, 10.0], [64.3, 10.0], [64.4, 10.0], [64.5, 10.0], [64.6, 10.0], [64.7, 10.0], [64.8, 10.0], [64.9, 10.0], [65.0, 10.0], [65.1, 10.0], [65.2, 10.0], [65.3, 10.0], [65.4, 10.0], [65.5, 10.0], [65.6, 10.0], [65.7, 10.0], [65.8, 10.0], [65.9, 10.0], [66.0, 10.0], [66.1, 10.0], [66.2, 10.0], [66.3, 10.0], [66.4, 10.0], [66.5, 10.0], [66.6, 10.0], [66.7, 10.0], [66.8, 10.0], [66.9, 10.0], [67.0, 10.0], [67.1, 10.0], [67.2, 10.0], [67.3, 10.0], [67.4, 10.0], [67.5, 10.0], [67.6, 10.0], [67.7, 10.0], [67.8, 10.0], [67.9, 10.0], [68.0, 10.0], [68.1, 10.0], [68.2, 10.0], [68.3, 10.0], [68.4, 11.0], [68.5, 11.0], [68.6, 11.0], [68.7, 11.0], [68.8, 11.0], [68.9, 11.0], [69.0, 11.0], [69.1, 11.0], [69.2, 11.0], [69.3, 11.0], [69.4, 11.0], [69.5, 11.0], [69.6, 11.0], [69.7, 11.0], [69.8, 11.0], [69.9, 11.0], [70.0, 11.0], [70.1, 11.0], [70.2, 11.0], [70.3, 11.0], [70.4, 11.0], [70.5, 11.0], [70.6, 11.0], [70.7, 11.0], [70.8, 11.0], [70.9, 11.0], [71.0, 11.0], [71.1, 11.0], [71.2, 11.0], [71.3, 11.0], [71.4, 11.0], [71.5, 12.0], [71.6, 12.0], [71.7, 12.0], [71.8, 12.0], [71.9, 12.0], [72.0, 12.0], [72.1, 12.0], [72.2, 12.0], [72.3, 12.0], [72.4, 12.0], [72.5, 12.0], [72.6, 12.0], [72.7, 12.0], [72.8, 12.0], [72.9, 12.0], [73.0, 12.0], [73.1, 12.0], [73.2, 13.0], [73.3, 13.0], [73.4, 13.0], [73.5, 13.0], [73.6, 13.0], [73.7, 13.0], [73.8, 13.0], [73.9, 13.0], [74.0, 14.0], [74.1, 14.0], [74.2, 14.0], [74.3, 14.0], [74.4, 14.0], [74.5, 14.0], [74.6, 15.0], [74.7, 15.0], [74.8, 15.0], [74.9, 15.0], [75.0, 16.0], [75.1, 16.0], [75.2, 17.0], [75.3, 17.0], [75.4, 18.0], [75.5, 18.0], [75.6, 19.0], [75.7, 19.0], [75.8, 20.0], [75.9, 21.0], [76.0, 22.0], [76.1, 23.0], [76.2, 23.0], [76.3, 24.0], [76.4, 25.0], [76.5, 26.0], [76.6, 27.0], [76.7, 28.0], [76.8, 28.0], [76.9, 29.0], [77.0, 30.0], [77.1, 31.0], [77.2, 32.0], [77.3, 32.0], [77.4, 33.0], [77.5, 34.0], [77.6, 34.0], [77.7, 35.0], [77.8, 36.0], [77.9, 36.0], [78.0, 37.0], [78.1, 38.0], [78.2, 38.0], [78.3, 39.0], [78.4, 39.0], [78.5, 40.0], [78.6, 41.0], [78.7, 41.0], [78.8, 42.0], [78.9, 42.0], [79.0, 43.0], [79.1, 43.0], [79.2, 44.0], [79.3, 44.0], [79.4, 45.0], [79.5, 45.0], [79.6, 46.0], [79.7, 46.0], [79.8, 47.0], [79.9, 47.0], [80.0, 48.0], [80.1, 48.0], [80.2, 49.0], [80.3, 49.0], [80.4, 50.0], [80.5, 50.0], [80.6, 51.0], [80.7, 51.0], [80.8, 52.0], [80.9, 52.0], [81.0, 52.0], [81.1, 53.0], [81.2, 53.0], [81.3, 54.0], [81.4, 54.0], [81.5, 55.0], [81.6, 55.0], [81.7, 56.0], [81.8, 56.0], [81.9, 56.0], [82.0, 57.0], [82.1, 57.0], [82.2, 58.0], [82.3, 58.0], [82.4, 59.0], [82.5, 59.0], [82.6, 60.0], [82.7, 60.0], [82.8, 60.0], [82.9, 61.0], [83.0, 61.0], [83.1, 62.0], [83.2, 62.0], [83.3, 62.0], [83.4, 63.0], [83.5, 63.0], [83.6, 64.0], [83.7, 64.0], [83.8, 65.0], [83.9, 65.0], [84.0, 65.0], [84.1, 66.0], [84.2, 66.0], [84.3, 66.0], [84.4, 67.0], [84.5, 67.0], [84.6, 68.0], [84.7, 68.0], [84.8, 68.0], [84.9, 69.0], [85.0, 69.0], [85.1, 69.0], [85.2, 70.0], [85.3, 70.0], [85.4, 70.0], [85.5, 71.0], [85.6, 71.0], [85.7, 71.0], [85.8, 72.0], [85.9, 72.0], [86.0, 72.0], [86.1, 73.0], [86.2, 73.0], [86.3, 73.0], [86.4, 74.0], [86.5, 74.0], [86.6, 74.0], [86.7, 74.0], [86.8, 75.0], [86.9, 75.0], [87.0, 75.0], [87.1, 76.0], [87.2, 76.0], [87.3, 76.0], [87.4, 77.0], [87.5, 77.0], [87.6, 77.0], [87.7, 77.0], [87.8, 78.0], [87.9, 78.0], [88.0, 78.0], [88.1, 79.0], [88.2, 79.0], [88.3, 79.0], [88.4, 80.0], [88.5, 80.0], [88.6, 80.0], [88.7, 80.0], [88.8, 81.0], [88.9, 81.0], [89.0, 81.0], [89.1, 82.0], [89.2, 82.0], [89.3, 82.0], [89.4, 83.0], [89.5, 83.0], [89.6, 83.0], [89.7, 83.0], [89.8, 84.0], [89.9, 84.0], [90.0, 84.0], [90.1, 85.0], [90.2, 85.0], [90.3, 85.0], [90.4, 86.0], [90.5, 86.0], [90.6, 86.0], [90.7, 87.0], [90.8, 87.0], [90.9, 87.0], [91.0, 88.0], [91.1, 88.0], [91.2, 88.0], [91.3, 89.0], [91.4, 89.0], [91.5, 89.0], [91.6, 90.0], [91.7, 90.0], [91.8, 90.0], [91.9, 91.0], [92.0, 91.0], [92.1, 91.0], [92.2, 92.0], [92.3, 92.0], [92.4, 92.0], [92.5, 93.0], [92.6, 93.0], [92.7, 93.0], [92.8, 94.0], [92.9, 94.0], [93.0, 94.0], [93.1, 95.0], [93.2, 95.0], [93.3, 96.0], [93.4, 96.0], [93.5, 96.0], [93.6, 97.0], [93.7, 97.0], [93.8, 97.0], [93.9, 98.0], [94.0, 98.0], [94.1, 99.0], [94.2, 99.0], [94.3, 100.0], [94.4, 100.0], [94.5, 101.0], [94.6, 101.0], [94.7, 102.0], [94.8, 103.0], [94.9, 104.0], [95.0, 105.0], [95.1, 107.0], [95.2, 110.0], [95.3, 113.0], [95.4, 117.0], [95.5, 122.0], [95.6, 127.0], [95.7, 132.0], [95.8, 137.0], [95.9, 141.0], [96.0, 145.0], [96.1, 149.0], [96.2, 153.0], [96.3, 157.0], [96.4, 162.0], [96.5, 167.0], [96.6, 172.0], [96.7, 177.0], [96.8, 181.0], [96.9, 185.0], [97.0, 188.0], [97.1, 191.0], [97.2, 194.0], [97.3, 197.0], [97.4, 200.0], [97.5, 203.0], [97.6, 209.0], [97.7, 221.0], [97.8, 234.0], [97.9, 245.0], [98.0, 258.0], [98.1, 275.0], [98.2, 287.0], [98.3, 297.0], [98.4, 307.0], [98.5, 332.0], [98.6, 362.0], [98.7, 385.0], [98.8, 400.0], [98.9, 426.0], [99.0, 477.0], [99.1, 502.0], [99.2, 566.0], [99.3, 608.0], [99.4, 697.0], [99.5, 816.0], [99.6, 1038.0], [99.7, 1314.0], [99.8, 1583.0], [99.9, 2135.0], [100.0, 7479.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 413516.0, "series": [{"data": [[0.0, 413429.0], [600.0, 525.0], [700.0, 347.0], [800.0, 277.0], [900.0, 191.0], [1000.0, 155.0], [1100.0, 171.0], [1200.0, 160.0], [1300.0, 158.0], [1400.0, 163.0], [1500.0, 134.0], [1600.0, 111.0], [1700.0, 103.0], [1800.0, 80.0], [1900.0, 71.0], [2000.0, 61.0], [2100.0, 33.0], [2200.0, 18.0], [2300.0, 13.0], [2400.0, 15.0], [2500.0, 5.0], [2600.0, 19.0], [2800.0, 14.0], [2700.0, 17.0], [2900.0, 16.0], [3000.0, 11.0], [3100.0, 16.0], [3200.0, 14.0], [3300.0, 17.0], [3400.0, 10.0], [3500.0, 12.0], [3600.0, 14.0], [3700.0, 9.0], [3800.0, 6.0], [3900.0, 8.0], [4000.0, 14.0], [4100.0, 3.0], [4300.0, 1.0], [4200.0, 7.0], [4400.0, 6.0], [4600.0, 4.0], [4800.0, 2.0], [5100.0, 4.0], [4900.0, 4.0], [5000.0, 2.0], [5300.0, 15.0], [5200.0, 3.0], [5400.0, 30.0], [5500.0, 22.0], [5600.0, 8.0], [5700.0, 10.0], [5800.0, 13.0], [5900.0, 2.0], [6000.0, 3.0], [6100.0, 1.0], [6300.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [6400.0, 3.0], [7300.0, 1.0], [7400.0, 1.0], [100.0, 13974.0], [200.0, 3968.0], [300.0, 1908.0], [400.0, 1263.0], [500.0, 811.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 413516.0], [600.0, 548.0], [700.0, 338.0], [800.0, 281.0], [900.0, 183.0], [1000.0, 145.0], [1100.0, 161.0], [1200.0, 157.0], [1300.0, 178.0], [1400.0, 183.0], [1500.0, 130.0], [1600.0, 129.0], [1700.0, 86.0], [1800.0, 64.0], [1900.0, 67.0], [2000.0, 51.0], [2100.0, 28.0], [2300.0, 16.0], [2200.0, 23.0], [2400.0, 15.0], [2500.0, 16.0], [2600.0, 16.0], [2800.0, 22.0], [2700.0, 14.0], [2900.0, 25.0], [3000.0, 17.0], [3100.0, 9.0], [3200.0, 12.0], [3300.0, 18.0], [3400.0, 8.0], [3500.0, 11.0], [3700.0, 19.0], [3600.0, 16.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 8.0], [4300.0, 3.0], [4200.0, 5.0], [4100.0, 4.0], [4400.0, 2.0], [4600.0, 2.0], [4500.0, 4.0], [4700.0, 2.0], [4800.0, 3.0], [4900.0, 4.0], [5000.0, 3.0], [5100.0, 2.0], [5200.0, 6.0], [5300.0, 12.0], [5400.0, 22.0], [5500.0, 18.0], [5600.0, 11.0], [5700.0, 9.0], [5800.0, 8.0], [5900.0, 3.0], [6000.0, 6.0], [6100.0, 2.0], [6200.0, 1.0], [6600.0, 8.0], [6400.0, 2.0], [6500.0, 1.0], [7200.0, 2.0], [7400.0, 4.0], [7300.0, 1.0], [100.0, 13705.0], [200.0, 4143.0], [300.0, 2027.0], [400.0, 1285.0], [500.0, 845.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1965.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 869260.0, "series": [{"data": [[0.0, 869260.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5940.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1965.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.999999999999999, "minX": 1.62512058E12, "maxY": 256.0, "series": [{"data": [[1.62512058E12, 63.683025591188844]], "isOverall": false, "label": "warm_up", "isController": false}, {"data": [[1.62512076E12, 63.92746578480829]], "isOverall": false, "label": "cool_down_phase", "isController": false}, {"data": [[1.62512076E12, 5.999999999999999], [1.62512058E12, 167.9057471264367], [1.6251207E12, 255.0956906621455], [1.62512064E12, 256.0]], "isOverall": false, "label": "peak_phase", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512076E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.5, "minX": 1.0, "maxY": 2097.0, "series": [{"data": [[2.0, 2097.0], [3.0, 86.0], [4.0, 1538.0], [6.0, 9.0], [7.0, 1973.5], [8.0, 1184.75], [10.0, 1337.5], [11.0, 7.0], [13.0, 979.2499999999999], [14.0, 41.0], [15.0, 6.5], [16.0, 7.0], [17.0, 915.2499999999999], [18.0, 8.0], [19.0, 1499.5], [20.0, 8.0], [21.0, 113.75], [22.0, 7.5], [23.0, 9.5], [24.0, 266.14285714285717], [25.0, 6.857142857142857], [26.0, 639.6666666666667], [27.0, 710.25], [28.0, 479.99999999999983], [29.0, 400.5], [30.0, 74.00000000000001], [31.0, 243.23076923076925], [32.0, 103.0], [33.0, 30.25], [34.0, 229.0], [35.0, 6.75], [36.0, 276.125], [37.0, 7.666666666666667], [39.0, 7.916666666666666], [38.0, 7.666666666666667], [41.0, 7.333333333333333], [40.0, 18.833333333333336], [42.0, 322.0], [43.0, 8.6], [45.0, 7.875], [44.0, 8.25], [47.0, 9.000000000000002], [46.0, 7.823529411764707], [48.0, 7.7857142857142865], [49.0, 7.2], [50.0, 562.8571428571428], [51.0, 6.882352941176471], [52.0, 10.25], [53.0, 7.0], [54.0, 76.84615384615384], [55.0, 12.718749999999998], [57.0, 17.333333333333332], [56.0, 15.0], [59.0, 578.3333333333333], [58.0, 9.266666666666667], [60.0, 18.0], [61.0, 23.2], [63.0, 51.857142857142854], [62.0, 7.862068965517241], [64.0, 17.790716628179705], [67.0, 9.2], [66.0, 10.0], [65.0, 7.666666666666666], [69.0, 9.0], [70.0, 7.666666666666667], [71.0, 7.75], [74.0, 8.5], [75.0, 38.25], [73.0, 14.727272727272728], [72.0, 8.1], [79.0, 124.0], [78.0, 7.25], [77.0, 16.166666666666664], [76.0, 44.0], [80.0, 31.285714285714285], [82.0, 8.333333333333334], [83.0, 7.375], [81.0, 16.142857142857142], [84.0, 16.294117647058822], [86.0, 8.25], [87.0, 7.333333333333333], [85.0, 7.2727272727272725], [91.0, 22.96], [90.0, 116.0], [88.0, 72.0], [93.0, 16.583333333333332], [95.0, 18.357142857142858], [94.0, 8.874999999999998], [92.0, 7.666666666666667], [97.0, 25.77777777777778], [99.0, 15.0], [98.0, 9.0], [96.0, 8.142857142857142], [100.0, 100.0], [102.0, 28.5], [103.0, 54.333333333333336], [101.0, 86.0], [107.0, 10.0], [106.0, 31.636363636363633], [105.0, 53.0], [104.0, 93.0], [110.0, 5.5], [109.0, 6.666666666666667], [108.0, 35.66666666666667], [115.0, 6.666666666666667], [114.0, 8.375], [113.0, 41.25], [112.0, 6.8], [119.0, 172.0], [118.0, 58.0], [117.0, 9.0], [116.0, 6.8], [120.0, 90.0], [121.0, 10.8], [123.0, 25.333333333333332], [122.0, 106.5], [126.0, 19.75], [124.0, 18.0], [132.0, 45.5], [133.0, 90.6], [134.0, 10.666666666666666], [131.0, 8.0], [130.0, 7.0], [129.0, 8.333333333333334], [128.0, 7.25], [140.0, 9.428571428571429], [143.0, 14.04], [142.0, 6.75], [139.0, 28.0], [137.0, 17.888888888888886], [136.0, 6.0], [149.0, 7.5], [151.0, 6.75], [150.0, 7.25], [148.0, 7.076923076923077], [147.0, 8.25], [146.0, 6.857142857142857], [145.0, 6.4], [144.0, 8.095238095238093], [159.0, 31.5], [158.0, 15.5], [157.0, 76.125], [156.0, 58.57142857142857], [155.0, 38.37499999999999], [154.0, 21.28571428571429], [153.0, 7.533333333333334], [152.0, 20.28], [162.0, 8.0], [167.0, 21.07142857142857], [166.0, 7.0], [165.0, 33.833333333333336], [164.0, 6.0], [161.0, 7.0], [160.0, 6.666666666666667], [175.0, 159.8], [174.0, 331.0], [173.0, 24.0], [172.0, 15.25], [171.0, 15.999999999999996], [170.0, 12.117647058823529], [169.0, 7.173913043478261], [168.0, 10.74193548387097], [180.0, 38.75], [181.0, 16.642857142857142], [183.0, 172.5454545454545], [182.0, 104.37500000000003], [179.0, 15.714285714285715], [177.0, 83.7], [185.0, 7.000000000000001], [190.0, 96.0], [191.0, 40.9032258064516], [189.0, 35.099999999999994], [188.0, 8.0], [187.0, 7.344827586206897], [186.0, 6.2857142857142865], [184.0, 7.111111111111111], [194.0, 26.41666666666666], [195.0, 23.75], [197.0, 18.0], [199.0, 22.266666666666662], [198.0, 30.166666666666664], [196.0, 26.77777777777778], [193.0, 35.333333333333336], [192.0, 10.0], [207.0, 7.166666666666667], [206.0, 18.333333333333336], [205.0, 12.0], [204.0, 34.29032258064516], [203.0, 7.0], [202.0, 12.575757575757574], [201.0, 17.470588235294116], [200.0, 72.0], [211.0, 7.050632911392406], [212.0, 44.839999999999996], [215.0, 34.23684210526316], [214.0, 19.142857142857142], [213.0, 15.397163120567368], [210.0, 11.867924528301886], [209.0, 18.555555555555557], [208.0, 10.23076923076923], [216.0, 17.257042253521114], [223.0, 45.74418604651163], [222.0, 28.71428571428572], [221.0, 17.571428571428573], [220.0, 40.94736842105264], [219.0, 9.313492063492067], [218.0, 8.611111111111114], [217.0, 14.85877862595419], [226.0, 61.909090909090914], [228.0, 28.868613138686133], [229.0, 7.222222222222222], [231.0, 42.03571428571433], [230.0, 6.9], [225.0, 13.103825136612027], [224.0, 21.131578947368425], [239.0, 10.0], [238.0, 6.38888888888889], [237.0, 5.571428571428571], [236.0, 22.818181818181817], [235.0, 26.56756756756757], [234.0, 44.0], [233.0, 21.794871794871796], [232.0, 18.438596491228072], [247.0, 8.888888888888888], [246.0, 8.32706766917293], [245.0, 10.043478260869566], [244.0, 6.473684210526316], [243.0, 46.875], [242.0, 8.0], [241.0, 10.711538461538462], [240.0, 161.96], [250.0, 109.20000000000002], [255.0, 71.88235294117646], [254.0, 60.44444444444444], [253.0, 31.466666666666672], [252.0, 18.333333333333332], [251.0, 13.923076923076923], [249.0, 30.42857142857143], [248.0, 22.040816326530617], [256.0, 46.00512106958674], [1.0, 1510.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[210.09067274208013, 39.24896177555236]], "isOverall": false, "label": "Post_Request-Aggregated", "isController": false}, {"data": [[2.0, 846.0], [4.0, 1024.6666666666667], [6.0, 7.0], [7.0, 1734.6666666666667], [8.0, 961.6666666666667], [9.0, 725.0], [10.0, 971.0], [11.0, 22.666666666666668], [12.0, 78.0], [13.0, 1028.0], [15.0, 659.3333333333335], [16.0, 17.5], [17.0, 8.0], [18.0, 1356.0], [19.0, 821.1428571428571], [20.0, 405.4], [21.0, 307.57142857142856], [22.0, 398.0], [23.0, 12.0], [24.0, 8.571428571428571], [25.0, 8.0], [26.0, 8.5], [27.0, 312.0], [28.0, 372.58333333333326], [29.0, 22.125], [30.0, 108.5], [31.0, 450.00000000000006], [33.0, 155.33333333333331], [32.0, 26.0], [35.0, 27.25], [34.0, 11.0], [37.0, 78.54545454545456], [36.0, 24.307692307692307], [39.0, 200.5], [38.0, 205.5], [40.0, 274.87499999999994], [41.0, 7.625], [43.0, 73.83333333333333], [42.0, 17.400000000000002], [45.0, 76.81818181818181], [44.0, 9.4], [46.0, 46.6], [47.0, 7.0], [48.0, 30.727272727272723], [49.0, 9.333333333333334], [51.0, 36.3], [50.0, 245.14285714285717], [53.0, 219.07142857142856], [52.0, 61.58333333333335], [55.0, 100.60000000000002], [54.0, 133.0], [57.0, 87.0], [56.0, 13.999999999999998], [59.0, 25.307692307692303], [58.0, 9.363636363636363], [61.0, 24.142857142857142], [60.0, 11.0], [62.0, 9.379310344827587], [63.0, 9.812500000000002], [64.0, 18.761324176996766], [66.0, 41.25], [67.0, 7.25], [65.0, 7.999999999999999], [68.0, 26.0], [70.0, 11.75], [71.0, 7.545454545454545], [69.0, 7.0], [72.0, 10.5], [75.0, 15.166666666666668], [74.0, 7.25], [73.0, 28.714285714285715], [79.0, 368.6], [78.0, 8.0], [77.0, 38.5], [76.0, 8.285714285714286], [80.0, 145.71428571428572], [82.0, 12.8], [83.0, 7.333333333333333], [81.0, 16.5], [84.0, 11.416666666666668], [87.0, 18.3], [86.0, 16.933333333333337], [85.0, 9.0], [91.0, 32.416666666666664], [90.0, 148.0], [88.0, 19.0], [92.0, 8.75], [93.0, 25.26666666666667], [95.0, 23.571428571428573], [94.0, 9.514285714285714], [97.0, 27.166666666666668], [98.0, 39.4], [99.0, 43.33333333333333], [96.0, 137.0], [102.0, 20.142857142857142], [103.0, 68.0], [101.0, 51.0], [100.0, 7.666666666666667], [105.0, 9.0], [107.0, 90.0], [106.0, 25.41666666666667], [104.0, 7.75], [110.0, 16.0], [109.0, 30.750000000000004], [108.0, 52.666666666666664], [113.0, 9.125], [115.0, 7.0], [114.0, 9.38888888888889], [112.0, 19.0], [116.0, 202.14285714285714], [117.0, 137.16666666666666], [118.0, 8.0], [121.0, 23.0], [123.0, 32.833333333333336], [122.0, 7.75], [120.0, 6.0], [124.0, 12.5], [127.0, 6.0], [132.0, 33.0], [133.0, 74.0], [135.0, 6.5], [134.0, 7.142857142857143], [131.0, 6.333333333333333], [130.0, 8.0], [129.0, 7.0], [128.0, 7.8], [140.0, 13.444444444444443], [143.0, 10.333333333333334], [142.0, 6.0], [141.0, 31.666666666666664], [139.0, 30.0], [137.0, 7.4], [136.0, 8.333333333333334], [144.0, 8.36666666666667], [150.0, 14.545454545454545], [151.0, 37.88], [149.0, 6.285714285714286], [148.0, 7.562500000000001], [147.0, 7.203703703703707], [146.0, 7.6], [145.0, 6.0], [159.0, 19.0], [158.0, 33.57142857142857], [157.0, 6.0], [156.0, 24.900000000000002], [155.0, 37.50000000000001], [154.0, 6.666666666666667], [153.0, 23.384615384615387], [152.0, 20.444444444444446], [161.0, 39.333333333333336], [162.0, 8.0], [165.0, 27.0], [167.0, 25.125], [166.0, 58.0], [164.0, 7.0], [163.0, 58.0], [160.0, 32.714285714285715], [175.0, 36.78571428571428], [173.0, 7.0], [172.0, 19.846153846153843], [171.0, 6.142857142857143], [170.0, 6.444444444444445], [169.0, 6.821428571428572], [168.0, 10.863636363636363], [180.0, 30.500000000000004], [181.0, 10.341463414634147], [182.0, 107.1923076923077], [183.0, 256.47058823529414], [179.0, 16.758620689655178], [177.0, 37.91666666666667], [184.0, 12.312499999999998], [187.0, 8.979166666666668], [189.0, 17.0], [190.0, 75.6], [191.0, 46.06122448979591], [188.0, 8.0], [186.0, 6.777777777777778], [185.0, 8.445783132530117], [194.0, 69.42105263157893], [196.0, 26.839999999999996], [198.0, 31.545454545454547], [199.0, 19.36842105263158], [197.0, 23.5], [195.0, 7.0], [193.0, 32.11764705882353], [205.0, 465.4], [207.0, 98.79999999999998], [206.0, 7.375], [204.0, 16.62162162162162], [202.0, 7.916666666666668], [201.0, 6.583333333333334], [200.0, 7.0], [209.0, 44.61538461538461], [210.0, 14.807692307692307], [212.0, 27.558823529411775], [215.0, 20.027027027027028], [214.0, 15.571428571428571], [213.0, 22.903448275862072], [211.0, 7.013333333333333], [208.0, 20.75], [223.0, 26.671875000000007], [222.0, 31.769230769230763], [221.0, 23.571428571428573], [220.0, 85.26666666666665], [219.0, 8.566115702479339], [218.0, 20.636363636363637], [217.0, 18.454716981132066], [216.0, 12.576086956521737], [225.0, 12.016483516483516], [228.0, 25.058823529411757], [229.0, 32.44444444444444], [231.0, 50.67796610169489], [230.0, 6.666666666666666], [227.0, 358.5], [226.0, 13.777777777777779], [224.0, 23.029411764705888], [234.0, 43.0], [235.0, 25.04545454545455], [236.0, 32.27777777777778], [239.0, 6.75], [238.0, 8.695652173913045], [237.0, 7.285714285714286], [233.0, 19.603773584905667], [232.0, 33.66666666666668], [245.0, 15.222222222222221], [247.0, 7.571428571428571], [246.0, 11.542635658914737], [244.0, 11.642857142857144], [243.0, 46.77777777777778], [242.0, 5.8], [241.0, 17.090909090909093], [240.0, 91.06666666666668], [250.0, 76.5], [251.0, 139.14285714285717], [254.0, 103.09999999999998], [255.0, 79.85185185185185], [253.0, 37.1578947368421], [252.0, 11.6], [249.0, 7.0], [248.0, 13.666666666666666], [256.0, 46.196473345936006], [1.0, 99.0]], "isOverall": false, "label": "Get_Request", "isController": false}, {"data": [[210.06275474382423, 39.62586510317253]], "isOverall": false, "label": "Get_Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 256.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 22895.416666666668, "minX": 1.62512058E12, "maxY": 2241835.15, "series": [{"data": [[1.62512076E12, 833331.3166666667], [1.62512058E12, 27466.65], [1.6251207E12, 2241835.15], [1.62512064E12, 537690.5333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62512076E12, 739574.3833333333], [1.62512058E12, 22895.416666666668], [1.6251207E12, 1989744.6833333333], [1.62512064E12, 477176.6666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512076E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9.507107777213498, "minX": 1.62512058E12, "maxY": 312.7281092312271, "series": [{"data": [[1.62512076E12, 9.507107777213498], [1.62512058E12, 295.65771604938266], [1.6251207E12, 27.971477864246197], [1.62512064E12, 119.559774552194]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512076E12, 9.709711793176256], [1.62512058E12, 312.7281092312271], [1.6251207E12, 28.277019397023032], [1.62512064E12, 119.0882561728381]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512076E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9.505344530448408, "minX": 1.62512058E12, "maxY": 312.720391807659, "series": [{"data": [[1.62512076E12, 9.505344530448408], [1.62512058E12, 295.652160493827], [1.6251207E12, 27.97010062716092], [1.62512064E12, 119.5579678814092]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512076E12, 9.708437070527939], [1.62512058E12, 312.720391807659], [1.6251207E12, 28.2754014358017], [1.62512064E12, 119.08677469135846]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512076E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62512058E12, "maxY": 23.41021074502824, "series": [{"data": [[1.62512076E12, 0.0], [1.62512058E12, 0.0], [1.6251207E12, 2.2213501366130716E-5], [1.62512064E12, 0.03358554663372454]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512076E12, 0.008206027048021246], [1.62512058E12, 23.41021074502824], [1.6251207E12, 0.0], [1.62512064E12, 0.09856481481481373]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512076E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.62512058E12, "maxY": 7479.0, "series": [{"data": [[1.62512076E12, 1538.0], [1.62512058E12, 3434.0], [1.6251207E12, 2335.0], [1.62512064E12, 7479.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62512076E12, 9.0], [1.62512058E12, 778.0], [1.6251207E12, 41.0], [1.62512064E12, 104.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62512076E12, 68.0], [1.62512058E12, 2206.699999999999], [1.6251207E12, 192.9900000000016], [1.62512064E12, 383.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62512076E12, 10.0], [1.62512058E12, 1196.0], [1.6251207E12, 71.0], [1.62512064E12, 182.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62512076E12, 4.0], [1.62512058E12, 5.0], [1.6251207E12, 3.0], [1.62512064E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62512076E12, 7.0], [1.62512058E12, 98.0], [1.6251207E12, 7.0], [1.62512064E12, 11.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512076E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 3.0, "maxY": 1778.0, "series": [{"data": [[3.0, 793.0], [25.0, 1697.0], [29.0, 1778.0], [8509.0, 7.0], [9109.0, 8.0], [9311.0, 8.0], [9841.0, 8.0], [10179.0, 8.0], [10743.0, 8.0], [11877.0, 8.0], [11919.0, 8.0], [12073.0, 8.0], [12127.0, 8.0], [12043.0, 7.0], [12767.0, 8.0], [12347.0, 7.0], [12887.0, 8.0], [12969.0, 7.0], [55.0, 1281.0], [58.0, 1070.0], [93.0, 102.0], [117.0, 97.0], [121.0, 195.0], [132.0, 719.5], [135.0, 786.0], [141.0, 605.0], [169.0, 108.0], [173.0, 495.0], [168.0, 8.0], [182.0, 496.5], [193.0, 85.0], [201.0, 9.0], [215.0, 9.0], [225.0, 322.5], [243.0, 10.0], [255.0, 97.0], [266.0, 97.0], [262.0, 316.5], [264.0, 95.0], [286.0, 97.5], [287.0, 11.0], [290.0, 292.0], [303.0, 227.0], [293.0, 211.0], [298.0, 193.0], [331.0, 204.0], [333.0, 26.5], [343.0, 13.0], [338.0, 15.0], [355.0, 95.0], [363.0, 12.0], [411.0, 10.0], [402.0, 12.0], [425.0, 67.0], [560.0, 41.5], [727.0, 60.0], [762.0, 90.0], [800.0, 100.0], [873.0, 77.0], [891.0, 74.0], [986.0, 51.0], [1102.0, 97.0], [1177.0, 118.0], [1162.0, 135.0], [1187.0, 156.0], [1332.0, 158.0], [1356.0, 138.0], [1427.0, 146.0], [1426.0, 7.0], [1532.0, 142.5], [1494.0, 122.0], [1618.0, 79.5], [1671.0, 50.0], [1692.0, 11.0], [1686.0, 11.0], [1779.0, 29.0], [1835.0, 11.0], [1820.0, 11.5], [1843.0, 11.0], [1890.0, 11.0], [1882.0, 12.0], [2111.0, 11.0], [2064.0, 11.0], [2082.0, 11.0], [2116.0, 11.0], [2426.0, 11.0], [2532.0, 11.0], [2668.0, 11.0], [2841.0, 11.0], [3000.0, 10.0], [3239.0, 11.0], [3213.0, 10.0], [3372.0, 10.0], [3591.0, 10.0], [3763.0, 10.0], [3810.0, 10.0], [3927.0, 10.0], [4168.0, 10.0], [4457.0, 10.0], [4562.0, 7.0], [4733.0, 11.0], [5060.0, 10.0], [5089.0, 13.0], [5259.0, 10.0], [5295.0, 10.0], [5371.0, 10.0], [5314.0, 11.0], [5358.0, 12.0], [5153.0, 12.0], [5274.0, 11.0], [5356.0, 11.0], [5279.0, 7.0], [5460.0, 11.0], [5464.0, 12.0], [5429.0, 11.0], [5408.0, 10.0], [5602.0, 10.0], [5560.0, 10.0], [5572.0, 8.0], [5435.0, 9.0], [5700.0, 11.0], [5650.0, 11.0], [5855.0, 7.0], [5871.0, 7.0], [5886.0, 7.0], [5684.0, 9.0], [5939.0, 11.0], [6050.0, 11.0], [5991.0, 7.0], [6125.0, 7.0], [6246.0, 10.0], [6166.0, 7.0], [6491.0, 7.0], [6412.0, 7.0], [6624.0, 8.0], [6668.0, 10.0], [6825.0, 10.0], [6729.0, 7.0], [6782.0, 7.0], [7167.0, 11.0], [7047.0, 10.0], [6914.0, 7.0], [6938.0, 7.0], [7039.0, 7.0], [7098.0, 7.0], [7370.0, 7.0], [7412.0, 10.0], [7350.0, 10.0], [7267.0, 7.0], [7276.0, 7.0], [7305.0, 7.0], [7289.0, 7.0], [7352.0, 7.0], [7404.0, 7.0], [7219.0, 7.0], [7361.0, 7.0], [7588.0, 9.0], [7586.0, 9.0], [7672.0, 7.0], [7694.0, 9.0], [7682.0, 7.0], [8002.0, 9.0], [8117.0, 9.0], [8462.0, 9.0], [8800.0, 9.0], [8968.0, 9.0], [9242.0, 8.0], [9532.0, 8.0], [10112.0, 8.0], [9956.0, 7.0], [11010.0, 8.0], [10994.0, 7.0], [11410.0, 8.0], [12032.0, 8.0], [12082.0, 8.0], [12368.0, 8.0], [13046.0, 7.0], [12896.0, 7.0], [13064.0, 7.0], [13404.0, 7.0], [13736.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 13736.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 3.0, "maxY": 1778.0, "series": [{"data": [[3.0, 792.0], [25.0, 1697.0], [29.0, 1778.0], [8509.0, 7.0], [9109.0, 8.0], [9311.0, 8.0], [9841.0, 8.0], [10179.0, 8.0], [10743.0, 8.0], [11877.0, 8.0], [11919.0, 8.0], [12073.0, 8.0], [12127.0, 8.0], [12043.0, 7.0], [12767.0, 8.0], [12347.0, 7.0], [12887.0, 8.0], [12969.0, 7.0], [55.0, 1281.0], [58.0, 1070.0], [93.0, 102.0], [117.0, 97.0], [121.0, 195.0], [132.0, 719.5], [135.0, 786.0], [141.0, 605.0], [169.0, 108.0], [173.0, 495.0], [168.0, 8.0], [182.0, 496.5], [193.0, 85.0], [201.0, 9.0], [215.0, 9.0], [225.0, 322.5], [243.0, 10.0], [255.0, 97.0], [266.0, 97.0], [262.0, 316.5], [264.0, 95.0], [286.0, 97.5], [287.0, 10.0], [290.0, 292.0], [303.0, 227.0], [293.0, 211.0], [298.0, 193.0], [331.0, 204.0], [333.0, 26.5], [343.0, 13.0], [338.0, 15.0], [355.0, 95.0], [363.0, 12.0], [411.0, 10.0], [402.0, 12.0], [425.0, 67.0], [560.0, 41.5], [727.0, 60.0], [762.0, 90.0], [800.0, 100.0], [873.0, 77.0], [891.0, 74.0], [986.0, 51.0], [1102.0, 97.0], [1177.0, 118.0], [1162.0, 135.0], [1187.0, 156.0], [1332.0, 158.0], [1356.0, 138.0], [1427.0, 146.0], [1426.0, 7.0], [1532.0, 142.5], [1494.0, 122.0], [1618.0, 79.5], [1671.0, 50.0], [1692.0, 11.0], [1686.0, 11.0], [1779.0, 29.0], [1835.0, 11.0], [1820.0, 11.5], [1843.0, 11.0], [1890.0, 11.0], [1882.0, 12.0], [2111.0, 11.0], [2064.0, 11.0], [2082.0, 11.0], [2116.0, 11.0], [2426.0, 11.0], [2532.0, 11.0], [2668.0, 11.0], [2841.0, 11.0], [3000.0, 10.0], [3239.0, 11.0], [3213.0, 10.0], [3372.0, 10.0], [3591.0, 10.0], [3763.0, 10.0], [3810.0, 10.0], [3927.0, 10.0], [4168.0, 10.0], [4457.0, 10.0], [4562.0, 7.0], [4733.0, 11.0], [5060.0, 10.0], [5089.0, 13.0], [5259.0, 10.0], [5295.0, 10.0], [5371.0, 10.0], [5314.0, 11.0], [5358.0, 12.0], [5153.0, 12.0], [5274.0, 11.0], [5356.0, 11.0], [5279.0, 7.0], [5460.0, 11.0], [5464.0, 12.0], [5429.0, 11.0], [5408.0, 10.0], [5602.0, 10.0], [5560.0, 10.0], [5572.0, 8.0], [5435.0, 9.0], [5700.0, 11.0], [5650.0, 11.0], [5855.0, 7.0], [5871.0, 7.0], [5886.0, 7.0], [5684.0, 9.0], [5939.0, 11.0], [6050.0, 11.0], [5991.0, 7.0], [6125.0, 7.0], [6246.0, 10.0], [6166.0, 7.0], [6491.0, 7.0], [6412.0, 7.0], [6624.0, 8.0], [6668.0, 10.0], [6825.0, 10.0], [6729.0, 7.0], [6782.0, 7.0], [7167.0, 11.0], [7047.0, 10.0], [6914.0, 7.0], [6938.0, 7.0], [7039.0, 7.0], [7098.0, 7.0], [7370.0, 7.0], [7412.0, 10.0], [7350.0, 10.0], [7267.0, 7.0], [7276.0, 7.0], [7305.0, 7.0], [7289.0, 7.0], [7352.0, 7.0], [7404.0, 7.0], [7219.0, 7.0], [7361.0, 7.0], [7588.0, 9.0], [7586.0, 9.0], [7672.0, 7.0], [7694.0, 9.0], [7682.0, 7.0], [8002.0, 9.0], [8117.0, 9.0], [8462.0, 9.0], [8800.0, 9.0], [8968.0, 9.0], [9242.0, 8.0], [9532.0, 8.0], [10112.0, 8.0], [9956.0, 7.0], [11010.0, 8.0], [10994.0, 7.0], [11410.0, 8.0], [12032.0, 8.0], [12082.0, 8.0], [12368.0, 8.0], [13046.0, 7.0], [12896.0, 7.0], [13064.0, 7.0], [13404.0, 7.0], [13736.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 13736.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 114.41666666666667, "minX": 1.62512058E12, "maxY": 8999.2, "series": [{"data": [[1.62512076E12, 3346.4666666666667], [1.62512058E12, 114.41666666666667], [1.6251207E12, 8999.2], [1.62512064E12, 2159.3333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512076E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 110.15, "minX": 1.62512058E12, "maxY": 9003.316666666668, "series": [{"data": [[1.62512076E12, 3346.616666666667], [1.62512058E12, 110.15], [1.6251207E12, 9003.316666666668], [1.62512064E12, 2159.3333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512076E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 54.0, "minX": 1.62512058E12, "maxY": 4501.766666666666, "series": [{"data": [[1.62512076E12, 1673.5666666666666], [1.62512058E12, 56.15], [1.6251207E12, 4501.55], [1.62512064E12, 1080.0]], "isOverall": false, "label": "Get_Request-success", "isController": false}, {"data": [[1.62512076E12, 1673.05], [1.62512058E12, 54.0], [1.6251207E12, 4501.766666666666], [1.62512064E12, 1079.3333333333333]], "isOverall": false, "label": "Post_Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512076E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 110.15, "minX": 1.62512058E12, "maxY": 9003.316666666668, "series": [{"data": [[1.62512076E12, 3346.616666666667], [1.62512058E12, 110.15], [1.6251207E12, 9003.316666666668], [1.62512064E12, 2159.3333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512076E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

