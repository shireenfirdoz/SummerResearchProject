/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 8244.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 8.0], [31.2, 8.0], [31.3, 8.0], [31.4, 8.0], [31.5, 8.0], [31.6, 8.0], [31.7, 8.0], [31.8, 8.0], [31.9, 8.0], [32.0, 8.0], [32.1, 8.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 8.0], [33.0, 8.0], [33.1, 8.0], [33.2, 8.0], [33.3, 8.0], [33.4, 8.0], [33.5, 8.0], [33.6, 8.0], [33.7, 8.0], [33.8, 8.0], [33.9, 8.0], [34.0, 8.0], [34.1, 8.0], [34.2, 8.0], [34.3, 8.0], [34.4, 8.0], [34.5, 8.0], [34.6, 8.0], [34.7, 8.0], [34.8, 8.0], [34.9, 8.0], [35.0, 8.0], [35.1, 8.0], [35.2, 8.0], [35.3, 8.0], [35.4, 8.0], [35.5, 8.0], [35.6, 8.0], [35.7, 8.0], [35.8, 8.0], [35.9, 8.0], [36.0, 8.0], [36.1, 8.0], [36.2, 8.0], [36.3, 8.0], [36.4, 8.0], [36.5, 8.0], [36.6, 8.0], [36.7, 8.0], [36.8, 8.0], [36.9, 8.0], [37.0, 8.0], [37.1, 8.0], [37.2, 8.0], [37.3, 8.0], [37.4, 8.0], [37.5, 8.0], [37.6, 8.0], [37.7, 8.0], [37.8, 8.0], [37.9, 8.0], [38.0, 8.0], [38.1, 8.0], [38.2, 8.0], [38.3, 8.0], [38.4, 8.0], [38.5, 8.0], [38.6, 8.0], [38.7, 8.0], [38.8, 8.0], [38.9, 8.0], [39.0, 8.0], [39.1, 8.0], [39.2, 8.0], [39.3, 8.0], [39.4, 8.0], [39.5, 8.0], [39.6, 8.0], [39.7, 8.0], [39.8, 8.0], [39.9, 8.0], [40.0, 8.0], [40.1, 8.0], [40.2, 8.0], [40.3, 8.0], [40.4, 8.0], [40.5, 8.0], [40.6, 8.0], [40.7, 8.0], [40.8, 8.0], [40.9, 8.0], [41.0, 8.0], [41.1, 8.0], [41.2, 8.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 8.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 9.0], [44.8, 9.0], [44.9, 9.0], [45.0, 9.0], [45.1, 9.0], [45.2, 9.0], [45.3, 9.0], [45.4, 9.0], [45.5, 9.0], [45.6, 9.0], [45.7, 9.0], [45.8, 9.0], [45.9, 9.0], [46.0, 9.0], [46.1, 9.0], [46.2, 9.0], [46.3, 9.0], [46.4, 9.0], [46.5, 9.0], [46.6, 9.0], [46.7, 9.0], [46.8, 9.0], [46.9, 9.0], [47.0, 9.0], [47.1, 9.0], [47.2, 9.0], [47.3, 9.0], [47.4, 9.0], [47.5, 9.0], [47.6, 9.0], [47.7, 9.0], [47.8, 9.0], [47.9, 9.0], [48.0, 9.0], [48.1, 9.0], [48.2, 9.0], [48.3, 9.0], [48.4, 9.0], [48.5, 9.0], [48.6, 9.0], [48.7, 9.0], [48.8, 9.0], [48.9, 9.0], [49.0, 9.0], [49.1, 9.0], [49.2, 9.0], [49.3, 9.0], [49.4, 9.0], [49.5, 9.0], [49.6, 9.0], [49.7, 9.0], [49.8, 9.0], [49.9, 9.0], [50.0, 9.0], [50.1, 9.0], [50.2, 9.0], [50.3, 9.0], [50.4, 9.0], [50.5, 9.0], [50.6, 9.0], [50.7, 9.0], [50.8, 9.0], [50.9, 9.0], [51.0, 9.0], [51.1, 9.0], [51.2, 9.0], [51.3, 9.0], [51.4, 9.0], [51.5, 9.0], [51.6, 9.0], [51.7, 9.0], [51.8, 9.0], [51.9, 9.0], [52.0, 9.0], [52.1, 9.0], [52.2, 9.0], [52.3, 9.0], [52.4, 9.0], [52.5, 9.0], [52.6, 9.0], [52.7, 9.0], [52.8, 9.0], [52.9, 9.0], [53.0, 9.0], [53.1, 9.0], [53.2, 9.0], [53.3, 9.0], [53.4, 9.0], [53.5, 9.0], [53.6, 9.0], [53.7, 9.0], [53.8, 9.0], [53.9, 9.0], [54.0, 9.0], [54.1, 9.0], [54.2, 9.0], [54.3, 9.0], [54.4, 9.0], [54.5, 10.0], [54.6, 10.0], [54.7, 10.0], [54.8, 10.0], [54.9, 10.0], [55.0, 10.0], [55.1, 10.0], [55.2, 10.0], [55.3, 10.0], [55.4, 10.0], [55.5, 10.0], [55.6, 10.0], [55.7, 10.0], [55.8, 10.0], [55.9, 10.0], [56.0, 10.0], [56.1, 10.0], [56.2, 10.0], [56.3, 10.0], [56.4, 10.0], [56.5, 10.0], [56.6, 10.0], [56.7, 10.0], [56.8, 10.0], [56.9, 10.0], [57.0, 10.0], [57.1, 10.0], [57.2, 10.0], [57.3, 10.0], [57.4, 10.0], [57.5, 10.0], [57.6, 10.0], [57.7, 10.0], [57.8, 10.0], [57.9, 10.0], [58.0, 10.0], [58.1, 10.0], [58.2, 10.0], [58.3, 10.0], [58.4, 10.0], [58.5, 10.0], [58.6, 10.0], [58.7, 10.0], [58.8, 10.0], [58.9, 10.0], [59.0, 10.0], [59.1, 10.0], [59.2, 10.0], [59.3, 10.0], [59.4, 10.0], [59.5, 10.0], [59.6, 10.0], [59.7, 10.0], [59.8, 10.0], [59.9, 10.0], [60.0, 10.0], [60.1, 10.0], [60.2, 10.0], [60.3, 10.0], [60.4, 10.0], [60.5, 10.0], [60.6, 10.0], [60.7, 10.0], [60.8, 10.0], [60.9, 11.0], [61.0, 11.0], [61.1, 11.0], [61.2, 11.0], [61.3, 11.0], [61.4, 11.0], [61.5, 11.0], [61.6, 11.0], [61.7, 11.0], [61.8, 11.0], [61.9, 11.0], [62.0, 11.0], [62.1, 11.0], [62.2, 11.0], [62.3, 11.0], [62.4, 11.0], [62.5, 11.0], [62.6, 11.0], [62.7, 11.0], [62.8, 11.0], [62.9, 11.0], [63.0, 11.0], [63.1, 11.0], [63.2, 11.0], [63.3, 11.0], [63.4, 11.0], [63.5, 11.0], [63.6, 11.0], [63.7, 11.0], [63.8, 11.0], [63.9, 11.0], [64.0, 11.0], [64.1, 11.0], [64.2, 11.0], [64.3, 11.0], [64.4, 11.0], [64.5, 12.0], [64.6, 12.0], [64.7, 12.0], [64.8, 12.0], [64.9, 12.0], [65.0, 12.0], [65.1, 12.0], [65.2, 12.0], [65.3, 12.0], [65.4, 12.0], [65.5, 12.0], [65.6, 12.0], [65.7, 12.0], [65.8, 12.0], [65.9, 12.0], [66.0, 12.0], [66.1, 12.0], [66.2, 12.0], [66.3, 12.0], [66.4, 13.0], [66.5, 13.0], [66.6, 13.0], [66.7, 13.0], [66.8, 13.0], [66.9, 13.0], [67.0, 13.0], [67.1, 13.0], [67.2, 13.0], [67.3, 13.0], [67.4, 14.0], [67.5, 14.0], [67.6, 14.0], [67.7, 14.0], [67.8, 14.0], [67.9, 14.0], [68.0, 15.0], [68.1, 15.0], [68.2, 15.0], [68.3, 15.0], [68.4, 16.0], [68.5, 16.0], [68.6, 16.0], [68.7, 17.0], [68.8, 17.0], [68.9, 17.0], [69.0, 18.0], [69.1, 18.0], [69.2, 19.0], [69.3, 19.0], [69.4, 20.0], [69.5, 21.0], [69.6, 21.0], [69.7, 22.0], [69.8, 23.0], [69.9, 24.0], [70.0, 24.0], [70.1, 25.0], [70.2, 26.0], [70.3, 27.0], [70.4, 27.0], [70.5, 28.0], [70.6, 29.0], [70.7, 29.0], [70.8, 30.0], [70.9, 31.0], [71.0, 32.0], [71.1, 32.0], [71.2, 33.0], [71.3, 34.0], [71.4, 34.0], [71.5, 35.0], [71.6, 36.0], [71.7, 36.0], [71.8, 37.0], [71.9, 37.0], [72.0, 38.0], [72.1, 38.0], [72.2, 39.0], [72.3, 39.0], [72.4, 40.0], [72.5, 41.0], [72.6, 41.0], [72.7, 41.0], [72.8, 42.0], [72.9, 42.0], [73.0, 43.0], [73.1, 43.0], [73.2, 44.0], [73.3, 44.0], [73.4, 45.0], [73.5, 45.0], [73.6, 46.0], [73.7, 46.0], [73.8, 47.0], [73.9, 47.0], [74.0, 48.0], [74.1, 48.0], [74.2, 49.0], [74.3, 49.0], [74.4, 49.0], [74.5, 50.0], [74.6, 50.0], [74.7, 51.0], [74.8, 51.0], [74.9, 52.0], [75.0, 52.0], [75.1, 52.0], [75.2, 53.0], [75.3, 53.0], [75.4, 54.0], [75.5, 54.0], [75.6, 55.0], [75.7, 55.0], [75.8, 55.0], [75.9, 56.0], [76.0, 56.0], [76.1, 57.0], [76.2, 57.0], [76.3, 58.0], [76.4, 58.0], [76.5, 58.0], [76.6, 59.0], [76.7, 59.0], [76.8, 60.0], [76.9, 60.0], [77.0, 60.0], [77.1, 61.0], [77.2, 61.0], [77.3, 62.0], [77.4, 62.0], [77.5, 63.0], [77.6, 63.0], [77.7, 63.0], [77.8, 64.0], [77.9, 64.0], [78.0, 65.0], [78.1, 65.0], [78.2, 65.0], [78.3, 66.0], [78.4, 66.0], [78.5, 66.0], [78.6, 67.0], [78.7, 67.0], [78.8, 67.0], [78.9, 68.0], [79.0, 68.0], [79.1, 68.0], [79.2, 69.0], [79.3, 69.0], [79.4, 69.0], [79.5, 69.0], [79.6, 70.0], [79.7, 70.0], [79.8, 70.0], [79.9, 71.0], [80.0, 71.0], [80.1, 71.0], [80.2, 71.0], [80.3, 72.0], [80.4, 72.0], [80.5, 72.0], [80.6, 72.0], [80.7, 73.0], [80.8, 73.0], [80.9, 73.0], [81.0, 73.0], [81.1, 74.0], [81.2, 74.0], [81.3, 74.0], [81.4, 74.0], [81.5, 74.0], [81.6, 75.0], [81.7, 75.0], [81.8, 75.0], [81.9, 75.0], [82.0, 76.0], [82.1, 76.0], [82.2, 76.0], [82.3, 76.0], [82.4, 76.0], [82.5, 77.0], [82.6, 77.0], [82.7, 77.0], [82.8, 77.0], [82.9, 77.0], [83.0, 78.0], [83.1, 78.0], [83.2, 78.0], [83.3, 78.0], [83.4, 78.0], [83.5, 79.0], [83.6, 79.0], [83.7, 79.0], [83.8, 79.0], [83.9, 79.0], [84.0, 80.0], [84.1, 80.0], [84.2, 80.0], [84.3, 80.0], [84.4, 80.0], [84.5, 81.0], [84.6, 81.0], [84.7, 81.0], [84.8, 81.0], [84.9, 81.0], [85.0, 82.0], [85.1, 82.0], [85.2, 82.0], [85.3, 82.0], [85.4, 82.0], [85.5, 83.0], [85.6, 83.0], [85.7, 83.0], [85.8, 83.0], [85.9, 83.0], [86.0, 84.0], [86.1, 84.0], [86.2, 84.0], [86.3, 84.0], [86.4, 85.0], [86.5, 85.0], [86.6, 85.0], [86.7, 85.0], [86.8, 86.0], [86.9, 86.0], [87.0, 86.0], [87.1, 86.0], [87.2, 87.0], [87.3, 87.0], [87.4, 87.0], [87.5, 87.0], [87.6, 88.0], [87.7, 88.0], [87.8, 88.0], [87.9, 89.0], [88.0, 89.0], [88.1, 89.0], [88.2, 89.0], [88.3, 90.0], [88.4, 90.0], [88.5, 90.0], [88.6, 91.0], [88.7, 91.0], [88.8, 91.0], [88.9, 91.0], [89.0, 92.0], [89.1, 92.0], [89.2, 92.0], [89.3, 93.0], [89.4, 93.0], [89.5, 93.0], [89.6, 93.0], [89.7, 94.0], [89.8, 94.0], [89.9, 94.0], [90.0, 95.0], [90.1, 95.0], [90.2, 95.0], [90.3, 95.0], [90.4, 96.0], [90.5, 96.0], [90.6, 96.0], [90.7, 97.0], [90.8, 97.0], [90.9, 97.0], [91.0, 98.0], [91.1, 98.0], [91.2, 98.0], [91.3, 99.0], [91.4, 99.0], [91.5, 100.0], [91.6, 100.0], [91.7, 100.0], [91.8, 101.0], [91.9, 101.0], [92.0, 102.0], [92.1, 103.0], [92.2, 104.0], [92.3, 104.0], [92.4, 106.0], [92.5, 107.0], [92.6, 109.0], [92.7, 111.0], [92.8, 114.0], [92.9, 117.0], [93.0, 121.0], [93.1, 125.0], [93.2, 129.0], [93.3, 132.0], [93.4, 135.0], [93.5, 139.0], [93.6, 142.0], [93.7, 145.0], [93.8, 148.0], [93.9, 151.0], [94.0, 155.0], [94.1, 159.0], [94.2, 163.0], [94.3, 167.0], [94.4, 172.0], [94.5, 175.0], [94.6, 179.0], [94.7, 183.0], [94.8, 186.0], [94.9, 189.0], [95.0, 192.0], [95.1, 195.0], [95.2, 197.0], [95.3, 200.0], [95.4, 203.0], [95.5, 206.0], [95.6, 210.0], [95.7, 216.0], [95.8, 227.0], [95.9, 239.0], [96.0, 249.0], [96.1, 260.0], [96.2, 273.0], [96.3, 282.0], [96.4, 289.0], [96.5, 294.0], [96.6, 299.0], [96.7, 307.0], [96.8, 321.0], [96.9, 343.0], [97.0, 361.0], [97.1, 379.0], [97.2, 392.0], [97.3, 402.0], [97.4, 428.0], [97.5, 453.0], [97.6, 478.0], [97.7, 491.0], [97.8, 502.0], [97.9, 525.0], [98.0, 552.0], [98.1, 578.0], [98.2, 594.0], [98.3, 609.0], [98.4, 644.0], [98.5, 680.0], [98.6, 701.0], [98.7, 746.0], [98.8, 789.0], [98.9, 848.0], [99.0, 901.0], [99.1, 987.0], [99.2, 1094.0], [99.3, 1217.0], [99.4, 1384.0], [99.5, 1553.0], [99.6, 1759.0], [99.7, 2353.0], [99.8, 3511.0], [99.9, 4226.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 4.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 7.0], [14.9, 7.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 8.0], [28.5, 8.0], [28.6, 8.0], [28.7, 8.0], [28.8, 8.0], [28.9, 8.0], [29.0, 8.0], [29.1, 8.0], [29.2, 8.0], [29.3, 8.0], [29.4, 8.0], [29.5, 8.0], [29.6, 8.0], [29.7, 8.0], [29.8, 8.0], [29.9, 8.0], [30.0, 8.0], [30.1, 8.0], [30.2, 8.0], [30.3, 8.0], [30.4, 8.0], [30.5, 8.0], [30.6, 8.0], [30.7, 8.0], [30.8, 8.0], [30.9, 8.0], [31.0, 8.0], [31.1, 8.0], [31.2, 8.0], [31.3, 8.0], [31.4, 8.0], [31.5, 8.0], [31.6, 8.0], [31.7, 8.0], [31.8, 8.0], [31.9, 8.0], [32.0, 8.0], [32.1, 8.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 8.0], [33.0, 8.0], [33.1, 8.0], [33.2, 8.0], [33.3, 8.0], [33.4, 8.0], [33.5, 8.0], [33.6, 8.0], [33.7, 8.0], [33.8, 8.0], [33.9, 8.0], [34.0, 8.0], [34.1, 8.0], [34.2, 8.0], [34.3, 8.0], [34.4, 8.0], [34.5, 8.0], [34.6, 8.0], [34.7, 8.0], [34.8, 8.0], [34.9, 8.0], [35.0, 8.0], [35.1, 8.0], [35.2, 8.0], [35.3, 8.0], [35.4, 8.0], [35.5, 8.0], [35.6, 8.0], [35.7, 8.0], [35.8, 8.0], [35.9, 8.0], [36.0, 8.0], [36.1, 8.0], [36.2, 8.0], [36.3, 8.0], [36.4, 8.0], [36.5, 8.0], [36.6, 8.0], [36.7, 8.0], [36.8, 8.0], [36.9, 8.0], [37.0, 8.0], [37.1, 8.0], [37.2, 8.0], [37.3, 8.0], [37.4, 8.0], [37.5, 8.0], [37.6, 8.0], [37.7, 8.0], [37.8, 8.0], [37.9, 8.0], [38.0, 8.0], [38.1, 8.0], [38.2, 8.0], [38.3, 8.0], [38.4, 8.0], [38.5, 8.0], [38.6, 8.0], [38.7, 8.0], [38.8, 8.0], [38.9, 8.0], [39.0, 8.0], [39.1, 8.0], [39.2, 8.0], [39.3, 8.0], [39.4, 8.0], [39.5, 8.0], [39.6, 8.0], [39.7, 8.0], [39.8, 8.0], [39.9, 8.0], [40.0, 8.0], [40.1, 8.0], [40.2, 8.0], [40.3, 8.0], [40.4, 8.0], [40.5, 8.0], [40.6, 8.0], [40.7, 8.0], [40.8, 8.0], [40.9, 8.0], [41.0, 8.0], [41.1, 8.0], [41.2, 8.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 9.0], [42.9, 9.0], [43.0, 9.0], [43.1, 9.0], [43.2, 9.0], [43.3, 9.0], [43.4, 9.0], [43.5, 9.0], [43.6, 9.0], [43.7, 9.0], [43.8, 9.0], [43.9, 9.0], [44.0, 9.0], [44.1, 9.0], [44.2, 9.0], [44.3, 9.0], [44.4, 9.0], [44.5, 9.0], [44.6, 9.0], [44.7, 9.0], [44.8, 9.0], [44.9, 9.0], [45.0, 9.0], [45.1, 9.0], [45.2, 9.0], [45.3, 9.0], [45.4, 9.0], [45.5, 9.0], [45.6, 9.0], [45.7, 9.0], [45.8, 9.0], [45.9, 9.0], [46.0, 9.0], [46.1, 9.0], [46.2, 9.0], [46.3, 9.0], [46.4, 9.0], [46.5, 9.0], [46.6, 9.0], [46.7, 9.0], [46.8, 9.0], [46.9, 9.0], [47.0, 9.0], [47.1, 9.0], [47.2, 9.0], [47.3, 9.0], [47.4, 9.0], [47.5, 9.0], [47.6, 9.0], [47.7, 9.0], [47.8, 9.0], [47.9, 9.0], [48.0, 9.0], [48.1, 9.0], [48.2, 9.0], [48.3, 9.0], [48.4, 9.0], [48.5, 9.0], [48.6, 9.0], [48.7, 9.0], [48.8, 9.0], [48.9, 9.0], [49.0, 9.0], [49.1, 9.0], [49.2, 9.0], [49.3, 9.0], [49.4, 9.0], [49.5, 9.0], [49.6, 9.0], [49.7, 9.0], [49.8, 9.0], [49.9, 9.0], [50.0, 9.0], [50.1, 9.0], [50.2, 9.0], [50.3, 9.0], [50.4, 9.0], [50.5, 9.0], [50.6, 9.0], [50.7, 9.0], [50.8, 9.0], [50.9, 9.0], [51.0, 9.0], [51.1, 9.0], [51.2, 9.0], [51.3, 9.0], [51.4, 9.0], [51.5, 9.0], [51.6, 9.0], [51.7, 9.0], [51.8, 9.0], [51.9, 9.0], [52.0, 9.0], [52.1, 9.0], [52.2, 9.0], [52.3, 9.0], [52.4, 9.0], [52.5, 9.0], [52.6, 9.0], [52.7, 9.0], [52.8, 9.0], [52.9, 9.0], [53.0, 9.0], [53.1, 9.0], [53.2, 10.0], [53.3, 10.0], [53.4, 10.0], [53.5, 10.0], [53.6, 10.0], [53.7, 10.0], [53.8, 10.0], [53.9, 10.0], [54.0, 10.0], [54.1, 10.0], [54.2, 10.0], [54.3, 10.0], [54.4, 10.0], [54.5, 10.0], [54.6, 10.0], [54.7, 10.0], [54.8, 10.0], [54.9, 10.0], [55.0, 10.0], [55.1, 10.0], [55.2, 10.0], [55.3, 10.0], [55.4, 10.0], [55.5, 10.0], [55.6, 10.0], [55.7, 10.0], [55.8, 10.0], [55.9, 10.0], [56.0, 10.0], [56.1, 10.0], [56.2, 10.0], [56.3, 10.0], [56.4, 10.0], [56.5, 10.0], [56.6, 10.0], [56.7, 10.0], [56.8, 10.0], [56.9, 10.0], [57.0, 10.0], [57.1, 10.0], [57.2, 10.0], [57.3, 10.0], [57.4, 10.0], [57.5, 10.0], [57.6, 10.0], [57.7, 10.0], [57.8, 10.0], [57.9, 10.0], [58.0, 10.0], [58.1, 10.0], [58.2, 10.0], [58.3, 10.0], [58.4, 10.0], [58.5, 10.0], [58.6, 10.0], [58.7, 10.0], [58.8, 10.0], [58.9, 10.0], [59.0, 10.0], [59.1, 10.0], [59.2, 10.0], [59.3, 10.0], [59.4, 10.0], [59.5, 10.0], [59.6, 10.0], [59.7, 10.0], [59.8, 10.0], [59.9, 10.0], [60.0, 10.0], [60.1, 11.0], [60.2, 11.0], [60.3, 11.0], [60.4, 11.0], [60.5, 11.0], [60.6, 11.0], [60.7, 11.0], [60.8, 11.0], [60.9, 11.0], [61.0, 11.0], [61.1, 11.0], [61.2, 11.0], [61.3, 11.0], [61.4, 11.0], [61.5, 11.0], [61.6, 11.0], [61.7, 11.0], [61.8, 11.0], [61.9, 11.0], [62.0, 11.0], [62.1, 11.0], [62.2, 11.0], [62.3, 11.0], [62.4, 11.0], [62.5, 11.0], [62.6, 11.0], [62.7, 11.0], [62.8, 11.0], [62.9, 11.0], [63.0, 11.0], [63.1, 11.0], [63.2, 11.0], [63.3, 11.0], [63.4, 11.0], [63.5, 11.0], [63.6, 11.0], [63.7, 11.0], [63.8, 11.0], [63.9, 11.0], [64.0, 11.0], [64.1, 12.0], [64.2, 12.0], [64.3, 12.0], [64.4, 12.0], [64.5, 12.0], [64.6, 12.0], [64.7, 12.0], [64.8, 12.0], [64.9, 12.0], [65.0, 12.0], [65.1, 12.0], [65.2, 12.0], [65.3, 12.0], [65.4, 12.0], [65.5, 12.0], [65.6, 12.0], [65.7, 12.0], [65.8, 12.0], [65.9, 12.0], [66.0, 12.0], [66.1, 12.0], [66.2, 13.0], [66.3, 13.0], [66.4, 13.0], [66.5, 13.0], [66.6, 13.0], [66.7, 13.0], [66.8, 13.0], [66.9, 13.0], [67.0, 13.0], [67.1, 13.0], [67.2, 14.0], [67.3, 14.0], [67.4, 14.0], [67.5, 14.0], [67.6, 14.0], [67.7, 14.0], [67.8, 14.0], [67.9, 15.0], [68.0, 15.0], [68.1, 15.0], [68.2, 15.0], [68.3, 16.0], [68.4, 16.0], [68.5, 16.0], [68.6, 17.0], [68.7, 17.0], [68.8, 17.0], [68.9, 18.0], [69.0, 18.0], [69.1, 19.0], [69.2, 19.0], [69.3, 20.0], [69.4, 20.0], [69.5, 21.0], [69.6, 22.0], [69.7, 22.0], [69.8, 23.0], [69.9, 24.0], [70.0, 25.0], [70.1, 25.0], [70.2, 26.0], [70.3, 27.0], [70.4, 28.0], [70.5, 28.0], [70.6, 29.0], [70.7, 30.0], [70.8, 31.0], [70.9, 31.0], [71.0, 32.0], [71.1, 33.0], [71.2, 33.0], [71.3, 34.0], [71.4, 35.0], [71.5, 35.0], [71.6, 36.0], [71.7, 36.0], [71.8, 37.0], [71.9, 38.0], [72.0, 38.0], [72.1, 39.0], [72.2, 39.0], [72.3, 40.0], [72.4, 40.0], [72.5, 41.0], [72.6, 41.0], [72.7, 42.0], [72.8, 42.0], [72.9, 43.0], [73.0, 43.0], [73.1, 44.0], [73.2, 44.0], [73.3, 45.0], [73.4, 45.0], [73.5, 46.0], [73.6, 46.0], [73.7, 47.0], [73.8, 47.0], [73.9, 47.0], [74.0, 48.0], [74.1, 48.0], [74.2, 49.0], [74.3, 49.0], [74.4, 50.0], [74.5, 50.0], [74.6, 50.0], [74.7, 51.0], [74.8, 51.0], [74.9, 52.0], [75.0, 52.0], [75.1, 53.0], [75.2, 53.0], [75.3, 53.0], [75.4, 54.0], [75.5, 54.0], [75.6, 55.0], [75.7, 55.0], [75.8, 56.0], [75.9, 56.0], [76.0, 56.0], [76.1, 57.0], [76.2, 57.0], [76.3, 58.0], [76.4, 58.0], [76.5, 59.0], [76.6, 59.0], [76.7, 59.0], [76.8, 60.0], [76.9, 60.0], [77.0, 61.0], [77.1, 61.0], [77.2, 62.0], [77.3, 62.0], [77.4, 62.0], [77.5, 63.0], [77.6, 63.0], [77.7, 64.0], [77.8, 64.0], [77.9, 64.0], [78.0, 65.0], [78.1, 65.0], [78.2, 66.0], [78.3, 66.0], [78.4, 66.0], [78.5, 67.0], [78.6, 67.0], [78.7, 67.0], [78.8, 68.0], [78.9, 68.0], [79.0, 68.0], [79.1, 69.0], [79.2, 69.0], [79.3, 69.0], [79.4, 69.0], [79.5, 70.0], [79.6, 70.0], [79.7, 70.0], [79.8, 71.0], [79.9, 71.0], [80.0, 71.0], [80.1, 71.0], [80.2, 72.0], [80.3, 72.0], [80.4, 72.0], [80.5, 72.0], [80.6, 73.0], [80.7, 73.0], [80.8, 73.0], [80.9, 73.0], [81.0, 74.0], [81.1, 74.0], [81.2, 74.0], [81.3, 74.0], [81.4, 75.0], [81.5, 75.0], [81.6, 75.0], [81.7, 75.0], [81.8, 75.0], [81.9, 76.0], [82.0, 76.0], [82.1, 76.0], [82.2, 76.0], [82.3, 76.0], [82.4, 77.0], [82.5, 77.0], [82.6, 77.0], [82.7, 77.0], [82.8, 77.0], [82.9, 78.0], [83.0, 78.0], [83.1, 78.0], [83.2, 78.0], [83.3, 78.0], [83.4, 79.0], [83.5, 79.0], [83.6, 79.0], [83.7, 79.0], [83.8, 79.0], [83.9, 80.0], [84.0, 80.0], [84.1, 80.0], [84.2, 80.0], [84.3, 80.0], [84.4, 81.0], [84.5, 81.0], [84.6, 81.0], [84.7, 81.0], [84.8, 81.0], [84.9, 82.0], [85.0, 82.0], [85.1, 82.0], [85.2, 82.0], [85.3, 82.0], [85.4, 83.0], [85.5, 83.0], [85.6, 83.0], [85.7, 83.0], [85.8, 84.0], [85.9, 84.0], [86.0, 84.0], [86.1, 84.0], [86.2, 84.0], [86.3, 85.0], [86.4, 85.0], [86.5, 85.0], [86.6, 85.0], [86.7, 86.0], [86.8, 86.0], [86.9, 86.0], [87.0, 86.0], [87.1, 87.0], [87.2, 87.0], [87.3, 87.0], [87.4, 87.0], [87.5, 88.0], [87.6, 88.0], [87.7, 88.0], [87.8, 89.0], [87.9, 89.0], [88.0, 89.0], [88.1, 89.0], [88.2, 90.0], [88.3, 90.0], [88.4, 90.0], [88.5, 91.0], [88.6, 91.0], [88.7, 91.0], [88.8, 91.0], [88.9, 92.0], [89.0, 92.0], [89.1, 92.0], [89.2, 93.0], [89.3, 93.0], [89.4, 93.0], [89.5, 93.0], [89.6, 94.0], [89.7, 94.0], [89.8, 94.0], [89.9, 95.0], [90.0, 95.0], [90.1, 95.0], [90.2, 95.0], [90.3, 96.0], [90.4, 96.0], [90.5, 96.0], [90.6, 97.0], [90.7, 97.0], [90.8, 97.0], [90.9, 98.0], [91.0, 98.0], [91.1, 98.0], [91.2, 99.0], [91.3, 99.0], [91.4, 100.0], [91.5, 100.0], [91.6, 100.0], [91.7, 101.0], [91.8, 101.0], [91.9, 102.0], [92.0, 103.0], [92.1, 103.0], [92.2, 104.0], [92.3, 105.0], [92.4, 107.0], [92.5, 109.0], [92.6, 111.0], [92.7, 113.0], [92.8, 117.0], [92.9, 120.0], [93.0, 124.0], [93.1, 127.0], [93.2, 131.0], [93.3, 134.0], [93.4, 137.0], [93.5, 140.0], [93.6, 144.0], [93.7, 147.0], [93.8, 150.0], [93.9, 154.0], [94.0, 158.0], [94.1, 162.0], [94.2, 167.0], [94.3, 171.0], [94.4, 175.0], [94.5, 179.0], [94.6, 183.0], [94.7, 186.0], [94.8, 189.0], [94.9, 192.0], [95.0, 195.0], [95.1, 197.0], [95.2, 199.0], [95.3, 202.0], [95.4, 205.0], [95.5, 209.0], [95.6, 213.0], [95.7, 223.0], [95.8, 235.0], [95.9, 245.0], [96.0, 255.0], [96.1, 268.0], [96.2, 278.0], [96.3, 285.0], [96.4, 291.0], [96.5, 297.0], [96.6, 302.0], [96.7, 311.0], [96.8, 331.0], [96.9, 348.0], [97.0, 367.0], [97.1, 384.0], [97.2, 395.0], [97.3, 406.0], [97.4, 436.0], [97.5, 458.0], [97.6, 481.0], [97.7, 494.0], [97.8, 505.0], [97.9, 530.0], [98.0, 553.0], [98.1, 578.0], [98.2, 595.0], [98.3, 612.0], [98.4, 649.0], [98.5, 684.0], [98.6, 704.0], [98.7, 754.0], [98.8, 795.0], [98.9, 857.0], [99.0, 909.0], [99.1, 996.0], [99.2, 1102.0], [99.3, 1234.0], [99.4, 1379.0], [99.5, 1552.0], [99.6, 1740.0], [99.7, 2299.0], [99.8, 3497.0], [99.9, 4188.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 471169.0, "series": [{"data": [[0.0, 471169.0], [600.0, 1786.0], [700.0, 1239.0], [800.0, 827.0], [900.0, 671.0], [1000.0, 427.0], [1100.0, 406.0], [1200.0, 306.0], [1300.0, 366.0], [1400.0, 310.0], [1500.0, 236.0], [1600.0, 304.0], [1700.0, 173.0], [1800.0, 127.0], [1900.0, 73.0], [2000.0, 84.0], [2100.0, 73.0], [2200.0, 57.0], [2300.0, 47.0], [2400.0, 26.0], [2500.0, 29.0], [2600.0, 46.0], [2700.0, 46.0], [2800.0, 39.0], [2900.0, 38.0], [3000.0, 54.0], [3100.0, 82.0], [3200.0, 43.0], [3300.0, 26.0], [3400.0, 42.0], [3500.0, 49.0], [3600.0, 32.0], [3700.0, 39.0], [3800.0, 56.0], [3900.0, 87.0], [4000.0, 121.0], [4100.0, 114.0], [4200.0, 103.0], [4300.0, 71.0], [4400.0, 53.0], [4500.0, 53.0], [4600.0, 41.0], [4800.0, 32.0], [4700.0, 24.0], [4900.0, 8.0], [5000.0, 7.0], [5100.0, 8.0], [5200.0, 9.0], [5300.0, 10.0], [5400.0, 11.0], [5500.0, 9.0], [5600.0, 7.0], [5700.0, 10.0], [5800.0, 12.0], [5900.0, 7.0], [6100.0, 8.0], [6000.0, 7.0], [6200.0, 12.0], [6300.0, 6.0], [6400.0, 14.0], [6500.0, 4.0], [6600.0, 2.0], [6900.0, 1.0], [6800.0, 6.0], [6700.0, 4.0], [7000.0, 2.0], [7900.0, 1.0], [8000.0, 1.0], [8200.0, 1.0], [100.0, 19647.0], [200.0, 6739.0], [300.0, 3454.0], [400.0, 2605.0], [500.0, 2421.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 471012.0], [600.0, 1793.0], [700.0, 1203.0], [800.0, 859.0], [900.0, 663.0], [1000.0, 450.0], [1100.0, 428.0], [1200.0, 371.0], [1300.0, 373.0], [1400.0, 303.0], [1500.0, 251.0], [1600.0, 280.0], [1700.0, 178.0], [1800.0, 122.0], [1900.0, 69.0], [2000.0, 90.0], [2100.0, 61.0], [2200.0, 66.0], [2300.0, 32.0], [2400.0, 24.0], [2500.0, 23.0], [2600.0, 47.0], [2700.0, 66.0], [2800.0, 44.0], [2900.0, 32.0], [3000.0, 57.0], [3100.0, 84.0], [3200.0, 45.0], [3300.0, 33.0], [3400.0, 30.0], [3500.0, 48.0], [3600.0, 26.0], [3700.0, 44.0], [3800.0, 60.0], [3900.0, 104.0], [4000.0, 139.0], [4100.0, 110.0], [4200.0, 75.0], [4300.0, 47.0], [4400.0, 68.0], [4500.0, 47.0], [4600.0, 32.0], [4800.0, 33.0], [4700.0, 21.0], [5100.0, 7.0], [4900.0, 11.0], [5000.0, 12.0], [5200.0, 10.0], [5300.0, 18.0], [5400.0, 17.0], [5500.0, 12.0], [5600.0, 7.0], [5700.0, 8.0], [5800.0, 10.0], [5900.0, 8.0], [6100.0, 5.0], [6000.0, 6.0], [6200.0, 7.0], [6300.0, 10.0], [6400.0, 9.0], [6500.0, 7.0], [6900.0, 1.0], [6800.0, 1.0], [6700.0, 2.0], [7000.0, 2.0], [8000.0, 2.0], [8200.0, 3.0], [100.0, 19649.0], [200.0, 6969.0], [300.0, 3555.0], [400.0, 2640.0], [500.0, 2452.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5347.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1007548.0, "series": [{"data": [[0.0, 1007548.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 17548.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5347.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 63.651244304241146, "minX": 1.62512148E12, "maxY": 512.0, "series": [{"data": [[1.62512148E12, 63.651244304241146]], "isOverall": false, "label": "warm_up", "isController": false}, {"data": [[1.6251216E12, 63.969270890075684], [1.62512166E12, 63.8288779878373]], "isOverall": false, "label": "cool_down_phase", "isController": false}, {"data": [[1.62512154E12, 512.0], [1.6251216E12, 504.5937910318231], [1.62512148E12, 499.21364317841244]], "isOverall": false, "label": "peak_phase", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512166E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 1787.0, "series": [{"data": [[2.0, 386.5], [4.0, 7.0], [5.0, 8.5], [7.0, 9.0], [8.0, 1473.0], [9.0, 75.0], [10.0, 912.0], [11.0, 562.5], [12.0, 301.0], [13.0, 328.5], [14.0, 196.0], [15.0, 331.0], [16.0, 38.333333333333336], [17.0, 78.71428571428571], [18.0, 52.63636363636364], [19.0, 104.83333333333334], [20.0, 8.0], [21.0, 7.666666666666667], [22.0, 12.2], [23.0, 8.4], [24.0, 11.666666666666666], [25.0, 111.16666666666666], [26.0, 7.571428571428571], [27.0, 89.42857142857142], [28.0, 8.0], [29.0, 8.166666666666666], [30.0, 79.42857142857143], [31.0, 36.52941176470588], [32.0, 62.888888888888886], [33.0, 9.857142857142856], [35.0, 12.181818181818182], [34.0, 8.5], [36.0, 101.49999999999999], [37.0, 10.0], [39.0, 80.2], [38.0, 40.05263157894737], [40.0, 7.666666666666666], [41.0, 12.071428571428571], [42.0, 26.47368421052631], [43.0, 19.5], [45.0, 27.749999999999996], [44.0, 7.307692307692308], [47.0, 36.08695652173913], [46.0, 7.0], [49.0, 31.874999999999993], [48.0, 35.90476190476191], [51.0, 8.5], [50.0, 7.937499999999999], [53.0, 7.500000000000001], [52.0, 7.375], [55.0, 53.846153846153854], [54.0, 9.5], [56.0, 36.57142857142857], [57.0, 12.923076923076923], [59.0, 42.625], [58.0, 21.0], [61.0, 132.0], [60.0, 13.714285714285717], [62.0, 18.909090909090903], [63.0, 11.307692307692305], [64.0, 17.843389034904657], [67.0, 7.909090909090909], [66.0, 7.653846153846154], [65.0, 7.0], [69.0, 7.333333333333334], [71.0, 7.642857142857143], [70.0, 7.444444444444445], [68.0, 7.0], [72.0, 10.735294117647058], [73.0, 15.827586206896552], [75.0, 10.333333333333332], [74.0, 7.651162790697674], [76.0, 18.75], [78.0, 15.0], [79.0, 28.714285714285715], [77.0, 8.2], [83.0, 31.22222222222222], [81.0, 23.285714285714285], [80.0, 12.000000000000002], [87.0, 7.23076923076923], [86.0, 6.666666666666667], [85.0, 12.636363636363637], [84.0, 32.6], [91.0, 7.0], [90.0, 7.2], [89.0, 7.7272727272727275], [88.0, 9.2], [93.0, 94.66666666666666], [94.0, 6.0], [92.0, 8.0], [96.0, 71.8], [97.0, 94.25], [99.0, 70.4], [98.0, 6.5], [100.0, 9.0], [102.0, 8.25], [103.0, 7.5], [107.0, 30.249999999999996], [106.0, 14.5], [105.0, 7.666666666666667], [104.0, 6.0], [108.0, 13.0], [109.0, 34.2], [110.0, 17.6], [113.0, 6.666666666666667], [115.0, 5.0], [114.0, 6.0], [112.0, 6.5], [118.0, 7.5], [117.0, 6.0], [120.0, 7.0], [126.0, 56.0], [127.0, 112.0], [124.0, 43.66666666666667], [130.0, 99.22222222222223], [135.0, 7.166666666666667], [134.0, 6.6], [133.0, 20.666666666666664], [132.0, 9.0], [131.0, 6.5], [129.0, 6.833333333333333], [128.0, 6.0], [138.0, 37.090909090909086], [143.0, 6.833333333333334], [142.0, 6.75], [141.0, 6.76470588235294], [140.0, 8.4375], [139.0, 10.5], [137.0, 6.0], [136.0, 8.117647058823529], [151.0, 22.954545454545457], [150.0, 14.312499999999998], [149.0, 7.653846153846154], [148.0, 7.214285714285714], [147.0, 10.470588235294116], [146.0, 7.555555555555556], [145.0, 7.055555555555555], [144.0, 7.0], [159.0, 10.183673469387756], [158.0, 12.709677419354836], [157.0, 88.0], [156.0, 20.6], [155.0, 8.0], [154.0, 15.285714285714286], [153.0, 19.53846153846154], [152.0, 25.11764705882353], [166.0, 7.083333333333333], [167.0, 14.049999999999999], [165.0, 34.666666666666664], [163.0, 27.700000000000003], [162.0, 12.766666666666666], [161.0, 7.2608695652173925], [160.0, 6.977272727272727], [175.0, 6.956521739130435], [174.0, 6.9423076923076925], [173.0, 7.111111111111111], [172.0, 7.027777777777778], [171.0, 6.928571428571427], [170.0, 14.191489361702128], [169.0, 12.515151515151514], [168.0, 16.125], [183.0, 6.5], [182.0, 9.75], [181.0, 16.22222222222222], [180.0, 12.058823529411766], [179.0, 7.116279069767442], [178.0, 6.818181818181818], [177.0, 8.75], [176.0, 8.166666666666666], [191.0, 39.0], [190.0, 17.0], [188.0, 13.2], [187.0, 37.75], [186.0, 28.703703703703706], [185.0, 32.166666666666664], [184.0, 19.46341463414634], [199.0, 7.6610169491525415], [198.0, 11.611111111111112], [197.0, 19.6], [196.0, 33.25], [195.0, 25.666666666666664], [194.0, 50.333333333333336], [193.0, 23.523809523809526], [192.0, 22.0], [207.0, 12.937499999999996], [206.0, 12.428571428571429], [205.0, 8.297297297297298], [204.0, 15.500000000000002], [203.0, 6.5], [202.0, 28.11111111111111], [201.0, 9.92857142857143], [200.0, 8.195121951219514], [214.0, 7.285714285714286], [213.0, 6.603960396039604], [212.0, 7.166666666666667], [211.0, 12.529411764705882], [210.0, 7.222222222222223], [209.0, 14.88888888888889], [208.0, 16.485714285714288], [223.0, 25.535714285714285], [222.0, 22.129032258064512], [221.0, 26.741935483870964], [220.0, 38.15625000000001], [219.0, 51.0], [218.0, 22.666666666666668], [217.0, 6.758620689655173], [216.0, 9.36274509803921], [231.0, 7.7272727272727275], [230.0, 6.75], [229.0, 14.666666666666668], [228.0, 8.027027027027028], [227.0, 17.299999999999997], [226.0, 32.56521739130435], [225.0, 36.77777777777778], [239.0, 11.91397849462364], [238.0, 29.81481481481482], [237.0, 32.03448275862069], [236.0, 15.232558139534884], [235.0, 7.723004694835682], [234.0, 7.320000000000003], [233.0, 12.749063670411987], [232.0, 7.0], [247.0, 12.292682926829274], [246.0, 10.307692307692305], [245.0, 29.114754098360667], [244.0, 18.5], [243.0, 8.033057851239668], [242.0, 7.158878504672897], [241.0, 9.790000000000001], [240.0, 20.65853658536585], [248.0, 17.431192660550455], [249.0, 9.6], [251.0, 25.289473684210524], [252.0, 34.0], [255.0, 5.875], [254.0, 7.0], [253.0, 7.0344827586206895], [250.0, 8.000000000000002], [270.0, 45.375], [263.0, 41.69999999999999], [257.0, 6.555555555555555], [256.0, 6.0], [259.0, 6.25], [258.0, 7.0], [265.0, 60.142857142857146], [271.0, 158.76923076923077], [267.0, 21.333333333333336], [266.0, 85.66666666666667], [264.0, 7.333333333333333], [262.0, 19.678571428571423], [261.0, 11.624999999999995], [260.0, 7.028037383177571], [284.0, 118.23076923076923], [272.0, 198.5], [274.0, 77.66666666666667], [275.0, 68.0], [276.0, 43.64705882352942], [277.0, 46.0], [278.0, 139.25], [279.0, 544.0], [281.0, 214.0], [283.0, 53.22727272727273], [282.0, 45.90909090909091], [285.0, 52.0], [286.0, 35.0], [280.0, 56.7], [301.0, 509.0], [303.0, 156.25], [300.0, 71.0], [290.0, 44.125], [289.0, 49.25], [288.0, 45.375], [298.0, 57.2], [297.0, 100.0], [296.0, 7.0], [294.0, 31.333333333333332], [293.0, 53.0], [292.0, 47.5], [318.0, 33.5], [319.0, 124.0], [317.0, 16.25], [316.0, 19.63157894736842], [315.0, 16.875], [314.0, 10.49253731343283], [313.0, 41.57142857142858], [312.0, 8.5], [311.0, 8.0], [305.0, 63.75], [304.0, 25.0], [307.0, 91.0], [306.0, 55.0], [309.0, 8.0], [308.0, 34.71428571428572], [322.0, 138.5], [320.0, 135.28571428571428], [321.0, 8.166666666666666], [327.0, 27.5], [326.0, 25.0], [323.0, 7.6000000000000005], [324.0, 115.0], [325.0, 46.66666666666667], [335.0, 26.428571428571427], [331.0, 12.0], [334.0, 6.0], [333.0, 8.0], [332.0, 25.058823529411764], [349.0, 14.6], [337.0, 190.07692307692304], [338.0, 333.0], [341.0, 347.1428571428571], [340.0, 29.375], [343.0, 70.0], [336.0, 6.0], [344.0, 140.2], [345.0, 36.0], [351.0, 6.0], [350.0, 6.5], [348.0, 10.5], [339.0, 24.11111111111111], [347.0, 16.285714285714285], [346.0, 37.5], [354.0, 114.71428571428572], [355.0, 29.125], [356.0, 267.0], [357.0, 110.55], [358.0, 38.33333333333333], [359.0, 16.10526315789474], [353.0, 5.5], [352.0, 11.818181818181815], [360.0, 117.42857142857142], [361.0, 6.5], [363.0, 6.833333333333334], [362.0, 6.0], [367.0, 6.4], [366.0, 6.5], [365.0, 7.75], [382.0, 7.153846153846154], [369.0, 161.86666666666665], [370.0, 656.0], [371.0, 5.5], [372.0, 67.04545454545455], [373.0, 6.166666666666666], [374.0, 109.16666666666666], [375.0, 124.66666666666667], [368.0, 6.947368421052632], [383.0, 5.75], [377.0, 6.0], [376.0, 7.6], [379.0, 7.5], [378.0, 7.0], [381.0, 9.0], [380.0, 6.421052631578948], [398.0, 44.0], [399.0, 56.46666666666666], [397.0, 41.46153846153847], [396.0, 49.81578947368421], [395.0, 99.0], [394.0, 41.666666666666664], [393.0, 41.88888888888889], [392.0, 48.14285714285714], [391.0, 57.6], [385.0, 6.800000000000001], [384.0, 8.967741935483868], [387.0, 13.562499999999998], [386.0, 7.209302325581397], [390.0, 29.91666666666666], [389.0, 16.351351351351358], [388.0, 6.75], [415.0, 24.30769230769231], [402.0, 73.00000000000001], [407.0, 7.0], [401.0, 54.8], [406.0, 81.66666666666667], [405.0, 45.73333333333333], [404.0, 64.4], [410.0, 286.0], [414.0, 20.433333333333334], [413.0, 32.0], [412.0, 11.666666666666668], [403.0, 68.66666666666667], [411.0, 7.0], [409.0, 25.95238095238095], [408.0, 17.557377049180328], [431.0, 53.36842105263159], [424.0, 50.70833333333333], [429.0, 53.0], [428.0, 49.0], [427.0, 47.0], [426.0, 36.55555555555556], [425.0, 45.444444444444436], [423.0, 50.0], [417.0, 7.591954022988509], [416.0, 17.627450980392155], [419.0, 10.906250000000002], [418.0, 8.703703703703704], [422.0, 29.583333333333336], [421.0, 20.23809523809524], [420.0, 13.73076923076923], [446.0, 61.84], [443.0, 235.25], [445.0, 38.59677419354837], [444.0, 27.67857142857143], [442.0, 15.244444444444438], [441.0, 11.950000000000001], [440.0, 32.66666666666667], [439.0, 44.9], [433.0, 54.03571428571429], [432.0, 32.5], [435.0, 44.8], [434.0, 57.3], [438.0, 45.25], [437.0, 42.2], [436.0, 61.80645161290323], [462.0, 65.6], [449.0, 8.48695652173913], [448.0, 11.393617021276599], [450.0, 7.87837837837838], [455.0, 21.583333333333336], [454.0, 18.957446808510642], [453.0, 14.608695652173914], [452.0, 7.0], [451.0, 48.642857142857146], [463.0, 59.04545454545454], [461.0, 45.348837209302324], [460.0, 70.7], [459.0, 54.6875], [458.0, 44.769230769230774], [457.0, 37.75], [456.0, 36.21428571428572], [477.0, 12.190938511326861], [465.0, 170.92857142857142], [466.0, 142.75], [468.0, 77.13636363636363], [469.0, 19.155963302752294], [471.0, 9.2], [464.0, 69.99999999999999], [470.0, 31.067226890756288], [473.0, 11.250493096646949], [472.0, 6.378378378378378], [479.0, 33.85714285714286], [478.0, 25.857142857142854], [476.0, 7.298245614035086], [467.0, 62.2], [475.0, 20.761904761904763], [474.0, 33.684210526315795], [494.0, 44.2], [487.0, 101.61538461538461], [481.0, 24.28571428571429], [480.0, 39.94117647058823], [483.0, 50.909090909090914], [482.0, 47.07142857142857], [489.0, 57.70967741935484], [490.0, 206.58823529411765], [495.0, 53.373134328358205], [493.0, 30.35384615384614], [492.0, 66.19999999999999], [488.0, 42.4], [486.0, 45.16666666666668], [485.0, 129.0], [484.0, 57.00000000000001], [511.0, 7.037037037037036], [503.0, 125.5897435897436], [497.0, 54.96000000000001], [496.0, 56.636363636363626], [499.0, 35.53947368421053], [498.0, 45.57894736842105], [506.0, 122.00000000000003], [510.0, 10.857142857142858], [508.0, 7.8999999999999995], [507.0, 8.333333333333332], [505.0, 10.857142857142858], [504.0, 11.869565217391305], [502.0, 12.128205128205124], [501.0, 28.871794871794876], [500.0, 21.658536585365862], [512.0, 75.92007028543645]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[418.0013920708284, 63.17369044383066]], "isOverall": false, "label": "Post_Request-Aggregated", "isController": false}, {"data": [[2.0, 1765.0], [3.0, 51.5], [5.0, 7.0], [6.0, 686.0], [7.0, 8.0], [8.0, 1787.0], [9.0, 1668.0], [10.0, 1370.0], [11.0, 792.0], [13.0, 8.0], [14.0, 8.5], [15.0, 8.0], [16.0, 133.5], [17.0, 17.166666666666664], [18.0, 21.8], [19.0, 57.15384615384615], [20.0, 204.33333333333331], [21.0, 53.27272727272727], [22.0, 7.0], [23.0, 163.59999999999994], [24.0, 63.73333333333333], [25.0, 17.2], [26.0, 46.53333333333332], [27.0, 20.5], [28.0, 585.0], [29.0, 41.45], [30.0, 8.6], [31.0, 14.280000000000001], [33.0, 96.33333333333334], [32.0, 31.85714285714285], [34.0, 178.33333333333331], [35.0, 20.166666666666664], [37.0, 128.14285714285714], [36.0, 49.42857142857142], [38.0, 22.142857142857142], [39.0, 23.833333333333336], [40.0, 56.73684210526314], [41.0, 9.92857142857143], [42.0, 24.219512195121954], [43.0, 15.833333333333334], [45.0, 39.54545454545454], [44.0, 12.619047619047622], [46.0, 430.5], [47.0, 12.473684210526315], [48.0, 9.782608695652176], [49.0, 10.222222222222225], [51.0, 55.615384615384635], [50.0, 52.75], [53.0, 37.80952380952381], [52.0, 89.28571428571428], [54.0, 62.33333333333333], [55.0, 7.684210526315791], [57.0, 44.0], [56.0, 16.05], [58.0, 177.66666666666669], [59.0, 15.5], [60.0, 27.688888888888897], [61.0, 48.333333333333336], [62.0, 55.31578947368422], [63.0, 11.296296296296294], [64.0, 18.987560476638127], [65.0, 6.0], [67.0, 9.8125], [66.0, 7.407407407407407], [71.0, 7.714285714285714], [70.0, 7.8999999999999995], [69.0, 7.4], [68.0, 8.5], [72.0, 15.656250000000005], [73.0, 19.94594594594595], [75.0, 9.479999999999999], [74.0, 9.835443037974688], [76.0, 11.2], [79.0, 8.0], [78.0, 27.333333333333336], [77.0, 32.666666666666664], [83.0, 13.333333333333332], [81.0, 20.77777777777778], [80.0, 19.90909090909091], [86.0, 27.0], [87.0, 12.64], [85.0, 22.22222222222222], [84.0, 27.666666666666664], [91.0, 6.5], [90.0, 7.166666666666667], [89.0, 7.307692307692308], [88.0, 7.851851851851851], [93.0, 93.33333333333334], [94.0, 7.0], [96.0, 135.81818181818187], [97.0, 10.0], [99.0, 34.833333333333336], [100.0, 66.66666666666667], [102.0, 13.0], [103.0, 64.0], [101.0, 7.0], [106.0, 22.0], [107.0, 6.333333333333333], [105.0, 6.0], [104.0, 23.0], [108.0, 33.5], [109.0, 65.2], [111.0, 59.0], [110.0, 34.5], [115.0, 7.0], [114.0, 7.333333333333333], [113.0, 5.5], [112.0, 12.5], [119.0, 7.0], [118.0, 6.285714285714286], [117.0, 7.0], [116.0, 8.0], [123.0, 27.333333333333332], [120.0, 7.333333333333333], [126.0, 143.0], [127.0, 259.0], [124.0, 17.5], [128.0, 126.0], [130.0, 208.5], [135.0, 10.0], [134.0, 16.833333333333336], [133.0, 7.0], [131.0, 33.666666666666664], [129.0, 7.2], [138.0, 26.88888888888889], [143.0, 18.470588235294116], [142.0, 7.950000000000002], [141.0, 7.571428571428571], [140.0, 7.4222222222222225], [139.0, 24.5], [137.0, 9.5], [136.0, 16.166666666666664], [151.0, 16.25], [150.0, 10.782608695652174], [149.0, 13.6875], [148.0, 10.1], [147.0, 6.777777777777778], [146.0, 12.684210526315788], [145.0, 7.777777777777778], [144.0, 7.319148936170214], [159.0, 10.104166666666668], [158.0, 7.296296296296297], [157.0, 18.0], [156.0, 7.0], [155.0, 40.333333333333336], [154.0, 6.666666666666666], [153.0, 11.476190476190474], [152.0, 24.274999999999995], [167.0, 10.736842105263158], [166.0, 6.6], [165.0, 7.0], [163.0, 13.999999999999998], [162.0, 15.033333333333335], [161.0, 7.651162790697675], [160.0, 7.122448979591835], [175.0, 6.703703703703703], [174.0, 6.9615384615384635], [173.0, 7.5], [172.0, 7.142857142857144], [171.0, 9.941176470588236], [170.0, 14.790697674418606], [169.0, 11.655172413793103], [168.0, 7.111111111111111], [183.0, 20.333333333333336], [182.0, 30.666666666666664], [181.0, 10.999999999999998], [180.0, 8.25423728813559], [179.0, 11.973684210526319], [178.0, 8.0], [177.0, 7.0], [176.0, 8.0], [191.0, 10.5], [190.0, 30.857142857142858], [188.0, 14.571428571428571], [187.0, 19.5], [186.0, 19.21875], [185.0, 35.58823529411763], [184.0, 14.187499999999998], [199.0, 9.153846153846153], [198.0, 7.0], [197.0, 11.157894736842104], [196.0, 22.77777777777778], [195.0, 19.75], [193.0, 21.27777777777778], [192.0, 6.0], [207.0, 19.28571428571429], [206.0, 28.75], [205.0, 13.38235294117647], [204.0, 13.499999999999998], [203.0, 18.666666666666668], [202.0, 18.928571428571427], [201.0, 7.080000000000001], [200.0, 7.064516129032259], [215.0, 8.0], [214.0, 7.866666666666667], [213.0, 7.133333333333333], [212.0, 8.0], [211.0, 7.000000000000001], [210.0, 13.214285714285715], [209.0, 10.333333333333334], [208.0, 13.388888888888891], [223.0, 16.625], [222.0, 15.769230769230766], [221.0, 27.322580645161292], [220.0, 30.464285714285715], [219.0, 14.333333333333334], [218.0, 16.76923076923077], [217.0, 7.0], [216.0, 8.567307692307693], [231.0, 8.600000000000001], [230.0, 6.333333333333334], [229.0, 18.160000000000004], [228.0, 8.612903225806454], [227.0, 15.947368421052632], [226.0, 29.62500000000001], [225.0, 23.57142857142857], [239.0, 10.160305343511446], [238.0, 27.880000000000003], [237.0, 27.392156862745097], [236.0, 21.51351351351351], [235.0, 7.973799126637552], [234.0, 8.054794520547944], [233.0, 12.075187969924817], [232.0, 6.75], [247.0, 10.834355828220854], [246.0, 13.064516129032256], [245.0, 27.394957983193276], [244.0, 20.76153846153846], [243.0, 8.710743801652889], [242.0, 7.31304347826087], [241.0, 8.802469135802468], [240.0, 18.759259259259252], [248.0, 24.683760683760678], [249.0, 27.0], [250.0, 15.222222222222221], [251.0, 34.33333333333333], [252.0, 79.15384615384616], [255.0, 7.555555555555555], [254.0, 6.5], [253.0, 7.16], [271.0, 208.09523809523807], [265.0, 67.4], [270.0, 103.3], [269.0, 7.0], [267.0, 45.0], [266.0, 41.5], [264.0, 31.5], [263.0, 33.333333333333336], [257.0, 7.384615384615385], [256.0, 7.0], [259.0, 7.4], [258.0, 7.25], [262.0, 18.000000000000004], [261.0, 12.051948051948052], [260.0, 7.6428571428571415], [272.0, 198.66666666666666], [274.0, 98.8], [276.0, 156.22580645161293], [277.0, 86.66666666666666], [278.0, 130.0], [279.0, 459.33333333333337], [284.0, 190.00000000000003], [285.0, 118.14285714285714], [286.0, 46.0], [283.0, 38.22727272727273], [282.0, 41.166666666666664], [281.0, 56.0], [280.0, 44.1], [291.0, 84.0], [302.0, 494.0], [301.0, 525.0], [303.0, 82.25], [298.0, 36.75], [297.0, 26.333333333333336], [294.0, 70.66666666666667], [293.0, 61.8], [292.0, 64.0], [290.0, 73.0], [289.0, 10.0], [288.0, 55.57142857142857], [317.0, 40.666666666666664], [307.0, 381.5], [319.0, 175.14285714285714], [316.0, 27.41176470588235], [315.0, 13.6], [314.0, 7.971428571428572], [313.0, 23.75], [312.0, 28.0], [311.0, 37.8], [304.0, 11.0], [306.0, 45.0], [305.0, 73.33333333333333], [310.0, 57.0], [308.0, 28.235294117647058], [323.0, 128.70000000000002], [321.0, 271.0], [320.0, 153.45454545454544], [327.0, 30.799999999999997], [326.0, 25.6], [322.0, 265.8], [324.0, 273.0], [325.0, 12.333333333333334], [335.0, 49.5], [332.0, 23.655172413793103], [331.0, 11.0], [330.0, 8.0], [329.0, 8.0], [337.0, 80.5], [341.0, 462.125], [340.0, 21.6], [351.0, 21.0], [350.0, 6.25], [349.0, 19.6], [348.0, 16.71428571428571], [339.0, 20.857142857142858], [347.0, 23.33333333333333], [345.0, 12.666666666666668], [343.0, 6.6], [336.0, 43.0], [342.0, 61.0], [354.0, 61.71428571428572], [357.0, 126.38888888888886], [358.0, 46.833333333333336], [359.0, 21.85], [353.0, 8.0], [352.0, 14.88888888888889], [360.0, 235.1], [361.0, 41.0], [363.0, 6.625], [362.0, 6.0], [367.0, 7.5], [366.0, 8.666666666666666], [365.0, 6.8], [355.0, 6.714285714285714], [382.0, 7.58695652173913], [369.0, 169.1666666666667], [370.0, 67.5], [371.0, 7.6], [372.0, 91.16666666666666], [373.0, 6.625000000000001], [374.0, 88.875], [375.0, 99.85714285714285], [368.0, 6.857142857142857], [383.0, 8.0], [377.0, 6.4], [376.0, 8.0], [379.0, 7.0], [378.0, 6.6], [381.0, 8.5], [380.0, 7.250000000000001], [397.0, 48.99999999999999], [399.0, 60.590909090909086], [396.0, 55.0], [387.0, 7.0], [386.0, 12.300000000000002], [385.0, 7.44], [384.0, 7.428571428571429], [394.0, 45.2], [393.0, 75.5], [392.0, 32.25], [391.0, 70.25], [390.0, 33.71621621621624], [389.0, 17.977011494252867], [388.0, 29.0], [414.0, 30.85714285714285], [409.0, 73.66666666666667], [403.0, 94.66666666666667], [402.0, 40.85000000000001], [401.0, 72.2], [400.0, 54.333333333333336], [407.0, 28.666666666666668], [406.0, 49.0], [405.0, 55.10526315789474], [410.0, 374.0], [415.0, 17.35], [413.0, 59.5], [412.0, 21.333333333333332], [411.0, 16.333333333333332], [408.0, 15.917431192660548], [430.0, 45.5], [419.0, 18.75], [423.0, 179.16666666666666], [416.0, 17.90909090909091], [418.0, 9.647058823529411], [417.0, 7.1515151515151505], [422.0, 36.1764705882353], [421.0, 18.7], [420.0, 14.515151515151517], [424.0, 72.5806451612903], [427.0, 344.0], [431.0, 59.550000000000004], [429.0, 49.23529411764706], [428.0, 47.0], [426.0, 41.603773584905674], [425.0, 42.4], [445.0, 53.310810810810814], [432.0, 99.85714285714286], [435.0, 157.16666666666669], [434.0, 58.199999999999996], [433.0, 55.60869565217392], [437.0, 113.9], [436.0, 54.222222222222214], [439.0, 30.375], [438.0, 51.333333333333336], [443.0, 245.49999999999991], [446.0, 104.96428571428572], [444.0, 26.77777777777778], [442.0, 17.58139534883721], [441.0, 12.136363636363637], [440.0, 32.5625], [462.0, 49.875], [450.0, 22.414634146341452], [449.0, 9.292372881355936], [448.0, 10.806818181818183], [455.0, 19.93518518518519], [454.0, 11.930232558139535], [451.0, 69.64705882352942], [452.0, 208.33333333333334], [453.0, 27.25], [463.0, 60.88571428571429], [457.0, 6.5], [456.0, 31.166666666666664], [459.0, 62.88235294117647], [458.0, 53.043478260869556], [461.0, 48.827586206896555], [460.0, 50.08333333333333], [477.0, 11.287925696594428], [465.0, 207.4375], [466.0, 328.3333333333333], [468.0, 97.83999999999999], [469.0, 19.720720720720724], [471.0, 9.396825396825397], [464.0, 45.333333333333336], [470.0, 31.33644859813084], [473.0, 12.484189723320162], [472.0, 6.285714285714285], [479.0, 31.42857142857143], [478.0, 26.333333333333332], [476.0, 7.465517241379311], [467.0, 59.333333333333336], [475.0, 24.127659574468073], [474.0, 26.264150943396224], [495.0, 53.5921052631579], [485.0, 216.75], [484.0, 50.74193548387097], [486.0, 50.42857142857143], [487.0, 115.17647058823525], [488.0, 43.7], [489.0, 67.73809523809524], [490.0, 188.31578947368425], [494.0, 48.54545454545455], [493.0, 34.684684684684676], [492.0, 74.5], [483.0, 59.17391304347825], [482.0, 53.67741935483871], [481.0, 33.0], [480.0, 25.294117647058826], [510.0, 8.571428571428571], [505.0, 24.43835616438355], [503.0, 209.13953488372087], [497.0, 67.25], [496.0, 62.76923076923076], [499.0, 46.26666666666666], [498.0, 56.0], [502.0, 12.930769230769231], [501.0, 38.45], [500.0, 20.82222222222223], [506.0, 301.44444444444446], [511.0, 7.095238095238095], [509.0, 5.0], [508.0, 8.928571428571427], [507.0, 9.428571428571429], [504.0, 13.76470588235294], [512.0, 75.97512440293808], [1.0, 877.6666666666667]], "isOverall": false, "label": "Get_Request", "isController": false}, {"data": [[417.9266875314144, 63.531464949370125]], "isOverall": false, "label": "Get_Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 512.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 73567.4, "minX": 1.62512148E12, "maxY": 2828300.8333333335, "series": [{"data": [[1.62512154E12, 1137620.0666666667], [1.6251216E12, 2828300.8333333335], [1.62512166E12, 225882.38333333333], [1.62512148E12, 84667.73333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62512154E12, 1009699.0666666667], [1.6251216E12, 2510190.7], [1.62512166E12, 200488.25], [1.62512148E12, 73567.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512166E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.687056835298778, "minX": 1.62512148E12, "maxY": 649.7624758220497, "series": [{"data": [[1.62512154E12, 115.6343394106543], [1.6251216E12, 29.23126544459899], [1.62512166E12, 8.687056835298778], [1.62512148E12, 646.618525896416]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512154E12, 114.70983605361386], [1.6251216E12, 29.518657417189885], [1.62512166E12, 8.947335538405088], [1.62512148E12, 649.7624758220497]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512166E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8.685403578382829, "minX": 1.62512148E12, "maxY": 649.7558027079315, "series": [{"data": [[1.62512154E12, 115.63289486163428], [1.6251216E12, 29.229551497649524], [1.62512166E12, 8.685403578382829], [1.62512148E12, 646.6161354581674]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512154E12, 114.70817251216512], [1.6251216E12, 29.51694955043794], [1.62512166E12, 8.94590224182285], [1.62512148E12, 649.7558027079315]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512166E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62512148E12, "maxY": 10.39361702127667, "series": [{"data": [[1.62512154E12, 0.031269379208708765], [1.6251216E12, 0.0], [1.62512166E12, 0.0], [1.62512148E12, 0.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512154E12, 0.03508759129413332], [1.6251216E12, 0.0036915745240274824], [1.62512166E12, 0.0], [1.62512148E12, 10.39361702127667]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512166E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.62512148E12, "maxY": 8244.0, "series": [{"data": [[1.62512154E12, 5951.0], [1.6251216E12, 2375.0], [1.62512166E12, 499.0], [1.62512148E12, 8244.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62512154E12, 98.0], [1.6251216E12, 10.0], [1.62512166E12, 9.0], [1.62512148E12, 3090.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62512154E12, 350.9800000000032], [1.6251216E12, 56.0], [1.62512166E12, 72.0], [1.62512148E12, 5510.920000000013]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62512154E12, 167.0], [1.6251216E12, 11.0], [1.62512166E12, 11.0], [1.62512148E12, 4096.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62512154E12, 3.0], [1.6251216E12, 3.0], [1.62512166E12, 4.0], [1.62512148E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62512154E12, 11.0], [1.6251216E12, 7.0], [1.62512166E12, 7.0], [1.62512148E12, 60.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512166E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 47.0, "maxY": 1012.0, "series": [{"data": [[18171.0, 8.0], [19195.0, 8.0], [19623.0, 8.0], [8551.0, 11.0], [8785.0, 11.0], [9153.0, 11.0], [9501.0, 11.0], [9251.0, 11.0], [9773.0, 10.0], [10079.0, 10.0], [10557.0, 10.0], [10633.0, 11.0], [10679.0, 7.0], [10999.0, 11.0], [11277.0, 11.0], [11731.0, 11.0], [11707.0, 12.0], [11745.0, 15.0], [47.0, 582.0], [12613.0, 12.0], [12719.0, 13.0], [12711.0, 11.0], [14021.0, 10.0], [13901.0, 9.0], [14069.0, 9.0], [15205.0, 9.0], [16273.0, 9.0], [16946.0, 8.0], [19026.0, 8.0], [19754.0, 8.0], [99.0, 597.0], [98.0, 546.0], [100.0, 682.5], [107.0, 1012.0], [109.0, 311.0], [132.0, 486.5], [135.0, 7.0], [134.0, 697.5], [167.0, 6.0], [172.0, 420.5], [168.0, 8.5], [182.0, 305.0], [179.0, 389.0], [186.0, 291.0], [196.0, 300.0], [204.0, 303.0], [212.0, 312.0], [213.0, 287.0], [221.0, 398.0], [231.0, 415.0], [246.0, 213.0], [247.0, 30.0], [249.0, 288.0], [269.0, 202.0], [283.0, 209.0], [284.0, 206.0], [288.0, 204.0], [299.0, 195.0], [305.0, 197.0], [370.0, 56.0], [424.0, 9.0], [461.0, 11.0], [490.0, 38.0], [511.0, 376.0], [521.0, 68.0], [514.0, 13.0], [542.0, 6.0], [522.0, 10.0], [564.0, 284.5], [573.0, 11.0], [575.0, 6.0], [597.0, 10.0], [604.0, 12.0], [625.0, 37.0], [615.0, 10.0], [628.0, 8.0], [622.0, 7.0], [666.0, 10.0], [701.0, 14.0], [752.0, 9.5], [863.0, 10.0], [1017.0, 39.0], [1081.0, 19.0], [1142.0, 48.0], [1189.0, 96.0], [18805.0, 8.0], [19085.0, 8.0], [1272.0, 103.0], [1367.0, 126.0], [1358.0, 166.5], [1410.0, 148.0], [1540.0, 204.0], [1582.0, 12.0], [1622.0, 199.0], [1676.0, 182.0], [1754.0, 183.0], [1785.0, 164.0], [1745.0, 192.0], [1854.0, 13.0], [1876.0, 110.0], [1883.0, 11.0], [1954.0, 15.0], [2024.0, 41.0], [2066.0, 99.0], [2074.0, 13.0], [2075.0, 14.0], [2121.0, 38.0], [2202.0, 95.0], [2463.0, 13.0], [2680.0, 16.0], [2892.0, 15.0], [2900.0, 8.0], [3019.0, 13.0], [3395.0, 11.0], [3501.0, 11.0], [3540.0, 7.0], [3457.0, 8.0], [3613.0, 12.0], [3678.0, 11.0], [3958.0, 11.0], [4344.0, 11.0], [4573.0, 11.0], [4549.0, 8.0], [4556.0, 8.0], [4770.0, 11.0], [4804.0, 12.0], [5045.0, 10.0], [5129.0, 10.0], [5608.0, 10.0], [5564.0, 8.0], [5800.0, 10.0], [5720.0, 10.0], [6142.0, 7.0], [6134.0, 8.0], [6039.0, 8.0], [6393.0, 10.0], [6395.0, 10.0], [6171.0, 8.0], [6588.0, 7.0], [6575.0, 8.0], [6760.0, 7.0], [6918.0, 10.0], [7039.0, 8.0], [6962.0, 8.0], [6934.0, 7.0], [7158.0, 7.0], [7310.0, 10.0], [7273.0, 8.0], [7340.0, 8.0], [7416.0, 7.0], [7287.0, 7.0], [7370.0, 7.0], [7394.0, 7.0], [7208.0, 7.0], [7607.0, 7.0], [7655.0, 7.0], [7458.0, 7.0], [7621.0, 7.0], [7515.0, 7.0], [7630.0, 7.0], [7452.0, 7.0], [7761.0, 10.0], [7698.0, 11.0], [8016.0, 10.0], [10520.0, 10.0], [10884.0, 10.0], [11152.0, 11.0], [10756.0, 13.0], [11776.0, 12.0], [12072.0, 12.0], [12168.0, 11.0], [12004.0, 14.0], [12604.0, 12.0], [13250.0, 11.0], [13526.0, 10.0], [13532.0, 10.0], [13754.0, 9.0], [14732.0, 9.0], [16146.0, 9.0], [17496.0, 8.0], [19788.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19788.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 47.0, "maxY": 1012.0, "series": [{"data": [[18171.0, 8.0], [19195.0, 8.0], [19623.0, 8.0], [8551.0, 11.0], [8785.0, 11.0], [9153.0, 11.0], [9501.0, 11.0], [9251.0, 11.0], [9773.0, 10.0], [10079.0, 10.0], [10557.0, 10.0], [10633.0, 11.0], [10679.0, 7.0], [10999.0, 11.0], [11277.0, 11.0], [11731.0, 11.0], [11707.0, 12.0], [11745.0, 15.0], [47.0, 582.0], [12613.0, 12.0], [12719.0, 13.0], [12711.0, 11.0], [14021.0, 10.0], [13901.0, 9.0], [14069.0, 9.0], [15205.0, 9.0], [16273.0, 9.0], [16946.0, 8.0], [19026.0, 8.0], [19754.0, 8.0], [99.0, 597.0], [98.0, 546.0], [100.0, 682.5], [107.0, 1012.0], [109.0, 311.0], [132.0, 486.5], [135.0, 7.0], [134.0, 697.5], [167.0, 6.0], [172.0, 420.5], [168.0, 8.5], [182.0, 305.0], [179.0, 389.0], [186.0, 291.0], [196.0, 300.0], [204.0, 303.0], [212.0, 312.0], [213.0, 287.0], [221.0, 398.0], [231.0, 415.0], [246.0, 213.0], [247.0, 30.0], [249.0, 288.0], [269.0, 202.0], [283.0, 209.0], [284.0, 206.0], [288.0, 204.0], [299.0, 195.0], [305.0, 197.0], [370.0, 55.5], [424.0, 9.0], [461.0, 11.0], [490.0, 38.0], [511.0, 376.0], [521.0, 68.0], [514.0, 13.0], [542.0, 6.0], [522.0, 10.0], [564.0, 284.5], [573.0, 11.0], [575.0, 6.0], [597.0, 10.0], [604.0, 12.0], [625.0, 37.0], [615.0, 10.0], [628.0, 8.0], [622.0, 7.0], [666.0, 10.0], [701.0, 14.0], [752.0, 9.5], [863.0, 10.0], [1017.0, 39.0], [1081.0, 19.0], [1142.0, 48.0], [1189.0, 96.0], [18805.0, 8.0], [19085.0, 8.0], [1272.0, 103.0], [1367.0, 126.0], [1358.0, 166.5], [1410.0, 148.0], [1540.0, 204.0], [1582.0, 12.0], [1622.0, 199.0], [1676.0, 182.0], [1754.0, 183.0], [1785.0, 164.0], [1745.0, 192.0], [1854.0, 13.0], [1876.0, 110.0], [1883.0, 11.0], [1954.0, 15.0], [2024.0, 41.0], [2066.0, 99.0], [2074.0, 13.0], [2075.0, 14.0], [2121.0, 38.0], [2202.0, 95.0], [2463.0, 13.0], [2680.0, 16.0], [2892.0, 15.0], [2900.0, 8.0], [3019.0, 13.0], [3395.0, 11.0], [3501.0, 11.0], [3540.0, 7.0], [3457.0, 8.0], [3613.0, 12.0], [3678.0, 11.0], [3958.0, 11.0], [4344.0, 11.0], [4573.0, 11.0], [4549.0, 8.0], [4556.0, 8.0], [4770.0, 11.0], [4804.0, 12.0], [5045.0, 10.0], [5129.0, 10.0], [5608.0, 10.0], [5564.0, 8.0], [5800.0, 10.0], [5720.0, 10.0], [6142.0, 7.0], [6134.0, 8.0], [6039.0, 8.0], [6393.0, 10.0], [6395.0, 10.0], [6171.0, 8.0], [6588.0, 7.0], [6575.0, 8.0], [6760.0, 7.0], [6918.0, 10.0], [7039.0, 8.0], [6962.0, 8.0], [6934.0, 7.0], [7158.0, 7.0], [7310.0, 10.0], [7273.0, 8.0], [7340.0, 8.0], [7416.0, 7.0], [7287.0, 7.0], [7370.0, 7.0], [7394.0, 7.0], [7208.0, 7.0], [7607.0, 7.0], [7655.0, 7.0], [7458.0, 7.0], [7621.0, 7.0], [7515.0, 7.0], [7630.0, 7.0], [7452.0, 7.0], [7761.0, 10.0], [7698.0, 11.0], [8016.0, 10.0], [10520.0, 10.0], [10884.0, 10.0], [11152.0, 11.0], [10756.0, 13.0], [11776.0, 12.0], [12072.0, 12.0], [12168.0, 11.0], [12004.0, 14.0], [12604.0, 11.5], [13250.0, 11.0], [13526.0, 10.0], [13532.0, 10.0], [13754.0, 9.0], [14732.0, 9.0], [16146.0, 9.0], [17496.0, 8.0], [19788.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19788.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 348.2, "minX": 1.62512148E12, "maxY": 11351.016666666666, "series": [{"data": [[1.62512154E12, 4568.733333333334], [1.6251216E12, 11351.016666666666], [1.62512166E12, 906.1], [1.62512148E12, 348.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512166E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 339.6666666666667, "minX": 1.62512148E12, "maxY": 11358.5, "series": [{"data": [[1.62512154E12, 4568.733333333334], [1.6251216E12, 11358.5], [1.62512166E12, 907.15], [1.62512148E12, 339.6666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512166E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 167.33333333333334, "minX": 1.62512148E12, "maxY": 5679.6, "series": [{"data": [[1.62512154E12, 2284.2833333333333], [1.6251216E12, 5679.6], [1.62512166E12, 453.5], [1.62512148E12, 172.33333333333334]], "isOverall": false, "label": "Get_Request-success", "isController": false}, {"data": [[1.62512154E12, 2284.45], [1.6251216E12, 5678.9], [1.62512166E12, 453.65], [1.62512148E12, 167.33333333333334]], "isOverall": false, "label": "Post_Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512166E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 339.6666666666667, "minX": 1.62512148E12, "maxY": 11358.5, "series": [{"data": [[1.62512154E12, 4568.733333333334], [1.6251216E12, 11358.5], [1.62512166E12, 907.15], [1.62512148E12, 339.6666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512166E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

