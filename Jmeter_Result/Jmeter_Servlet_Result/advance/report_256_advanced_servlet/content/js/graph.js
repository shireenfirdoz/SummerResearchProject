/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 6881.0, "series": [{"data": [[0.0, 4.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 5.0], [4.8, 5.0], [4.9, 5.0], [5.0, 5.0], [5.1, 5.0], [5.2, 5.0], [5.3, 5.0], [5.4, 5.0], [5.5, 5.0], [5.6, 5.0], [5.7, 5.0], [5.8, 5.0], [5.9, 5.0], [6.0, 5.0], [6.1, 5.0], [6.2, 5.0], [6.3, 5.0], [6.4, 5.0], [6.5, 5.0], [6.6, 5.0], [6.7, 5.0], [6.8, 5.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 6.0], [18.3, 6.0], [18.4, 6.0], [18.5, 6.0], [18.6, 6.0], [18.7, 6.0], [18.8, 6.0], [18.9, 6.0], [19.0, 6.0], [19.1, 6.0], [19.2, 6.0], [19.3, 6.0], [19.4, 6.0], [19.5, 6.0], [19.6, 6.0], [19.7, 6.0], [19.8, 6.0], [19.9, 6.0], [20.0, 6.0], [20.1, 6.0], [20.2, 6.0], [20.3, 6.0], [20.4, 6.0], [20.5, 6.0], [20.6, 6.0], [20.7, 6.0], [20.8, 6.0], [20.9, 6.0], [21.0, 6.0], [21.1, 6.0], [21.2, 6.0], [21.3, 6.0], [21.4, 6.0], [21.5, 6.0], [21.6, 6.0], [21.7, 6.0], [21.8, 6.0], [21.9, 6.0], [22.0, 6.0], [22.1, 6.0], [22.2, 6.0], [22.3, 6.0], [22.4, 6.0], [22.5, 6.0], [22.6, 6.0], [22.7, 6.0], [22.8, 6.0], [22.9, 6.0], [23.0, 6.0], [23.1, 6.0], [23.2, 6.0], [23.3, 6.0], [23.4, 6.0], [23.5, 6.0], [23.6, 6.0], [23.7, 6.0], [23.8, 6.0], [23.9, 6.0], [24.0, 6.0], [24.1, 6.0], [24.2, 6.0], [24.3, 6.0], [24.4, 6.0], [24.5, 6.0], [24.6, 6.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 7.0], [31.2, 7.0], [31.3, 7.0], [31.4, 7.0], [31.5, 7.0], [31.6, 7.0], [31.7, 7.0], [31.8, 7.0], [31.9, 7.0], [32.0, 7.0], [32.1, 7.0], [32.2, 7.0], [32.3, 7.0], [32.4, 7.0], [32.5, 7.0], [32.6, 7.0], [32.7, 7.0], [32.8, 7.0], [32.9, 7.0], [33.0, 7.0], [33.1, 7.0], [33.2, 7.0], [33.3, 7.0], [33.4, 7.0], [33.5, 7.0], [33.6, 7.0], [33.7, 7.0], [33.8, 7.0], [33.9, 7.0], [34.0, 7.0], [34.1, 7.0], [34.2, 7.0], [34.3, 7.0], [34.4, 7.0], [34.5, 7.0], [34.6, 7.0], [34.7, 7.0], [34.8, 7.0], [34.9, 7.0], [35.0, 7.0], [35.1, 7.0], [35.2, 7.0], [35.3, 7.0], [35.4, 7.0], [35.5, 7.0], [35.6, 7.0], [35.7, 7.0], [35.8, 7.0], [35.9, 7.0], [36.0, 7.0], [36.1, 7.0], [36.2, 7.0], [36.3, 7.0], [36.4, 7.0], [36.5, 7.0], [36.6, 7.0], [36.7, 7.0], [36.8, 7.0], [36.9, 7.0], [37.0, 7.0], [37.1, 7.0], [37.2, 7.0], [37.3, 7.0], [37.4, 7.0], [37.5, 7.0], [37.6, 7.0], [37.7, 7.0], [37.8, 7.0], [37.9, 7.0], [38.0, 7.0], [38.1, 7.0], [38.2, 7.0], [38.3, 7.0], [38.4, 7.0], [38.5, 7.0], [38.6, 7.0], [38.7, 7.0], [38.8, 7.0], [38.9, 7.0], [39.0, 7.0], [39.1, 7.0], [39.2, 7.0], [39.3, 7.0], [39.4, 7.0], [39.5, 7.0], [39.6, 7.0], [39.7, 7.0], [39.8, 7.0], [39.9, 7.0], [40.0, 7.0], [40.1, 7.0], [40.2, 7.0], [40.3, 7.0], [40.4, 7.0], [40.5, 7.0], [40.6, 7.0], [40.7, 7.0], [40.8, 7.0], [40.9, 7.0], [41.0, 7.0], [41.1, 7.0], [41.2, 7.0], [41.3, 7.0], [41.4, 7.0], [41.5, 7.0], [41.6, 7.0], [41.7, 7.0], [41.8, 7.0], [41.9, 7.0], [42.0, 7.0], [42.1, 7.0], [42.2, 7.0], [42.3, 7.0], [42.4, 7.0], [42.5, 7.0], [42.6, 7.0], [42.7, 7.0], [42.8, 7.0], [42.9, 7.0], [43.0, 7.0], [43.1, 7.0], [43.2, 7.0], [43.3, 7.0], [43.4, 7.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 8.0], [47.2, 8.0], [47.3, 8.0], [47.4, 8.0], [47.5, 8.0], [47.6, 8.0], [47.7, 8.0], [47.8, 8.0], [47.9, 8.0], [48.0, 8.0], [48.1, 8.0], [48.2, 8.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 8.0], [48.9, 8.0], [49.0, 8.0], [49.1, 8.0], [49.2, 8.0], [49.3, 8.0], [49.4, 8.0], [49.5, 8.0], [49.6, 8.0], [49.7, 8.0], [49.8, 8.0], [49.9, 8.0], [50.0, 8.0], [50.1, 8.0], [50.2, 8.0], [50.3, 8.0], [50.4, 8.0], [50.5, 8.0], [50.6, 8.0], [50.7, 8.0], [50.8, 8.0], [50.9, 8.0], [51.0, 8.0], [51.1, 8.0], [51.2, 8.0], [51.3, 8.0], [51.4, 8.0], [51.5, 8.0], [51.6, 8.0], [51.7, 8.0], [51.8, 8.0], [51.9, 8.0], [52.0, 8.0], [52.1, 8.0], [52.2, 8.0], [52.3, 8.0], [52.4, 8.0], [52.5, 8.0], [52.6, 8.0], [52.7, 8.0], [52.8, 8.0], [52.9, 8.0], [53.0, 8.0], [53.1, 8.0], [53.2, 8.0], [53.3, 8.0], [53.4, 8.0], [53.5, 8.0], [53.6, 8.0], [53.7, 8.0], [53.8, 8.0], [53.9, 8.0], [54.0, 8.0], [54.1, 8.0], [54.2, 8.0], [54.3, 8.0], [54.4, 8.0], [54.5, 8.0], [54.6, 8.0], [54.7, 8.0], [54.8, 8.0], [54.9, 8.0], [55.0, 8.0], [55.1, 8.0], [55.2, 8.0], [55.3, 8.0], [55.4, 8.0], [55.5, 8.0], [55.6, 8.0], [55.7, 8.0], [55.8, 8.0], [55.9, 8.0], [56.0, 8.0], [56.1, 8.0], [56.2, 8.0], [56.3, 8.0], [56.4, 8.0], [56.5, 8.0], [56.6, 8.0], [56.7, 8.0], [56.8, 8.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 9.0], [58.9, 9.0], [59.0, 9.0], [59.1, 9.0], [59.2, 9.0], [59.3, 9.0], [59.4, 9.0], [59.5, 9.0], [59.6, 9.0], [59.7, 9.0], [59.8, 9.0], [59.9, 9.0], [60.0, 9.0], [60.1, 9.0], [60.2, 9.0], [60.3, 9.0], [60.4, 9.0], [60.5, 9.0], [60.6, 9.0], [60.7, 9.0], [60.8, 9.0], [60.9, 9.0], [61.0, 9.0], [61.1, 9.0], [61.2, 9.0], [61.3, 9.0], [61.4, 9.0], [61.5, 9.0], [61.6, 9.0], [61.7, 9.0], [61.8, 9.0], [61.9, 9.0], [62.0, 9.0], [62.1, 9.0], [62.2, 9.0], [62.3, 9.0], [62.4, 9.0], [62.5, 9.0], [62.6, 9.0], [62.7, 9.0], [62.8, 9.0], [62.9, 9.0], [63.0, 9.0], [63.1, 9.0], [63.2, 9.0], [63.3, 9.0], [63.4, 9.0], [63.5, 9.0], [63.6, 9.0], [63.7, 9.0], [63.8, 9.0], [63.9, 9.0], [64.0, 9.0], [64.1, 9.0], [64.2, 9.0], [64.3, 9.0], [64.4, 9.0], [64.5, 9.0], [64.6, 9.0], [64.7, 9.0], [64.8, 9.0], [64.9, 9.0], [65.0, 9.0], [65.1, 9.0], [65.2, 9.0], [65.3, 9.0], [65.4, 9.0], [65.5, 9.0], [65.6, 9.0], [65.7, 9.0], [65.8, 10.0], [65.9, 10.0], [66.0, 10.0], [66.1, 10.0], [66.2, 10.0], [66.3, 10.0], [66.4, 10.0], [66.5, 10.0], [66.6, 10.0], [66.7, 10.0], [66.8, 10.0], [66.9, 10.0], [67.0, 10.0], [67.1, 10.0], [67.2, 10.0], [67.3, 10.0], [67.4, 10.0], [67.5, 10.0], [67.6, 10.0], [67.7, 10.0], [67.8, 10.0], [67.9, 10.0], [68.0, 10.0], [68.1, 10.0], [68.2, 10.0], [68.3, 10.0], [68.4, 10.0], [68.5, 10.0], [68.6, 10.0], [68.7, 10.0], [68.8, 10.0], [68.9, 10.0], [69.0, 10.0], [69.1, 10.0], [69.2, 10.0], [69.3, 10.0], [69.4, 10.0], [69.5, 10.0], [69.6, 10.0], [69.7, 10.0], [69.8, 10.0], [69.9, 10.0], [70.0, 10.0], [70.1, 10.0], [70.2, 10.0], [70.3, 10.0], [70.4, 10.0], [70.5, 10.0], [70.6, 10.0], [70.7, 10.0], [70.8, 10.0], [70.9, 10.0], [71.0, 10.0], [71.1, 10.0], [71.2, 10.0], [71.3, 11.0], [71.4, 11.0], [71.5, 11.0], [71.6, 11.0], [71.7, 11.0], [71.8, 11.0], [71.9, 11.0], [72.0, 11.0], [72.1, 11.0], [72.2, 11.0], [72.3, 11.0], [72.4, 11.0], [72.5, 11.0], [72.6, 11.0], [72.7, 11.0], [72.8, 11.0], [72.9, 11.0], [73.0, 11.0], [73.1, 11.0], [73.2, 11.0], [73.3, 11.0], [73.4, 11.0], [73.5, 11.0], [73.6, 11.0], [73.7, 11.0], [73.8, 11.0], [73.9, 11.0], [74.0, 11.0], [74.1, 11.0], [74.2, 11.0], [74.3, 11.0], [74.4, 12.0], [74.5, 12.0], [74.6, 12.0], [74.7, 12.0], [74.8, 12.0], [74.9, 12.0], [75.0, 12.0], [75.1, 12.0], [75.2, 12.0], [75.3, 12.0], [75.4, 12.0], [75.5, 12.0], [75.6, 12.0], [75.7, 12.0], [75.8, 12.0], [75.9, 12.0], [76.0, 13.0], [76.1, 13.0], [76.2, 13.0], [76.3, 13.0], [76.4, 13.0], [76.5, 13.0], [76.6, 13.0], [76.7, 13.0], [76.8, 13.0], [76.9, 14.0], [77.0, 14.0], [77.1, 14.0], [77.2, 14.0], [77.3, 14.0], [77.4, 14.0], [77.5, 15.0], [77.6, 15.0], [77.7, 15.0], [77.8, 15.0], [77.9, 16.0], [78.0, 16.0], [78.1, 17.0], [78.2, 17.0], [78.3, 18.0], [78.4, 18.0], [78.5, 19.0], [78.6, 20.0], [78.7, 21.0], [78.8, 22.0], [78.9, 23.0], [79.0, 24.0], [79.1, 25.0], [79.2, 26.0], [79.3, 28.0], [79.4, 29.0], [79.5, 30.0], [79.6, 31.0], [79.7, 32.0], [79.8, 33.0], [79.9, 34.0], [80.0, 34.0], [80.1, 35.0], [80.2, 36.0], [80.3, 37.0], [80.4, 38.0], [80.5, 38.0], [80.6, 39.0], [80.7, 40.0], [80.8, 41.0], [80.9, 41.0], [81.0, 42.0], [81.1, 43.0], [81.2, 43.0], [81.3, 44.0], [81.4, 45.0], [81.5, 45.0], [81.6, 46.0], [81.7, 46.0], [81.8, 47.0], [81.9, 48.0], [82.0, 48.0], [82.1, 49.0], [82.2, 49.0], [82.3, 50.0], [82.4, 50.0], [82.5, 51.0], [82.6, 51.0], [82.7, 52.0], [82.8, 52.0], [82.9, 53.0], [83.0, 53.0], [83.1, 54.0], [83.2, 55.0], [83.3, 55.0], [83.4, 56.0], [83.5, 56.0], [83.6, 56.0], [83.7, 57.0], [83.8, 57.0], [83.9, 58.0], [84.0, 58.0], [84.1, 59.0], [84.2, 59.0], [84.3, 60.0], [84.4, 60.0], [84.5, 61.0], [84.6, 61.0], [84.7, 62.0], [84.8, 62.0], [84.9, 63.0], [85.0, 63.0], [85.1, 64.0], [85.2, 64.0], [85.3, 64.0], [85.4, 65.0], [85.5, 65.0], [85.6, 66.0], [85.7, 66.0], [85.8, 67.0], [85.9, 67.0], [86.0, 67.0], [86.1, 68.0], [86.2, 68.0], [86.3, 68.0], [86.4, 69.0], [86.5, 69.0], [86.6, 70.0], [86.7, 70.0], [86.8, 70.0], [86.9, 71.0], [87.0, 71.0], [87.1, 71.0], [87.2, 72.0], [87.3, 72.0], [87.4, 72.0], [87.5, 73.0], [87.6, 73.0], [87.7, 73.0], [87.8, 74.0], [87.9, 74.0], [88.0, 74.0], [88.1, 75.0], [88.2, 75.0], [88.3, 75.0], [88.4, 76.0], [88.5, 76.0], [88.6, 76.0], [88.7, 77.0], [88.8, 77.0], [88.9, 77.0], [89.0, 77.0], [89.1, 78.0], [89.2, 78.0], [89.3, 78.0], [89.4, 79.0], [89.5, 79.0], [89.6, 79.0], [89.7, 80.0], [89.8, 80.0], [89.9, 80.0], [90.0, 81.0], [90.1, 81.0], [90.2, 81.0], [90.3, 82.0], [90.4, 82.0], [90.5, 82.0], [90.6, 83.0], [90.7, 83.0], [90.8, 83.0], [90.9, 84.0], [91.0, 84.0], [91.1, 84.0], [91.2, 85.0], [91.3, 85.0], [91.4, 85.0], [91.5, 86.0], [91.6, 86.0], [91.7, 86.0], [91.8, 87.0], [91.9, 87.0], [92.0, 88.0], [92.1, 88.0], [92.2, 88.0], [92.3, 89.0], [92.4, 89.0], [92.5, 89.0], [92.6, 90.0], [92.7, 90.0], [92.8, 90.0], [92.9, 91.0], [93.0, 91.0], [93.1, 92.0], [93.2, 92.0], [93.3, 92.0], [93.4, 93.0], [93.5, 93.0], [93.6, 93.0], [93.7, 94.0], [93.8, 94.0], [93.9, 94.0], [94.0, 95.0], [94.1, 95.0], [94.2, 96.0], [94.3, 96.0], [94.4, 96.0], [94.5, 97.0], [94.6, 97.0], [94.7, 98.0], [94.8, 98.0], [94.9, 98.0], [95.0, 99.0], [95.1, 99.0], [95.2, 100.0], [95.3, 100.0], [95.4, 101.0], [95.5, 102.0], [95.6, 102.0], [95.7, 103.0], [95.8, 105.0], [95.9, 106.0], [96.0, 109.0], [96.1, 113.0], [96.2, 121.0], [96.3, 134.0], [96.4, 143.0], [96.5, 152.0], [96.6, 160.0], [96.7, 167.0], [96.8, 174.0], [96.9, 179.0], [97.0, 184.0], [97.1, 187.0], [97.2, 191.0], [97.3, 194.0], [97.4, 197.0], [97.5, 201.0], [97.6, 206.0], [97.7, 221.0], [97.8, 247.0], [97.9, 270.0], [98.0, 285.0], [98.1, 294.0], [98.2, 302.0], [98.3, 317.0], [98.4, 361.0], [98.5, 384.0], [98.6, 397.0], [98.7, 411.0], [98.8, 466.0], [98.9, 490.0], [99.0, 503.0], [99.1, 565.0], [99.2, 597.0], [99.3, 657.0], [99.4, 701.0], [99.5, 793.0], [99.6, 904.0], [99.7, 1132.0], [99.8, 1406.0], [99.9, 1774.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 5.0], [4.8, 5.0], [4.9, 5.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 6.0], [18.3, 6.0], [18.4, 6.0], [18.5, 6.0], [18.6, 6.0], [18.7, 6.0], [18.8, 6.0], [18.9, 6.0], [19.0, 6.0], [19.1, 6.0], [19.2, 6.0], [19.3, 6.0], [19.4, 6.0], [19.5, 6.0], [19.6, 6.0], [19.7, 6.0], [19.8, 6.0], [19.9, 6.0], [20.0, 6.0], [20.1, 6.0], [20.2, 6.0], [20.3, 6.0], [20.4, 6.0], [20.5, 6.0], [20.6, 6.0], [20.7, 6.0], [20.8, 6.0], [20.9, 6.0], [21.0, 6.0], [21.1, 6.0], [21.2, 6.0], [21.3, 6.0], [21.4, 6.0], [21.5, 6.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 7.0], [31.2, 7.0], [31.3, 7.0], [31.4, 7.0], [31.5, 7.0], [31.6, 7.0], [31.7, 7.0], [31.8, 7.0], [31.9, 7.0], [32.0, 7.0], [32.1, 7.0], [32.2, 7.0], [32.3, 7.0], [32.4, 7.0], [32.5, 7.0], [32.6, 7.0], [32.7, 7.0], [32.8, 7.0], [32.9, 7.0], [33.0, 7.0], [33.1, 7.0], [33.2, 7.0], [33.3, 7.0], [33.4, 7.0], [33.5, 7.0], [33.6, 7.0], [33.7, 7.0], [33.8, 7.0], [33.9, 7.0], [34.0, 7.0], [34.1, 7.0], [34.2, 7.0], [34.3, 7.0], [34.4, 7.0], [34.5, 7.0], [34.6, 7.0], [34.7, 7.0], [34.8, 7.0], [34.9, 7.0], [35.0, 7.0], [35.1, 7.0], [35.2, 7.0], [35.3, 7.0], [35.4, 7.0], [35.5, 7.0], [35.6, 7.0], [35.7, 7.0], [35.8, 7.0], [35.9, 7.0], [36.0, 7.0], [36.1, 7.0], [36.2, 7.0], [36.3, 7.0], [36.4, 7.0], [36.5, 7.0], [36.6, 7.0], [36.7, 7.0], [36.8, 7.0], [36.9, 7.0], [37.0, 7.0], [37.1, 7.0], [37.2, 7.0], [37.3, 7.0], [37.4, 7.0], [37.5, 7.0], [37.6, 7.0], [37.7, 7.0], [37.8, 7.0], [37.9, 7.0], [38.0, 7.0], [38.1, 7.0], [38.2, 7.0], [38.3, 7.0], [38.4, 7.0], [38.5, 7.0], [38.6, 7.0], [38.7, 7.0], [38.8, 7.0], [38.9, 7.0], [39.0, 7.0], [39.1, 7.0], [39.2, 7.0], [39.3, 7.0], [39.4, 7.0], [39.5, 7.0], [39.6, 7.0], [39.7, 7.0], [39.8, 7.0], [39.9, 7.0], [40.0, 7.0], [40.1, 7.0], [40.2, 7.0], [40.3, 7.0], [40.4, 7.0], [40.5, 7.0], [40.6, 7.0], [40.7, 7.0], [40.8, 7.0], [40.9, 8.0], [41.0, 8.0], [41.1, 8.0], [41.2, 8.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 8.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 8.0], [47.2, 8.0], [47.3, 8.0], [47.4, 8.0], [47.5, 8.0], [47.6, 8.0], [47.7, 8.0], [47.8, 8.0], [47.9, 8.0], [48.0, 8.0], [48.1, 8.0], [48.2, 8.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 8.0], [48.9, 8.0], [49.0, 8.0], [49.1, 8.0], [49.2, 8.0], [49.3, 8.0], [49.4, 8.0], [49.5, 8.0], [49.6, 8.0], [49.7, 8.0], [49.8, 8.0], [49.9, 8.0], [50.0, 8.0], [50.1, 8.0], [50.2, 8.0], [50.3, 8.0], [50.4, 8.0], [50.5, 8.0], [50.6, 8.0], [50.7, 8.0], [50.8, 8.0], [50.9, 8.0], [51.0, 8.0], [51.1, 8.0], [51.2, 8.0], [51.3, 8.0], [51.4, 8.0], [51.5, 8.0], [51.6, 8.0], [51.7, 8.0], [51.8, 8.0], [51.9, 8.0], [52.0, 8.0], [52.1, 8.0], [52.2, 8.0], [52.3, 8.0], [52.4, 8.0], [52.5, 8.0], [52.6, 8.0], [52.7, 8.0], [52.8, 8.0], [52.9, 8.0], [53.0, 8.0], [53.1, 8.0], [53.2, 8.0], [53.3, 8.0], [53.4, 8.0], [53.5, 8.0], [53.6, 8.0], [53.7, 8.0], [53.8, 8.0], [53.9, 8.0], [54.0, 8.0], [54.1, 8.0], [54.2, 8.0], [54.3, 8.0], [54.4, 8.0], [54.5, 8.0], [54.6, 8.0], [54.7, 8.0], [54.8, 8.0], [54.9, 8.0], [55.0, 8.0], [55.1, 9.0], [55.2, 9.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 9.0], [58.9, 9.0], [59.0, 9.0], [59.1, 9.0], [59.2, 9.0], [59.3, 9.0], [59.4, 9.0], [59.5, 9.0], [59.6, 9.0], [59.7, 9.0], [59.8, 9.0], [59.9, 9.0], [60.0, 9.0], [60.1, 9.0], [60.2, 9.0], [60.3, 9.0], [60.4, 9.0], [60.5, 9.0], [60.6, 9.0], [60.7, 9.0], [60.8, 9.0], [60.9, 9.0], [61.0, 9.0], [61.1, 9.0], [61.2, 9.0], [61.3, 9.0], [61.4, 9.0], [61.5, 9.0], [61.6, 9.0], [61.7, 9.0], [61.8, 9.0], [61.9, 9.0], [62.0, 9.0], [62.1, 9.0], [62.2, 9.0], [62.3, 9.0], [62.4, 9.0], [62.5, 9.0], [62.6, 9.0], [62.7, 9.0], [62.8, 9.0], [62.9, 9.0], [63.0, 9.0], [63.1, 9.0], [63.2, 9.0], [63.3, 9.0], [63.4, 9.0], [63.5, 9.0], [63.6, 9.0], [63.7, 9.0], [63.8, 9.0], [63.9, 9.0], [64.0, 9.0], [64.1, 9.0], [64.2, 9.0], [64.3, 9.0], [64.4, 9.0], [64.5, 9.0], [64.6, 9.0], [64.7, 10.0], [64.8, 10.0], [64.9, 10.0], [65.0, 10.0], [65.1, 10.0], [65.2, 10.0], [65.3, 10.0], [65.4, 10.0], [65.5, 10.0], [65.6, 10.0], [65.7, 10.0], [65.8, 10.0], [65.9, 10.0], [66.0, 10.0], [66.1, 10.0], [66.2, 10.0], [66.3, 10.0], [66.4, 10.0], [66.5, 10.0], [66.6, 10.0], [66.7, 10.0], [66.8, 10.0], [66.9, 10.0], [67.0, 10.0], [67.1, 10.0], [67.2, 10.0], [67.3, 10.0], [67.4, 10.0], [67.5, 10.0], [67.6, 10.0], [67.7, 10.0], [67.8, 10.0], [67.9, 10.0], [68.0, 10.0], [68.1, 10.0], [68.2, 10.0], [68.3, 10.0], [68.4, 10.0], [68.5, 10.0], [68.6, 10.0], [68.7, 10.0], [68.8, 10.0], [68.9, 10.0], [69.0, 10.0], [69.1, 10.0], [69.2, 10.0], [69.3, 10.0], [69.4, 10.0], [69.5, 10.0], [69.6, 10.0], [69.7, 10.0], [69.8, 10.0], [69.9, 10.0], [70.0, 10.0], [70.1, 10.0], [70.2, 10.0], [70.3, 10.0], [70.4, 10.0], [70.5, 10.0], [70.6, 10.0], [70.7, 11.0], [70.8, 11.0], [70.9, 11.0], [71.0, 11.0], [71.1, 11.0], [71.2, 11.0], [71.3, 11.0], [71.4, 11.0], [71.5, 11.0], [71.6, 11.0], [71.7, 11.0], [71.8, 11.0], [71.9, 11.0], [72.0, 11.0], [72.1, 11.0], [72.2, 11.0], [72.3, 11.0], [72.4, 11.0], [72.5, 11.0], [72.6, 11.0], [72.7, 11.0], [72.8, 11.0], [72.9, 11.0], [73.0, 11.0], [73.1, 11.0], [73.2, 11.0], [73.3, 11.0], [73.4, 11.0], [73.5, 11.0], [73.6, 11.0], [73.7, 11.0], [73.8, 11.0], [73.9, 11.0], [74.0, 11.0], [74.1, 12.0], [74.2, 12.0], [74.3, 12.0], [74.4, 12.0], [74.5, 12.0], [74.6, 12.0], [74.7, 12.0], [74.8, 12.0], [74.9, 12.0], [75.0, 12.0], [75.1, 12.0], [75.2, 12.0], [75.3, 12.0], [75.4, 12.0], [75.5, 12.0], [75.6, 12.0], [75.7, 12.0], [75.8, 12.0], [75.9, 13.0], [76.0, 13.0], [76.1, 13.0], [76.2, 13.0], [76.3, 13.0], [76.4, 13.0], [76.5, 13.0], [76.6, 13.0], [76.7, 13.0], [76.8, 13.0], [76.9, 14.0], [77.0, 14.0], [77.1, 14.0], [77.2, 14.0], [77.3, 14.0], [77.4, 14.0], [77.5, 15.0], [77.6, 15.0], [77.7, 15.0], [77.8, 16.0], [77.9, 16.0], [78.0, 16.0], [78.1, 17.0], [78.2, 17.0], [78.3, 18.0], [78.4, 18.0], [78.5, 19.0], [78.6, 20.0], [78.7, 21.0], [78.8, 22.0], [78.9, 23.0], [79.0, 24.0], [79.1, 25.0], [79.2, 26.0], [79.3, 27.0], [79.4, 28.0], [79.5, 30.0], [79.6, 30.0], [79.7, 32.0], [79.8, 32.0], [79.9, 33.0], [80.0, 34.0], [80.1, 35.0], [80.2, 36.0], [80.3, 37.0], [80.4, 37.0], [80.5, 38.0], [80.6, 39.0], [80.7, 40.0], [80.8, 40.0], [80.9, 41.0], [81.0, 42.0], [81.1, 42.0], [81.2, 43.0], [81.3, 44.0], [81.4, 44.0], [81.5, 45.0], [81.6, 46.0], [81.7, 46.0], [81.8, 47.0], [81.9, 47.0], [82.0, 48.0], [82.1, 49.0], [82.2, 49.0], [82.3, 50.0], [82.4, 50.0], [82.5, 51.0], [82.6, 51.0], [82.7, 52.0], [82.8, 52.0], [82.9, 53.0], [83.0, 53.0], [83.1, 54.0], [83.2, 54.0], [83.3, 55.0], [83.4, 55.0], [83.5, 56.0], [83.6, 56.0], [83.7, 57.0], [83.8, 57.0], [83.9, 58.0], [84.0, 58.0], [84.1, 59.0], [84.2, 59.0], [84.3, 60.0], [84.4, 60.0], [84.5, 61.0], [84.6, 61.0], [84.7, 62.0], [84.8, 62.0], [84.9, 63.0], [85.0, 63.0], [85.1, 64.0], [85.2, 64.0], [85.3, 64.0], [85.4, 65.0], [85.5, 65.0], [85.6, 66.0], [85.7, 66.0], [85.8, 67.0], [85.9, 67.0], [86.0, 67.0], [86.1, 68.0], [86.2, 68.0], [86.3, 69.0], [86.4, 69.0], [86.5, 69.0], [86.6, 70.0], [86.7, 70.0], [86.8, 70.0], [86.9, 71.0], [87.0, 71.0], [87.1, 71.0], [87.2, 72.0], [87.3, 72.0], [87.4, 72.0], [87.5, 73.0], [87.6, 73.0], [87.7, 74.0], [87.8, 74.0], [87.9, 74.0], [88.0, 75.0], [88.1, 75.0], [88.2, 75.0], [88.3, 76.0], [88.4, 76.0], [88.5, 76.0], [88.6, 76.0], [88.7, 77.0], [88.8, 77.0], [88.9, 77.0], [89.0, 78.0], [89.1, 78.0], [89.2, 78.0], [89.3, 79.0], [89.4, 79.0], [89.5, 79.0], [89.6, 80.0], [89.7, 80.0], [89.8, 80.0], [89.9, 81.0], [90.0, 81.0], [90.1, 81.0], [90.2, 82.0], [90.3, 82.0], [90.4, 82.0], [90.5, 83.0], [90.6, 83.0], [90.7, 83.0], [90.8, 84.0], [90.9, 84.0], [91.0, 84.0], [91.1, 85.0], [91.2, 85.0], [91.3, 85.0], [91.4, 86.0], [91.5, 86.0], [91.6, 86.0], [91.7, 87.0], [91.8, 87.0], [91.9, 88.0], [92.0, 88.0], [92.1, 88.0], [92.2, 89.0], [92.3, 89.0], [92.4, 89.0], [92.5, 90.0], [92.6, 90.0], [92.7, 91.0], [92.8, 91.0], [92.9, 91.0], [93.0, 92.0], [93.1, 92.0], [93.2, 92.0], [93.3, 93.0], [93.4, 93.0], [93.5, 94.0], [93.6, 94.0], [93.7, 94.0], [93.8, 95.0], [93.9, 95.0], [94.0, 95.0], [94.1, 96.0], [94.2, 96.0], [94.3, 96.0], [94.4, 97.0], [94.5, 97.0], [94.6, 98.0], [94.7, 98.0], [94.8, 98.0], [94.9, 99.0], [95.0, 99.0], [95.1, 100.0], [95.2, 100.0], [95.3, 101.0], [95.4, 102.0], [95.5, 102.0], [95.6, 103.0], [95.7, 104.0], [95.8, 106.0], [95.9, 107.0], [96.0, 111.0], [96.1, 116.0], [96.2, 128.0], [96.3, 139.0], [96.4, 148.0], [96.5, 155.0], [96.6, 163.0], [96.7, 170.0], [96.8, 176.0], [96.9, 181.0], [97.0, 185.0], [97.1, 189.0], [97.2, 192.0], [97.3, 195.0], [97.4, 198.0], [97.5, 202.0], [97.6, 209.0], [97.7, 230.0], [97.8, 253.0], [97.9, 274.0], [98.0, 288.0], [98.1, 296.0], [98.2, 304.0], [98.3, 329.0], [98.4, 370.0], [98.5, 389.0], [98.6, 401.0], [98.7, 417.0], [98.8, 475.0], [98.9, 492.0], [99.0, 508.0], [99.1, 579.0], [99.2, 602.0], [99.3, 672.0], [99.4, 710.0], [99.5, 803.0], [99.6, 949.0], [99.7, 1150.0], [99.8, 1423.0], [99.9, 1790.0], [100.0, 6881.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 447522.0, "series": [{"data": [[0.0, 447522.0], [600.0, 870.0], [700.0, 555.0], [800.0, 375.0], [900.0, 240.0], [1000.0, 201.0], [1100.0, 175.0], [1200.0, 162.0], [1300.0, 176.0], [1400.0, 156.0], [1500.0, 141.0], [1600.0, 131.0], [1700.0, 90.0], [1800.0, 74.0], [1900.0, 31.0], [2000.0, 29.0], [2100.0, 30.0], [2200.0, 19.0], [2300.0, 28.0], [2400.0, 4.0], [2500.0, 2.0], [2600.0, 3.0], [2800.0, 6.0], [2700.0, 4.0], [2900.0, 1.0], [3000.0, 4.0], [3100.0, 3.0], [3300.0, 7.0], [3200.0, 4.0], [3400.0, 8.0], [3500.0, 5.0], [3600.0, 6.0], [3700.0, 2.0], [3800.0, 3.0], [3900.0, 3.0], [4000.0, 2.0], [4300.0, 6.0], [4100.0, 2.0], [4200.0, 6.0], [4400.0, 7.0], [4500.0, 7.0], [4600.0, 9.0], [4700.0, 8.0], [4800.0, 10.0], [5000.0, 13.0], [4900.0, 16.0], [5100.0, 9.0], [5200.0, 8.0], [5300.0, 6.0], [5400.0, 5.0], [5500.0, 9.0], [5600.0, 25.0], [5700.0, 1.0], [5800.0, 1.0], [6000.0, 1.0], [6300.0, 4.0], [6600.0, 2.0], [6400.0, 1.0], [6800.0, 1.0], [6700.0, 1.0], [100.0, 10900.0], [200.0, 3329.0], [300.0, 2123.0], [400.0, 1683.0], [500.0, 1083.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 447207.0], [600.0, 878.0], [700.0, 562.0], [800.0, 368.0], [900.0, 295.0], [1000.0, 218.0], [1100.0, 197.0], [1200.0, 150.0], [1300.0, 177.0], [1400.0, 174.0], [1500.0, 131.0], [1600.0, 105.0], [1700.0, 112.0], [1800.0, 69.0], [1900.0, 36.0], [2000.0, 34.0], [2100.0, 27.0], [2200.0, 24.0], [2300.0, 20.0], [2400.0, 12.0], [2500.0, 3.0], [2600.0, 1.0], [2800.0, 7.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 7.0], [3100.0, 6.0], [3300.0, 6.0], [3200.0, 5.0], [3400.0, 11.0], [3500.0, 6.0], [3600.0, 7.0], [3700.0, 5.0], [3800.0, 6.0], [3900.0, 3.0], [4000.0, 2.0], [4100.0, 6.0], [4200.0, 3.0], [4300.0, 6.0], [4600.0, 10.0], [4500.0, 6.0], [4400.0, 2.0], [4700.0, 11.0], [4800.0, 12.0], [5000.0, 6.0], [5100.0, 9.0], [4900.0, 18.0], [5300.0, 8.0], [5200.0, 12.0], [5400.0, 10.0], [5500.0, 5.0], [5600.0, 12.0], [5700.0, 3.0], [6100.0, 1.0], [6200.0, 2.0], [6300.0, 1.0], [6600.0, 2.0], [6400.0, 3.0], [6500.0, 2.0], [6800.0, 6.0], [100.0, 11272.0], [200.0, 3361.0], [300.0, 2071.0], [400.0, 1709.0], [500.0, 1112.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1598.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 931226.0, "series": [{"data": [[0.0, 931226.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8078.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1598.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 60.41977611940303, "minX": 1.62512526E12, "maxY": 256.0, "series": [{"data": [[1.62512532E12, 60.41977611940303], [1.62512526E12, 64.0]], "isOverall": false, "label": "warm_up", "isController": false}, {"data": [[1.62512544E12, 63.909066145860024]], "isOverall": false, "label": "cool_down_phase", "isController": false}, {"data": [[1.62512532E12, 255.71124089583768], [1.62512544E12, 252.428119382274], [1.62512538E12, 256.0]], "isOverall": false, "label": "peak_phase", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512544E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 4981.0, "series": [{"data": [[2.0, 612.0], [3.0, 7.5], [4.0, 2349.5], [5.0, 576.5], [7.0, 3517.666666666667], [8.0, 4981.0], [9.0, 566.0], [10.0, 8.0], [11.0, 2900.25], [12.0, 817.8333333333334], [13.0, 8.5], [14.0, 12.0], [15.0, 3181.0], [16.0, 7.333333333333333], [17.0, 7.0], [18.0, 1175.5], [19.0, 1534.6666666666665], [20.0, 16.375], [21.0, 1494.3333333333335], [22.0, 2935.5], [23.0, 1482.8], [24.0, 9.333333333333334], [25.0, 922.0], [26.0, 6.75], [27.0, 1751.5], [28.0, 726.0], [29.0, 206.0], [30.0, 281.0555555555555], [31.0, 11.421052631578945], [33.0, 7.333333333333332], [34.0, 14.789473684210531], [35.0, 9.0], [36.0, 1424.5714285714287], [37.0, 7.0], [39.0, 10.049999999999999], [38.0, 7.0], [40.0, 7.0], [41.0, 13.5], [43.0, 9.5], [42.0, 294.625], [45.0, 503.8260869565217], [44.0, 8.0], [46.0, 38.17241379310346], [48.0, 8.000000000000002], [49.0, 7.578947368421054], [50.0, 8.222222222222221], [51.0, 7.5], [53.0, 907.3333333333334], [52.0, 7.514285714285715], [54.0, 105.61538461538463], [55.0, 6.428571428571429], [57.0, 10.153846153846155], [56.0, 12.75], [59.0, 14.750000000000005], [58.0, 8.333333333333332], [60.0, 138.55555555555557], [61.0, 176.0], [63.0, 218.2], [62.0, 23.5], [64.0, 18.306720672067087], [67.0, 7.75], [65.0, 49.5], [68.0, 19.5], [71.0, 8.312500000000002], [70.0, 7.9230769230769225], [69.0, 9.5], [74.0, 62.99999999999999], [75.0, 17.69230769230769], [73.0, 65.0], [72.0, 27.5], [76.0, 28.749999999999996], [78.0, 8.2], [79.0, 7.666666666666667], [83.0, 204.4], [85.0, 7.666666666666668], [87.0, 8.714285714285714], [86.0, 7.5], [84.0, 7.7272727272727275], [91.0, 40.4], [89.0, 31.0], [88.0, 7.333333333333333], [94.0, 1055.0], [92.0, 23.11111111111111], [99.0, 77.85714285714288], [98.0, 47.0], [97.0, 119.2], [96.0, 163.875], [103.0, 8.333333333333334], [102.0, 7.212121212121213], [101.0, 306.0], [100.0, 10.639639639639636], [105.0, 34.25], [104.0, 7.636363636363637], [108.0, 173.66666666666666], [110.0, 9.0], [109.0, 1179.75], [112.0, 32.4], [113.0, 9.25], [115.0, 6.5], [114.0, 127.8], [116.0, 10.5], [117.0, 10.5], [119.0, 90.0], [118.0, 73.5], [123.0, 24.666666666666668], [122.0, 89.0], [121.0, 120.33333333333333], [120.0, 92.0], [127.0, 47.0], [124.0, 25.25], [135.0, 7.0], [134.0, 15.666666666666666], [133.0, 27.5], [132.0, 8.5], [131.0, 48.5], [129.0, 35.66666666666667], [143.0, 9.0], [142.0, 8.0], [141.0, 8.0], [140.0, 9.0], [139.0, 7.5], [138.0, 80.25], [136.0, 194.0], [151.0, 6.666666666666667], [148.0, 7.333333333333333], [147.0, 7.666666666666667], [146.0, 10.0], [145.0, 20.666666666666668], [144.0, 6.0], [159.0, 8.0], [158.0, 7.0], [157.0, 8.0], [156.0, 6.333333333333333], [155.0, 7.0], [154.0, 6.6], [153.0, 5.0], [152.0, 7.25], [162.0, 7.302325581395348], [167.0, 11.88888888888889], [166.0, 23.4], [165.0, 213.66666666666669], [164.0, 34.0], [163.0, 8.0], [161.0, 9.681818181818185], [160.0, 6.933333333333333], [175.0, 52.5], [173.0, 29.333333333333332], [172.0, 8.508474576271185], [171.0, 6.833333333333333], [170.0, 7.074074074074075], [169.0, 7.749999999999999], [183.0, 330.0], [182.0, 323.5], [180.0, 53.0], [179.0, 8.0], [177.0, 19.187500000000004], [176.0, 28.749999999999996], [187.0, 82.25], [189.0, 22.4], [191.0, 63.64999999999999], [186.0, 19.230769230769237], [185.0, 18.857142857142858], [184.0, 31.285714285714285], [198.0, 7.0], [199.0, 7.064814814814815], [197.0, 10.423076923076922], [196.0, 9.999999999999998], [195.0, 7.132075471698114], [194.0, 6.799999999999999], [193.0, 8.142857142857142], [192.0, 22.393939393939394], [201.0, 26.545454545454547], [203.0, 63.157894736842096], [204.0, 39.66666666666667], [205.0, 19.153846153846153], [207.0, 23.555555555555557], [206.0, 27.6], [202.0, 38.166666666666664], [200.0, 39.30645161290322], [215.0, 6.739130434782609], [214.0, 6.847457627118646], [213.0, 6.666666666666667], [212.0, 5.75], [211.0, 6.800000000000001], [210.0, 8.0], [209.0, 27.666666666666664], [208.0, 20.615384615384613], [223.0, 22.51851851851852], [222.0, 15.112903225806456], [221.0, 9.000000000000002], [220.0, 7.255319148936171], [219.0, 9.317829457364338], [218.0, 19.666666666666664], [217.0, 10.500000000000005], [216.0, 7.058823529411764], [228.0, 14.615384615384617], [231.0, 11.0], [230.0, 402.0], [229.0, 10.741935483870966], [227.0, 10.707602339181292], [226.0, 14.666666666666673], [225.0, 52.703125000000014], [224.0, 29.5], [233.0, 109.66666666666667], [236.0, 35.54761904761905], [237.0, 81.0], [238.0, 20.0], [239.0, 10.0], [235.0, 25.0], [234.0, 28.0], [232.0, 23.75], [240.0, 19.375], [241.0, 7.999999999999999], [243.0, 9.5], [247.0, 21.714285714285715], [245.0, 10.642857142857142], [242.0, 6.8], [255.0, 21.333333333333332], [254.0, 34.83333333333333], [253.0, 43.0], [251.0, 24.555555555555554], [250.0, 8.999999999999998], [249.0, 21.714285714285715], [248.0, 9.6], [256.0, 41.404452064113734], [1.0, 1241.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[214.6080923061196, 36.65704754777357]], "isOverall": false, "label": "Post_Request-Aggregated", "isController": false}, {"data": [[2.0, 4760.0], [3.0, 1203.5], [5.0, 802.6666666666667], [6.0, 8.0], [7.0, 2593.0], [8.0, 1032.0], [9.0, 734.0], [10.0, 1610.0], [11.0, 2535.0], [12.0, 7.333333333333333], [13.0, 7.666666666666667], [14.0, 778.5], [15.0, 1481.0], [16.0, 260.0], [17.0, 8.0], [18.0, 1569.1666666666665], [19.0, 25.125], [20.0, 938.8], [21.0, 9.0], [22.0, 7.0], [23.0, 1089.25], [24.0, 52.0], [25.0, 946.5], [26.0, 802.9999999999999], [27.0, 7.666666666666667], [28.0, 1489.0], [29.0, 416.4000000000001], [30.0, 247.55172413793105], [31.0, 11.181818181818182], [33.0, 17.285714285714285], [32.0, 69.0], [35.0, 16.75], [34.0, 7.266666666666667], [36.0, 846.0833333333334], [37.0, 7.8], [39.0, 31.4], [38.0, 206.71428571428572], [40.0, 126.45454545454548], [41.0, 7.333333333333333], [42.0, 21.416666666666664], [43.0, 321.25], [45.0, 676.2727272727275], [44.0, 8.5], [47.0, 508.66666666666663], [46.0, 10.476190476190478], [48.0, 29.5], [49.0, 10.641025641025644], [50.0, 8.333333333333334], [51.0, 9.125], [53.0, 405.57142857142856], [52.0, 10.56], [55.0, 11.6], [54.0, 8.714285714285715], [56.0, 14.4], [57.0, 13.96774193548387], [58.0, 16.916666666666664], [59.0, 9.666666666666666], [61.0, 245.75], [60.0, 142.61538461538458], [63.0, 12.666666666666666], [62.0, 14.0], [64.0, 19.413943398678647], [67.0, 21.6], [66.0, 38.0], [69.0, 24.833333333333332], [70.0, 13.666666666666666], [71.0, 10.874999999999998], [68.0, 7.0], [74.0, 47.2], [75.0, 51.0], [73.0, 42.0], [72.0, 7.166666666666667], [76.0, 121.36363636363637], [78.0, 20.5], [79.0, 7.0], [81.0, 42.0], [82.0, 28.0], [83.0, 349.66666666666663], [80.0, 6.0], [85.0, 9.3125], [87.0, 8.25], [86.0, 8.0], [84.0, 7.2], [91.0, 40.83333333333333], [89.0, 48.0], [88.0, 7.333333333333333], [94.0, 1055.0], [92.0, 16.0], [99.0, 6.8], [98.0, 7.666666666666667], [97.0, 182.16666666666666], [96.0, 203.36363636363635], [103.0, 11.142857142857142], [102.0, 7.500000000000002], [101.0, 312.6666666666667], [100.0, 8.715596330275226], [106.0, 86.75], [105.0, 47.5], [104.0, 18.352941176470587], [108.0, 845.5], [110.0, 112.5], [109.0, 1076.3333333333333], [112.0, 76.83333333333334], [113.0, 14.333333333333334], [115.0, 26.0], [114.0, 249.5], [116.0, 25.5], [117.0, 25.0], [118.0, 15.5], [119.0, 35.4], [122.0, 21.0], [123.0, 400.0], [121.0, 6.0], [120.0, 52.0], [127.0, 36.666666666666664], [126.0, 49.666666666666664], [125.0, 46.0], [124.0, 7.6], [135.0, 45.0], [134.0, 7.5], [133.0, 33.66666666666667], [132.0, 202.0], [130.0, 31.0], [129.0, 74.0], [142.0, 20.0], [141.0, 16.0], [139.0, 15.428571428571427], [138.0, 32.0], [136.0, 7.0], [149.0, 12.5], [151.0, 7.75], [148.0, 6.0], [145.0, 55.0], [159.0, 7.0], [158.0, 7.0], [156.0, 7.0], [155.0, 7.75], [154.0, 7.636363636363636], [153.0, 7.5], [152.0, 7.666666666666667], [167.0, 14.318181818181818], [166.0, 18.46153846153846], [165.0, 150.5], [164.0, 13.125], [163.0, 5.0], [162.0, 10.959999999999999], [161.0, 44.10344827586206], [160.0, 7.1], [174.0, 9.0], [173.0, 14.999999999999998], [172.0, 9.031746031746032], [171.0, 8.75], [170.0, 7.04], [169.0, 7.363636363636363], [183.0, 52.5], [182.0, 196.8], [177.0, 21.954545454545453], [176.0, 7.8], [187.0, 95.19047619047619], [189.0, 37.2], [190.0, 12.0], [191.0, 34.42307692307692], [186.0, 19.136363636363633], [185.0, 26.666666666666668], [184.0, 24.799999999999997], [192.0, 16.958333333333332], [193.0, 14.714285714285714], [198.0, 20.312500000000004], [199.0, 7.368421052631579], [197.0, 13.660714285714286], [196.0, 10.61111111111111], [195.0, 7.171875], [194.0, 7.133333333333333], [200.0, 17.338983050847464], [201.0, 33.0], [203.0, 113.04166666666666], [204.0, 208.83333333333331], [205.0, 160.4], [207.0, 48.27777777777778], [206.0, 24.0], [202.0, 37.55555555555556], [211.0, 7.999999999999998], [215.0, 7.2857142857142865], [214.0, 6.760869565217391], [213.0, 7.083333333333333], [212.0, 6.25], [210.0, 18.714285714285715], [209.0, 11.818181818181818], [208.0, 13.833333333333332], [223.0, 20.677419354838708], [222.0, 12.310810810810807], [221.0, 7.538461538461538], [220.0, 7.269230769230767], [219.0, 8.94890510948905], [218.0, 9.571428571428571], [217.0, 10.838709677419354], [216.0, 8.285714285714285], [225.0, 38.859649122807035], [228.0, 20.77777777777778], [230.0, 197.0], [229.0, 9.653846153846153], [227.0, 16.9050279329609], [226.0, 46.92857142857143], [224.0, 6.333333333333333], [233.0, 84.6], [236.0, 39.862745098039206], [237.0, 92.0], [238.0, 17.2], [239.0, 64.0], [235.0, 25.0], [232.0, 42.8], [240.0, 11.583333333333334], [243.0, 16.5], [247.0, 21.53846153846154], [245.0, 13.714285714285714], [242.0, 6.352941176470587], [241.0, 6.333333333333333], [255.0, 19.833333333333332], [254.0, 14.076923076923077], [253.0, 40.00000000000001], [251.0, 21.42857142857143], [250.0, 9.105263157894736], [249.0, 16.916666666666668], [248.0, 9.909090909090908], [256.0, 41.73125292497926], [1.0, 2400.0]], "isOverall": false, "label": "Get_Request", "isController": false}, {"data": [[214.57761489649, 37.119629203024935]], "isOverall": false, "label": "Get_Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 256.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20032.116666666665, "minX": 1.62512526E12, "maxY": 1.286216195E7, "series": [{"data": [[1.62512532E12, 2445206.45], [1.62512544E12, 6870587.483333333], [1.62512526E12, 137211.21666666667], [1.62512538E12, 1.286216195E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.62512532E12, 379521.65], [1.62512544E12, 1067000.7833333334], [1.62512526E12, 20032.116666666665], [1.62512538E12, 1997552.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512544E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12.531061197152772, "minX": 1.62512526E12, "maxY": 321.25850807837725, "series": [{"data": [[1.62512532E12, 134.3196799316355], [1.62512544E12, 12.531061197152772], [1.62512526E12, 293.9394993045894], [1.62512538E12, 28.26925091091499]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512532E12, 134.96349544662073], [1.62512544E12, 12.88966355114372], [1.62512526E12, 321.25850807837725], [1.62512538E12, 28.393765511544824]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512544E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 12.517838524584526, "minX": 1.62512526E12, "maxY": 321.22172567892727, "series": [{"data": [[1.62512532E12, 134.28693507351224], [1.62512544E12, 12.517838524584526], [1.62512526E12, 293.91446453407576], [1.62512538E12, 28.25065276077196]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512532E12, 134.9309823677566], [1.62512544E12, 12.876789584857667], [1.62512526E12, 321.22172567892727], [1.62512538E12, 28.374486021632876]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512544E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62512526E12, "maxY": 23.984874527329076, "series": [{"data": [[1.62512532E12, 0.0], [1.62512544E12, 0.0], [1.62512526E12, 0.0], [1.62512538E12, 0.01498399445337722]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.62512532E12, 0.1985274171672166], [1.62512544E12, 0.005929617715682079], [1.62512526E12, 23.984874527329076], [1.62512538E12, 0.01352293219357672]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512544E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.62512526E12, "maxY": 6881.0, "series": [{"data": [[1.62512532E12, 6881.0], [1.62512544E12, 2018.0], [1.62512526E12, 2488.0], [1.62512538E12, 2378.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.62512532E12, 103.0], [1.62512544E12, 9.0], [1.62512526E12, 696.0], [1.62512538E12, 43.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.62512532E12, 990.9800000000032], [1.62512544E12, 71.0], [1.62512526E12, 2027.380000000022], [1.62512538E12, 99.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.62512532E12, 278.0], [1.62512544E12, 11.0], [1.62512526E12, 955.2999999999911], [1.62512538E12, 68.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.62512532E12, 4.0], [1.62512544E12, 4.0], [1.62512526E12, 6.0], [1.62512538E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.62512532E12, 10.0], [1.62512544E12, 7.0], [1.62512526E12, 226.0], [1.62512538E12, 7.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512544E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 9.0, "maxY": 4777.0, "series": [{"data": [[9.0, 2141.0], [14.0, 3380.0], [15.0, 4777.0], [17.0, 1050.0], [8231.0, 9.0], [8447.0, 8.0], [9403.0, 8.0], [9399.0, 8.0], [9439.0, 7.0], [10179.0, 8.0], [10315.0, 8.0], [10715.0, 8.0], [11165.0, 7.0], [11315.0, 8.0], [11433.0, 8.0], [11365.0, 7.0], [12215.0, 7.0], [13153.0, 7.0], [13155.0, 7.0], [13375.0, 7.0], [13531.0, 7.0], [14045.0, 7.0], [13975.0, 7.0], [13919.0, 7.0], [14371.0, 7.0], [14469.0, 7.0], [14605.0, 7.0], [64.0, 596.5], [76.0, 1313.0], [78.0, 899.0], [79.0, 799.0], [93.0, 589.0], [108.0, 9.5], [113.0, 586.0], [118.0, 625.0], [150.0, 94.0], [177.0, 488.0], [200.0, 450.0], [209.0, 176.0], [212.0, 216.0], [218.0, 297.0], [229.0, 197.0], [235.0, 70.0], [236.0, 103.5], [237.0, 305.0], [276.0, 57.0], [302.0, 194.5], [305.0, 185.0], [309.0, 211.0], [307.0, 207.0], [304.0, 103.5], [322.0, 195.0], [344.0, 95.5], [362.0, 217.5], [361.0, 62.0], [352.0, 96.0], [381.0, 99.0], [374.0, 205.5], [444.0, 17.0], [485.0, 102.0], [619.0, 103.0], [669.0, 95.0], [724.0, 97.5], [727.0, 93.0], [759.0, 100.0], [842.0, 85.0], [844.0, 99.0], [943.0, 102.0], [1016.0, 113.0], [1051.0, 137.0], [1044.0, 85.0], [1092.0, 110.0], [1220.0, 62.0], [1308.0, 97.0], [1345.0, 64.0], [1483.0, 13.0], [1480.0, 18.5], [1541.0, 44.0], [1576.0, 12.0], [1548.0, 13.5], [1654.0, 53.0], [1704.0, 12.0], [1853.0, 13.0], [1840.0, 12.0], [1846.0, 17.0], [2006.0, 11.0], [2159.0, 13.0], [2067.0, 11.0], [2075.0, 11.0], [2193.0, 11.0], [2274.0, 11.0], [2323.0, 7.0], [2583.0, 11.0], [2775.0, 11.0], [2858.0, 10.0], [3017.0, 11.0], [3057.0, 10.0], [3420.0, 11.0], [3366.0, 10.0], [3610.0, 10.0], [3603.0, 10.0], [3690.0, 10.0], [3747.0, 10.0], [3882.0, 10.0], [3909.0, 10.0], [4187.0, 10.0], [4327.0, 10.0], [4347.0, 10.0], [4506.0, 8.0], [4536.0, 7.0], [4770.0, 10.0], [4740.0, 11.0], [4910.0, 8.0], [5221.0, 10.0], [5196.0, 7.0], [5238.0, 7.0], [5301.0, 8.0], [5621.0, 10.0], [5450.0, 10.0], [5534.0, 10.0], [5434.0, 11.0], [5585.0, 8.0], [5696.0, 10.0], [5704.0, 10.0], [5710.0, 10.0], [5807.0, 9.0], [5885.0, 10.0], [5792.0, 11.0], [6268.0, 10.0], [6166.0, 9.0], [6263.0, 8.0], [6169.0, 7.0], [6394.0, 7.0], [6508.0, 10.0], [6488.0, 10.0], [6512.0, 10.0], [6576.0, 11.0], [6592.0, 7.0], [6403.0, 7.0], [6486.0, 7.0], [6485.0, 7.0], [6616.0, 7.0], [6685.0, 10.0], [6799.0, 7.0], [6833.0, 7.0], [6777.0, 7.0], [6887.0, 7.0], [6963.0, 10.0], [7016.0, 10.0], [7057.0, 10.0], [7064.0, 7.0], [7142.0, 7.0], [7089.0, 7.0], [7035.0, 7.0], [6980.0, 7.0], [7006.0, 7.0], [7077.0, 7.0], [7330.0, 10.0], [7215.0, 7.0], [7238.0, 7.0], [7262.0, 7.0], [7208.0, 7.0], [7617.0, 9.0], [8280.0, 9.0], [8244.0, 9.0], [8578.0, 8.0], [8842.0, 8.0], [9092.0, 8.0], [9308.0, 8.0], [9364.0, 8.0], [10010.0, 7.0], [10700.0, 8.0], [11288.0, 8.0], [11870.0, 8.0], [11980.0, 7.0], [12664.0, 7.0], [12992.0, 7.0], [12856.0, 7.0], [13404.0, 7.0], [13920.0, 7.0], [14314.0, 7.0], [14928.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14928.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 9.0, "maxY": 4777.0, "series": [{"data": [[9.0, 2141.0], [14.0, 3380.0], [15.0, 4777.0], [17.0, 1050.0], [8231.0, 9.0], [8447.0, 8.0], [9403.0, 8.0], [9399.0, 8.0], [9439.0, 7.0], [10179.0, 8.0], [10315.0, 8.0], [10715.0, 8.0], [11165.0, 7.0], [11315.0, 8.0], [11433.0, 8.0], [11365.0, 7.0], [12215.0, 7.0], [13153.0, 7.0], [13155.0, 7.0], [13375.0, 7.0], [13531.0, 7.0], [14045.0, 7.0], [13975.0, 7.0], [13919.0, 7.0], [14371.0, 7.0], [14469.0, 7.0], [14605.0, 7.0], [64.0, 596.5], [76.0, 1313.0], [78.0, 899.0], [79.0, 799.0], [93.0, 589.0], [108.0, 9.5], [113.0, 586.0], [118.0, 625.0], [150.0, 94.0], [177.0, 488.0], [200.0, 450.0], [209.0, 176.0], [212.0, 216.0], [218.0, 297.0], [229.0, 197.0], [235.0, 70.0], [236.0, 103.5], [237.0, 305.0], [276.0, 57.0], [302.0, 194.5], [305.0, 185.0], [309.0, 211.0], [307.0, 207.0], [304.0, 103.5], [322.0, 195.0], [344.0, 95.0], [362.0, 217.5], [361.0, 62.0], [352.0, 96.0], [381.0, 99.0], [374.0, 205.5], [444.0, 17.0], [485.0, 102.0], [619.0, 103.0], [669.0, 95.0], [724.0, 97.5], [727.0, 93.0], [759.0, 100.0], [842.0, 85.0], [844.0, 99.0], [943.0, 102.0], [1016.0, 113.0], [1051.0, 137.0], [1044.0, 85.0], [1092.0, 110.0], [1220.0, 62.0], [1308.0, 97.0], [1345.0, 64.0], [1483.0, 13.0], [1480.0, 18.5], [1541.0, 44.0], [1576.0, 12.0], [1548.0, 13.5], [1654.0, 53.0], [1704.0, 12.0], [1853.0, 13.0], [1840.0, 12.0], [1846.0, 17.0], [2006.0, 11.0], [2159.0, 13.0], [2067.0, 11.0], [2075.0, 11.0], [2193.0, 10.0], [2274.0, 11.0], [2323.0, 7.0], [2583.0, 11.0], [2775.0, 11.0], [2858.0, 10.0], [3017.0, 11.0], [3057.0, 10.0], [3420.0, 11.0], [3366.0, 10.0], [3610.0, 10.0], [3603.0, 10.0], [3690.0, 10.0], [3747.0, 10.0], [3882.0, 10.0], [3909.0, 10.0], [4187.0, 10.0], [4327.0, 10.0], [4347.0, 10.0], [4506.0, 8.0], [4536.0, 7.0], [4770.0, 10.0], [4740.0, 11.0], [4910.0, 8.0], [5221.0, 10.0], [5196.0, 7.0], [5238.0, 7.0], [5301.0, 8.0], [5621.0, 10.0], [5450.0, 10.0], [5534.0, 10.0], [5434.0, 11.0], [5585.0, 7.0], [5696.0, 10.0], [5704.0, 10.0], [5710.0, 10.0], [5807.0, 9.0], [5885.0, 10.0], [5792.0, 11.0], [6268.0, 10.0], [6166.0, 9.0], [6263.0, 7.0], [6169.0, 7.0], [6394.0, 7.0], [6508.0, 10.0], [6488.0, 10.0], [6512.0, 10.0], [6576.0, 11.0], [6592.0, 7.0], [6403.0, 7.0], [6486.0, 7.0], [6485.0, 7.0], [6616.0, 7.0], [6685.0, 10.0], [6799.0, 7.0], [6833.0, 7.0], [6777.0, 7.0], [6887.0, 7.0], [6963.0, 10.0], [7016.0, 9.5], [7057.0, 10.0], [7064.0, 7.0], [7142.0, 7.0], [7089.0, 7.0], [7035.0, 7.0], [6980.0, 7.0], [7006.0, 7.0], [7077.0, 7.0], [7330.0, 10.0], [7215.0, 7.0], [7238.0, 7.0], [7262.0, 7.0], [7208.0, 7.0], [7617.0, 9.0], [8280.0, 9.0], [8244.0, 9.0], [8578.0, 8.0], [8842.0, 8.0], [9092.0, 8.0], [9308.0, 8.0], [9364.0, 8.0], [10010.0, 7.0], [10700.0, 8.0], [11288.0, 8.0], [11870.0, 8.0], [11980.0, 7.0], [12664.0, 7.0], [12992.0, 7.0], [12856.0, 7.0], [13404.0, 7.0], [13920.0, 7.0], [14314.0, 7.0], [14928.0, 7.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 14928.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 97.48333333333333, "minX": 1.62512526E12, "maxY": 9038.733333333334, "series": [{"data": [[1.62512532E12, 1721.5166666666667], [1.62512544E12, 4823.966666666666], [1.62512526E12, 97.48333333333333], [1.62512538E12, 9038.733333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512544E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 96.41666666666667, "minX": 1.62512526E12, "maxY": 9038.75, "series": [{"data": [[1.62512532E12, 1718.3166666666666], [1.62512544E12, 4828.216666666666], [1.62512526E12, 96.41666666666667], [1.62512538E12, 9038.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.62512544E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 47.93333333333333, "minX": 1.62512526E12, "maxY": 4519.483333333334, "series": [{"data": [[1.62512532E12, 860.1666666666666], [1.62512544E12, 2414.4333333333334], [1.62512526E12, 48.483333333333334], [1.62512538E12, 4519.483333333334]], "isOverall": false, "label": "Get_Request-success", "isController": false}, {"data": [[1.62512532E12, 858.15], [1.62512544E12, 2413.7833333333333], [1.62512526E12, 47.93333333333333], [1.62512538E12, 4519.266666666666]], "isOverall": false, "label": "Post_Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512544E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 96.41666666666667, "minX": 1.62512526E12, "maxY": 9038.75, "series": [{"data": [[1.62512532E12, 1718.3166666666666], [1.62512544E12, 4828.216666666666], [1.62512526E12, 96.41666666666667], [1.62512538E12, 9038.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.62512544E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

