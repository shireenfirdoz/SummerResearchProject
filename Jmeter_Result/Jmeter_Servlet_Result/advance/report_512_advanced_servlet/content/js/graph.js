/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 7297.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 4.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 5.0], [3.6, 5.0], [3.7, 5.0], [3.8, 5.0], [3.9, 5.0], [4.0, 5.0], [4.1, 5.0], [4.2, 5.0], [4.3, 5.0], [4.4, 5.0], [4.5, 5.0], [4.6, 5.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 7.0], [31.2, 7.0], [31.3, 7.0], [31.4, 7.0], [31.5, 7.0], [31.6, 7.0], [31.7, 7.0], [31.8, 7.0], [31.9, 7.0], [32.0, 7.0], [32.1, 7.0], [32.2, 7.0], [32.3, 7.0], [32.4, 7.0], [32.5, 7.0], [32.6, 7.0], [32.7, 7.0], [32.8, 7.0], [32.9, 7.0], [33.0, 7.0], [33.1, 7.0], [33.2, 7.0], [33.3, 7.0], [33.4, 7.0], [33.5, 7.0], [33.6, 7.0], [33.7, 7.0], [33.8, 7.0], [33.9, 7.0], [34.0, 7.0], [34.1, 7.0], [34.2, 7.0], [34.3, 7.0], [34.4, 7.0], [34.5, 7.0], [34.6, 7.0], [34.7, 7.0], [34.8, 7.0], [34.9, 8.0], [35.0, 8.0], [35.1, 8.0], [35.2, 8.0], [35.3, 8.0], [35.4, 8.0], [35.5, 8.0], [35.6, 8.0], [35.7, 8.0], [35.8, 8.0], [35.9, 8.0], [36.0, 8.0], [36.1, 8.0], [36.2, 8.0], [36.3, 8.0], [36.4, 8.0], [36.5, 8.0], [36.6, 8.0], [36.7, 8.0], [36.8, 8.0], [36.9, 8.0], [37.0, 8.0], [37.1, 8.0], [37.2, 8.0], [37.3, 8.0], [37.4, 8.0], [37.5, 8.0], [37.6, 8.0], [37.7, 8.0], [37.8, 8.0], [37.9, 8.0], [38.0, 8.0], [38.1, 8.0], [38.2, 8.0], [38.3, 8.0], [38.4, 8.0], [38.5, 8.0], [38.6, 8.0], [38.7, 8.0], [38.8, 8.0], [38.9, 8.0], [39.0, 8.0], [39.1, 8.0], [39.2, 8.0], [39.3, 8.0], [39.4, 8.0], [39.5, 8.0], [39.6, 8.0], [39.7, 8.0], [39.8, 8.0], [39.9, 8.0], [40.0, 8.0], [40.1, 8.0], [40.2, 8.0], [40.3, 8.0], [40.4, 8.0], [40.5, 8.0], [40.6, 8.0], [40.7, 8.0], [40.8, 8.0], [40.9, 8.0], [41.0, 8.0], [41.1, 8.0], [41.2, 8.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 8.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 8.0], [47.0, 8.0], [47.1, 8.0], [47.2, 8.0], [47.3, 8.0], [47.4, 8.0], [47.5, 8.0], [47.6, 8.0], [47.7, 8.0], [47.8, 8.0], [47.9, 8.0], [48.0, 8.0], [48.1, 8.0], [48.2, 8.0], [48.3, 8.0], [48.4, 8.0], [48.5, 8.0], [48.6, 8.0], [48.7, 8.0], [48.8, 9.0], [48.9, 9.0], [49.0, 9.0], [49.1, 9.0], [49.2, 9.0], [49.3, 9.0], [49.4, 9.0], [49.5, 9.0], [49.6, 9.0], [49.7, 9.0], [49.8, 9.0], [49.9, 9.0], [50.0, 9.0], [50.1, 9.0], [50.2, 9.0], [50.3, 9.0], [50.4, 9.0], [50.5, 9.0], [50.6, 9.0], [50.7, 9.0], [50.8, 9.0], [50.9, 9.0], [51.0, 9.0], [51.1, 9.0], [51.2, 9.0], [51.3, 9.0], [51.4, 9.0], [51.5, 9.0], [51.6, 9.0], [51.7, 9.0], [51.8, 9.0], [51.9, 9.0], [52.0, 9.0], [52.1, 9.0], [52.2, 9.0], [52.3, 9.0], [52.4, 9.0], [52.5, 9.0], [52.6, 9.0], [52.7, 9.0], [52.8, 9.0], [52.9, 9.0], [53.0, 9.0], [53.1, 9.0], [53.2, 9.0], [53.3, 9.0], [53.4, 9.0], [53.5, 9.0], [53.6, 9.0], [53.7, 9.0], [53.8, 9.0], [53.9, 9.0], [54.0, 9.0], [54.1, 9.0], [54.2, 9.0], [54.3, 9.0], [54.4, 9.0], [54.5, 9.0], [54.6, 9.0], [54.7, 9.0], [54.8, 9.0], [54.9, 9.0], [55.0, 9.0], [55.1, 9.0], [55.2, 9.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 9.0], [57.6, 9.0], [57.7, 9.0], [57.8, 9.0], [57.9, 9.0], [58.0, 9.0], [58.1, 9.0], [58.2, 9.0], [58.3, 9.0], [58.4, 9.0], [58.5, 9.0], [58.6, 9.0], [58.7, 9.0], [58.8, 10.0], [58.9, 10.0], [59.0, 10.0], [59.1, 10.0], [59.2, 10.0], [59.3, 10.0], [59.4, 10.0], [59.5, 10.0], [59.6, 10.0], [59.7, 10.0], [59.8, 10.0], [59.9, 10.0], [60.0, 10.0], [60.1, 10.0], [60.2, 10.0], [60.3, 10.0], [60.4, 10.0], [60.5, 10.0], [60.6, 10.0], [60.7, 10.0], [60.8, 10.0], [60.9, 10.0], [61.0, 10.0], [61.1, 10.0], [61.2, 10.0], [61.3, 10.0], [61.4, 10.0], [61.5, 10.0], [61.6, 10.0], [61.7, 10.0], [61.8, 10.0], [61.9, 10.0], [62.0, 10.0], [62.1, 10.0], [62.2, 10.0], [62.3, 10.0], [62.4, 10.0], [62.5, 10.0], [62.6, 10.0], [62.7, 10.0], [62.8, 10.0], [62.9, 10.0], [63.0, 10.0], [63.1, 10.0], [63.2, 10.0], [63.3, 10.0], [63.4, 10.0], [63.5, 10.0], [63.6, 10.0], [63.7, 10.0], [63.8, 10.0], [63.9, 10.0], [64.0, 10.0], [64.1, 10.0], [64.2, 10.0], [64.3, 10.0], [64.4, 10.0], [64.5, 10.0], [64.6, 10.0], [64.7, 10.0], [64.8, 10.0], [64.9, 10.0], [65.0, 10.0], [65.1, 10.0], [65.2, 10.0], [65.3, 10.0], [65.4, 11.0], [65.5, 11.0], [65.6, 11.0], [65.7, 11.0], [65.8, 11.0], [65.9, 11.0], [66.0, 11.0], [66.1, 11.0], [66.2, 11.0], [66.3, 11.0], [66.4, 11.0], [66.5, 11.0], [66.6, 11.0], [66.7, 11.0], [66.8, 11.0], [66.9, 11.0], [67.0, 11.0], [67.1, 11.0], [67.2, 11.0], [67.3, 11.0], [67.4, 11.0], [67.5, 11.0], [67.6, 11.0], [67.7, 11.0], [67.8, 11.0], [67.9, 11.0], [68.0, 11.0], [68.1, 11.0], [68.2, 11.0], [68.3, 11.0], [68.4, 11.0], [68.5, 11.0], [68.6, 11.0], [68.7, 11.0], [68.8, 11.0], [68.9, 11.0], [69.0, 11.0], [69.1, 11.0], [69.2, 11.0], [69.3, 12.0], [69.4, 12.0], [69.5, 12.0], [69.6, 12.0], [69.7, 12.0], [69.8, 12.0], [69.9, 12.0], [70.0, 12.0], [70.1, 12.0], [70.2, 12.0], [70.3, 12.0], [70.4, 12.0], [70.5, 12.0], [70.6, 12.0], [70.7, 12.0], [70.8, 12.0], [70.9, 12.0], [71.0, 12.0], [71.1, 12.0], [71.2, 12.0], [71.3, 12.0], [71.4, 13.0], [71.5, 13.0], [71.6, 13.0], [71.7, 13.0], [71.8, 13.0], [71.9, 13.0], [72.0, 13.0], [72.1, 13.0], [72.2, 13.0], [72.3, 13.0], [72.4, 13.0], [72.5, 14.0], [72.6, 14.0], [72.7, 14.0], [72.8, 14.0], [72.9, 14.0], [73.0, 14.0], [73.1, 14.0], [73.2, 15.0], [73.3, 15.0], [73.4, 15.0], [73.5, 15.0], [73.6, 15.0], [73.7, 16.0], [73.8, 16.0], [73.9, 16.0], [74.0, 16.0], [74.1, 17.0], [74.2, 17.0], [74.3, 18.0], [74.4, 18.0], [74.5, 19.0], [74.6, 19.0], [74.7, 20.0], [74.8, 21.0], [74.9, 21.0], [75.0, 22.0], [75.1, 23.0], [75.2, 24.0], [75.3, 25.0], [75.4, 26.0], [75.5, 26.0], [75.6, 27.0], [75.7, 28.0], [75.8, 29.0], [75.9, 30.0], [76.0, 31.0], [76.1, 31.0], [76.2, 32.0], [76.3, 33.0], [76.4, 34.0], [76.5, 34.0], [76.6, 35.0], [76.7, 36.0], [76.8, 36.0], [76.9, 37.0], [77.0, 38.0], [77.1, 38.0], [77.2, 39.0], [77.3, 40.0], [77.4, 40.0], [77.5, 41.0], [77.6, 41.0], [77.7, 42.0], [77.8, 43.0], [77.9, 43.0], [78.0, 44.0], [78.1, 44.0], [78.2, 45.0], [78.3, 45.0], [78.4, 46.0], [78.5, 46.0], [78.6, 47.0], [78.7, 47.0], [78.8, 48.0], [78.9, 48.0], [79.0, 49.0], [79.1, 49.0], [79.2, 50.0], [79.3, 50.0], [79.4, 51.0], [79.5, 51.0], [79.6, 51.0], [79.7, 52.0], [79.8, 52.0], [79.9, 53.0], [80.0, 53.0], [80.1, 54.0], [80.2, 54.0], [80.3, 55.0], [80.4, 55.0], [80.5, 55.0], [80.6, 56.0], [80.7, 56.0], [80.8, 57.0], [80.9, 57.0], [81.0, 57.0], [81.1, 58.0], [81.2, 58.0], [81.3, 59.0], [81.4, 59.0], [81.5, 59.0], [81.6, 60.0], [81.7, 60.0], [81.8, 61.0], [81.9, 61.0], [82.0, 62.0], [82.1, 62.0], [82.2, 62.0], [82.3, 63.0], [82.4, 63.0], [82.5, 63.0], [82.6, 64.0], [82.7, 64.0], [82.8, 65.0], [82.9, 65.0], [83.0, 65.0], [83.1, 66.0], [83.2, 66.0], [83.3, 66.0], [83.4, 67.0], [83.5, 67.0], [83.6, 67.0], [83.7, 68.0], [83.8, 68.0], [83.9, 68.0], [84.0, 69.0], [84.1, 69.0], [84.2, 69.0], [84.3, 70.0], [84.4, 70.0], [84.5, 70.0], [84.6, 71.0], [84.7, 71.0], [84.8, 71.0], [84.9, 71.0], [85.0, 72.0], [85.1, 72.0], [85.2, 72.0], [85.3, 73.0], [85.4, 73.0], [85.5, 73.0], [85.6, 74.0], [85.7, 74.0], [85.8, 74.0], [85.9, 74.0], [86.0, 75.0], [86.1, 75.0], [86.2, 75.0], [86.3, 75.0], [86.4, 76.0], [86.5, 76.0], [86.6, 76.0], [86.7, 76.0], [86.8, 77.0], [86.9, 77.0], [87.0, 77.0], [87.1, 78.0], [87.2, 78.0], [87.3, 78.0], [87.4, 78.0], [87.5, 79.0], [87.6, 79.0], [87.7, 79.0], [87.8, 79.0], [87.9, 80.0], [88.0, 80.0], [88.1, 80.0], [88.2, 80.0], [88.3, 81.0], [88.4, 81.0], [88.5, 81.0], [88.6, 81.0], [88.7, 82.0], [88.8, 82.0], [88.9, 82.0], [89.0, 83.0], [89.1, 83.0], [89.2, 83.0], [89.3, 83.0], [89.4, 84.0], [89.5, 84.0], [89.6, 84.0], [89.7, 85.0], [89.8, 85.0], [89.9, 85.0], [90.0, 86.0], [90.1, 86.0], [90.2, 86.0], [90.3, 86.0], [90.4, 87.0], [90.5, 87.0], [90.6, 87.0], [90.7, 88.0], [90.8, 88.0], [90.9, 88.0], [91.0, 89.0], [91.1, 89.0], [91.2, 89.0], [91.3, 90.0], [91.4, 90.0], [91.5, 90.0], [91.6, 91.0], [91.7, 91.0], [91.8, 91.0], [91.9, 92.0], [92.0, 92.0], [92.1, 92.0], [92.2, 93.0], [92.3, 93.0], [92.4, 93.0], [92.5, 94.0], [92.6, 94.0], [92.7, 94.0], [92.8, 95.0], [92.9, 95.0], [93.0, 95.0], [93.1, 96.0], [93.2, 96.0], [93.3, 97.0], [93.4, 97.0], [93.5, 97.0], [93.6, 98.0], [93.7, 98.0], [93.8, 99.0], [93.9, 99.0], [94.0, 99.0], [94.1, 100.0], [94.2, 100.0], [94.3, 101.0], [94.4, 102.0], [94.5, 102.0], [94.6, 103.0], [94.7, 104.0], [94.8, 106.0], [94.9, 108.0], [95.0, 112.0], [95.1, 116.0], [95.2, 122.0], [95.3, 128.0], [95.4, 134.0], [95.5, 141.0], [95.6, 147.0], [95.7, 154.0], [95.8, 161.0], [95.9, 168.0], [96.0, 173.0], [96.1, 178.0], [96.2, 182.0], [96.3, 186.0], [96.4, 190.0], [96.5, 192.0], [96.6, 195.0], [96.7, 197.0], [96.8, 199.0], [96.9, 202.0], [97.0, 205.0], [97.1, 211.0], [97.2, 218.0], [97.3, 234.0], [97.4, 254.0], [97.5, 269.0], [97.6, 279.0], [97.7, 287.0], [97.8, 294.0], [97.9, 300.0], [98.0, 310.0], [98.1, 339.0], [98.2, 371.0], [98.3, 387.0], [98.4, 400.0], [98.5, 434.0], [98.6, 477.0], [98.7, 498.0], [98.8, 550.0], [98.9, 591.0], [99.0, 639.0], [99.1, 690.0], [99.2, 758.0], [99.3, 807.0], [99.4, 892.0], [99.5, 995.0], [99.6, 1147.0], [99.7, 1319.0], [99.8, 1501.0], [99.9, 1787.0], [100.0, 7297.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 4.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 5.0], [3.2, 5.0], [3.3, 5.0], [3.4, 5.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 6.0], [11.0, 6.0], [11.1, 6.0], [11.2, 6.0], [11.3, 6.0], [11.4, 6.0], [11.5, 6.0], [11.6, 6.0], [11.7, 6.0], [11.8, 6.0], [11.9, 6.0], [12.0, 6.0], [12.1, 6.0], [12.2, 6.0], [12.3, 6.0], [12.4, 6.0], [12.5, 6.0], [12.6, 6.0], [12.7, 6.0], [12.8, 6.0], [12.9, 6.0], [13.0, 6.0], [13.1, 6.0], [13.2, 6.0], [13.3, 6.0], [13.4, 6.0], [13.5, 6.0], [13.6, 6.0], [13.7, 6.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 7.0], [19.9, 7.0], [20.0, 7.0], [20.1, 7.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 7.0], [27.2, 7.0], [27.3, 7.0], [27.4, 7.0], [27.5, 7.0], [27.6, 7.0], [27.7, 7.0], [27.8, 7.0], [27.9, 7.0], [28.0, 7.0], [28.1, 7.0], [28.2, 7.0], [28.3, 7.0], [28.4, 7.0], [28.5, 7.0], [28.6, 7.0], [28.7, 7.0], [28.8, 7.0], [28.9, 7.0], [29.0, 7.0], [29.1, 7.0], [29.2, 7.0], [29.3, 7.0], [29.4, 7.0], [29.5, 7.0], [29.6, 7.0], [29.7, 7.0], [29.8, 7.0], [29.9, 7.0], [30.0, 7.0], [30.1, 7.0], [30.2, 7.0], [30.3, 7.0], [30.4, 7.0], [30.5, 7.0], [30.6, 7.0], [30.7, 7.0], [30.8, 7.0], [30.9, 7.0], [31.0, 7.0], [31.1, 7.0], [31.2, 7.0], [31.3, 7.0], [31.4, 7.0], [31.5, 7.0], [31.6, 7.0], [31.7, 7.0], [31.8, 7.0], [31.9, 7.0], [32.0, 7.0], [32.1, 7.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 8.0], [33.0, 8.0], [33.1, 8.0], [33.2, 8.0], [33.3, 8.0], [33.4, 8.0], [33.5, 8.0], [33.6, 8.0], [33.7, 8.0], [33.8, 8.0], [33.9, 8.0], [34.0, 8.0], [34.1, 8.0], [34.2, 8.0], [34.3, 8.0], [34.4, 8.0], [34.5, 8.0], [34.6, 8.0], [34.7, 8.0], [34.8, 8.0], [34.9, 8.0], [35.0, 8.0], [35.1, 8.0], [35.2, 8.0], [35.3, 8.0], [35.4, 8.0], [35.5, 8.0], [35.6, 8.0], [35.7, 8.0], [35.8, 8.0], [35.9, 8.0], [36.0, 8.0], [36.1, 8.0], [36.2, 8.0], [36.3, 8.0], [36.4, 8.0], [36.5, 8.0], [36.6, 8.0], [36.7, 8.0], [36.8, 8.0], [36.9, 8.0], [37.0, 8.0], [37.1, 8.0], [37.2, 8.0], [37.3, 8.0], [37.4, 8.0], [37.5, 8.0], [37.6, 8.0], [37.7, 8.0], [37.8, 8.0], [37.9, 8.0], [38.0, 8.0], [38.1, 8.0], [38.2, 8.0], [38.3, 8.0], [38.4, 8.0], [38.5, 8.0], [38.6, 8.0], [38.7, 8.0], [38.8, 8.0], [38.9, 8.0], [39.0, 8.0], [39.1, 8.0], [39.2, 8.0], [39.3, 8.0], [39.4, 8.0], [39.5, 8.0], [39.6, 8.0], [39.7, 8.0], [39.8, 8.0], [39.9, 8.0], [40.0, 8.0], [40.1, 8.0], [40.2, 8.0], [40.3, 8.0], [40.4, 8.0], [40.5, 8.0], [40.6, 8.0], [40.7, 8.0], [40.8, 8.0], [40.9, 8.0], [41.0, 8.0], [41.1, 8.0], [41.2, 8.0], [41.3, 8.0], [41.4, 8.0], [41.5, 8.0], [41.6, 8.0], [41.7, 8.0], [41.8, 8.0], [41.9, 8.0], [42.0, 8.0], [42.1, 8.0], [42.2, 8.0], [42.3, 8.0], [42.4, 8.0], [42.5, 8.0], [42.6, 8.0], [42.7, 8.0], [42.8, 8.0], [42.9, 8.0], [43.0, 8.0], [43.1, 8.0], [43.2, 8.0], [43.3, 8.0], [43.4, 8.0], [43.5, 8.0], [43.6, 8.0], [43.7, 8.0], [43.8, 8.0], [43.9, 8.0], [44.0, 8.0], [44.1, 8.0], [44.2, 8.0], [44.3, 8.0], [44.4, 8.0], [44.5, 8.0], [44.6, 8.0], [44.7, 8.0], [44.8, 8.0], [44.9, 8.0], [45.0, 8.0], [45.1, 8.0], [45.2, 8.0], [45.3, 8.0], [45.4, 8.0], [45.5, 8.0], [45.6, 8.0], [45.7, 8.0], [45.8, 8.0], [45.9, 8.0], [46.0, 8.0], [46.1, 8.0], [46.2, 8.0], [46.3, 8.0], [46.4, 8.0], [46.5, 8.0], [46.6, 8.0], [46.7, 8.0], [46.8, 8.0], [46.9, 9.0], [47.0, 9.0], [47.1, 9.0], [47.2, 9.0], [47.3, 9.0], [47.4, 9.0], [47.5, 9.0], [47.6, 9.0], [47.7, 9.0], [47.8, 9.0], [47.9, 9.0], [48.0, 9.0], [48.1, 9.0], [48.2, 9.0], [48.3, 9.0], [48.4, 9.0], [48.5, 9.0], [48.6, 9.0], [48.7, 9.0], [48.8, 9.0], [48.9, 9.0], [49.0, 9.0], [49.1, 9.0], [49.2, 9.0], [49.3, 9.0], [49.4, 9.0], [49.5, 9.0], [49.6, 9.0], [49.7, 9.0], [49.8, 9.0], [49.9, 9.0], [50.0, 9.0], [50.1, 9.0], [50.2, 9.0], [50.3, 9.0], [50.4, 9.0], [50.5, 9.0], [50.6, 9.0], [50.7, 9.0], [50.8, 9.0], [50.9, 9.0], [51.0, 9.0], [51.1, 9.0], [51.2, 9.0], [51.3, 9.0], [51.4, 9.0], [51.5, 9.0], [51.6, 9.0], [51.7, 9.0], [51.8, 9.0], [51.9, 9.0], [52.0, 9.0], [52.1, 9.0], [52.2, 9.0], [52.3, 9.0], [52.4, 9.0], [52.5, 9.0], [52.6, 9.0], [52.7, 9.0], [52.8, 9.0], [52.9, 9.0], [53.0, 9.0], [53.1, 9.0], [53.2, 9.0], [53.3, 9.0], [53.4, 9.0], [53.5, 9.0], [53.6, 9.0], [53.7, 9.0], [53.8, 9.0], [53.9, 9.0], [54.0, 9.0], [54.1, 9.0], [54.2, 9.0], [54.3, 9.0], [54.4, 9.0], [54.5, 9.0], [54.6, 9.0], [54.7, 9.0], [54.8, 9.0], [54.9, 9.0], [55.0, 9.0], [55.1, 9.0], [55.2, 9.0], [55.3, 9.0], [55.4, 9.0], [55.5, 9.0], [55.6, 9.0], [55.7, 9.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 9.0], [56.5, 9.0], [56.6, 9.0], [56.7, 9.0], [56.8, 9.0], [56.9, 9.0], [57.0, 9.0], [57.1, 9.0], [57.2, 9.0], [57.3, 9.0], [57.4, 9.0], [57.5, 10.0], [57.6, 10.0], [57.7, 10.0], [57.8, 10.0], [57.9, 10.0], [58.0, 10.0], [58.1, 10.0], [58.2, 10.0], [58.3, 10.0], [58.4, 10.0], [58.5, 10.0], [58.6, 10.0], [58.7, 10.0], [58.8, 10.0], [58.9, 10.0], [59.0, 10.0], [59.1, 10.0], [59.2, 10.0], [59.3, 10.0], [59.4, 10.0], [59.5, 10.0], [59.6, 10.0], [59.7, 10.0], [59.8, 10.0], [59.9, 10.0], [60.0, 10.0], [60.1, 10.0], [60.2, 10.0], [60.3, 10.0], [60.4, 10.0], [60.5, 10.0], [60.6, 10.0], [60.7, 10.0], [60.8, 10.0], [60.9, 10.0], [61.0, 10.0], [61.1, 10.0], [61.2, 10.0], [61.3, 10.0], [61.4, 10.0], [61.5, 10.0], [61.6, 10.0], [61.7, 10.0], [61.8, 10.0], [61.9, 10.0], [62.0, 10.0], [62.1, 10.0], [62.2, 10.0], [62.3, 10.0], [62.4, 10.0], [62.5, 10.0], [62.6, 10.0], [62.7, 10.0], [62.8, 10.0], [62.9, 10.0], [63.0, 10.0], [63.1, 10.0], [63.2, 10.0], [63.3, 10.0], [63.4, 10.0], [63.5, 10.0], [63.6, 10.0], [63.7, 10.0], [63.8, 10.0], [63.9, 10.0], [64.0, 10.0], [64.1, 10.0], [64.2, 10.0], [64.3, 10.0], [64.4, 10.0], [64.5, 10.0], [64.6, 10.0], [64.7, 11.0], [64.8, 11.0], [64.9, 11.0], [65.0, 11.0], [65.1, 11.0], [65.2, 11.0], [65.3, 11.0], [65.4, 11.0], [65.5, 11.0], [65.6, 11.0], [65.7, 11.0], [65.8, 11.0], [65.9, 11.0], [66.0, 11.0], [66.1, 11.0], [66.2, 11.0], [66.3, 11.0], [66.4, 11.0], [66.5, 11.0], [66.6, 11.0], [66.7, 11.0], [66.8, 11.0], [66.9, 11.0], [67.0, 11.0], [67.1, 11.0], [67.2, 11.0], [67.3, 11.0], [67.4, 11.0], [67.5, 11.0], [67.6, 11.0], [67.7, 11.0], [67.8, 11.0], [67.9, 11.0], [68.0, 11.0], [68.1, 11.0], [68.2, 11.0], [68.3, 11.0], [68.4, 11.0], [68.5, 11.0], [68.6, 11.0], [68.7, 11.0], [68.8, 11.0], [68.9, 12.0], [69.0, 12.0], [69.1, 12.0], [69.2, 12.0], [69.3, 12.0], [69.4, 12.0], [69.5, 12.0], [69.6, 12.0], [69.7, 12.0], [69.8, 12.0], [69.9, 12.0], [70.0, 12.0], [70.1, 12.0], [70.2, 12.0], [70.3, 12.0], [70.4, 12.0], [70.5, 12.0], [70.6, 12.0], [70.7, 12.0], [70.8, 12.0], [70.9, 12.0], [71.0, 12.0], [71.1, 12.0], [71.2, 13.0], [71.3, 13.0], [71.4, 13.0], [71.5, 13.0], [71.6, 13.0], [71.7, 13.0], [71.8, 13.0], [71.9, 13.0], [72.0, 13.0], [72.1, 13.0], [72.2, 13.0], [72.3, 13.0], [72.4, 14.0], [72.5, 14.0], [72.6, 14.0], [72.7, 14.0], [72.8, 14.0], [72.9, 14.0], [73.0, 14.0], [73.1, 14.0], [73.2, 15.0], [73.3, 15.0], [73.4, 15.0], [73.5, 15.0], [73.6, 15.0], [73.7, 16.0], [73.8, 16.0], [73.9, 16.0], [74.0, 17.0], [74.1, 17.0], [74.2, 17.0], [74.3, 18.0], [74.4, 18.0], [74.5, 19.0], [74.6, 19.0], [74.7, 20.0], [74.8, 20.0], [74.9, 21.0], [75.0, 22.0], [75.1, 23.0], [75.2, 24.0], [75.3, 24.0], [75.4, 25.0], [75.5, 26.0], [75.6, 27.0], [75.7, 28.0], [75.8, 29.0], [75.9, 30.0], [76.0, 31.0], [76.1, 31.0], [76.2, 32.0], [76.3, 33.0], [76.4, 34.0], [76.5, 34.0], [76.6, 35.0], [76.7, 36.0], [76.8, 37.0], [76.9, 37.0], [77.0, 38.0], [77.1, 39.0], [77.2, 39.0], [77.3, 40.0], [77.4, 40.0], [77.5, 41.0], [77.6, 42.0], [77.7, 42.0], [77.8, 43.0], [77.9, 43.0], [78.0, 44.0], [78.1, 44.0], [78.2, 45.0], [78.3, 45.0], [78.4, 46.0], [78.5, 46.0], [78.6, 47.0], [78.7, 47.0], [78.8, 48.0], [78.9, 48.0], [79.0, 49.0], [79.1, 49.0], [79.2, 50.0], [79.3, 50.0], [79.4, 51.0], [79.5, 51.0], [79.6, 52.0], [79.7, 52.0], [79.8, 53.0], [79.9, 53.0], [80.0, 53.0], [80.1, 54.0], [80.2, 54.0], [80.3, 55.0], [80.4, 55.0], [80.5, 56.0], [80.6, 56.0], [80.7, 56.0], [80.8, 57.0], [80.9, 57.0], [81.0, 58.0], [81.1, 58.0], [81.2, 58.0], [81.3, 59.0], [81.4, 59.0], [81.5, 60.0], [81.6, 60.0], [81.7, 60.0], [81.8, 61.0], [81.9, 61.0], [82.0, 62.0], [82.1, 62.0], [82.2, 62.0], [82.3, 63.0], [82.4, 63.0], [82.5, 64.0], [82.6, 64.0], [82.7, 64.0], [82.8, 65.0], [82.9, 65.0], [83.0, 65.0], [83.1, 66.0], [83.2, 66.0], [83.3, 67.0], [83.4, 67.0], [83.5, 67.0], [83.6, 68.0], [83.7, 68.0], [83.8, 68.0], [83.9, 69.0], [84.0, 69.0], [84.1, 69.0], [84.2, 70.0], [84.3, 70.0], [84.4, 70.0], [84.5, 70.0], [84.6, 71.0], [84.7, 71.0], [84.8, 71.0], [84.9, 72.0], [85.0, 72.0], [85.1, 72.0], [85.2, 72.0], [85.3, 73.0], [85.4, 73.0], [85.5, 73.0], [85.6, 74.0], [85.7, 74.0], [85.8, 74.0], [85.9, 74.0], [86.0, 75.0], [86.1, 75.0], [86.2, 75.0], [86.3, 75.0], [86.4, 76.0], [86.5, 76.0], [86.6, 76.0], [86.7, 77.0], [86.8, 77.0], [86.9, 77.0], [87.0, 77.0], [87.1, 78.0], [87.2, 78.0], [87.3, 78.0], [87.4, 78.0], [87.5, 79.0], [87.6, 79.0], [87.7, 79.0], [87.8, 79.0], [87.9, 80.0], [88.0, 80.0], [88.1, 80.0], [88.2, 80.0], [88.3, 81.0], [88.4, 81.0], [88.5, 81.0], [88.6, 81.0], [88.7, 82.0], [88.8, 82.0], [88.9, 82.0], [89.0, 83.0], [89.1, 83.0], [89.2, 83.0], [89.3, 84.0], [89.4, 84.0], [89.5, 84.0], [89.6, 84.0], [89.7, 85.0], [89.8, 85.0], [89.9, 85.0], [90.0, 86.0], [90.1, 86.0], [90.2, 86.0], [90.3, 87.0], [90.4, 87.0], [90.5, 87.0], [90.6, 88.0], [90.7, 88.0], [90.8, 88.0], [90.9, 89.0], [91.0, 89.0], [91.1, 89.0], [91.2, 90.0], [91.3, 90.0], [91.4, 90.0], [91.5, 91.0], [91.6, 91.0], [91.7, 91.0], [91.8, 92.0], [91.9, 92.0], [92.0, 92.0], [92.1, 93.0], [92.2, 93.0], [92.3, 93.0], [92.4, 94.0], [92.5, 94.0], [92.6, 94.0], [92.7, 95.0], [92.8, 95.0], [92.9, 95.0], [93.0, 96.0], [93.1, 96.0], [93.2, 96.0], [93.3, 97.0], [93.4, 97.0], [93.5, 98.0], [93.6, 98.0], [93.7, 98.0], [93.8, 99.0], [93.9, 99.0], [94.0, 100.0], [94.1, 100.0], [94.2, 101.0], [94.3, 101.0], [94.4, 102.0], [94.5, 103.0], [94.6, 104.0], [94.7, 105.0], [94.8, 106.0], [94.9, 109.0], [95.0, 112.0], [95.1, 117.0], [95.2, 122.0], [95.3, 129.0], [95.4, 135.0], [95.5, 141.0], [95.6, 148.0], [95.7, 155.0], [95.8, 163.0], [95.9, 169.0], [96.0, 174.0], [96.1, 179.0], [96.2, 184.0], [96.3, 187.0], [96.4, 190.0], [96.5, 193.0], [96.6, 196.0], [96.7, 198.0], [96.8, 200.0], [96.9, 203.0], [97.0, 207.0], [97.1, 213.0], [97.2, 221.0], [97.3, 238.0], [97.4, 256.0], [97.5, 271.0], [97.6, 279.0], [97.7, 286.0], [97.8, 293.0], [97.9, 299.0], [98.0, 309.0], [98.1, 336.0], [98.2, 368.0], [98.3, 385.0], [98.4, 399.0], [98.5, 426.0], [98.6, 473.0], [98.7, 494.0], [98.8, 536.0], [98.9, 587.0], [99.0, 639.0], [99.1, 692.0], [99.2, 763.0], [99.3, 814.0], [99.4, 899.0], [99.5, 1001.0], [99.6, 1131.0], [99.7, 1309.0], [99.8, 1515.0], [99.9, 1800.0], [100.0, 7097.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 725576.0, "series": [{"data": [[0.0, 725554.0], [600.0, 1501.0], [700.0, 1196.0], [800.0, 998.0], [900.0, 724.0], [1000.0, 548.0], [1100.0, 439.0], [1200.0, 411.0], [1300.0, 436.0], [1400.0, 416.0], [1500.0, 315.0], [1600.0, 294.0], [1700.0, 201.0], [1800.0, 150.0], [1900.0, 140.0], [2000.0, 87.0], [2100.0, 81.0], [2200.0, 51.0], [2300.0, 32.0], [2400.0, 30.0], [2500.0, 6.0], [2600.0, 14.0], [2800.0, 5.0], [2700.0, 9.0], [2900.0, 7.0], [3000.0, 3.0], [3100.0, 5.0], [3300.0, 2.0], [3400.0, 2.0], [3500.0, 1.0], [3700.0, 1.0], [3600.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 6.0], [4200.0, 6.0], [4100.0, 3.0], [4300.0, 3.0], [4500.0, 6.0], [4400.0, 3.0], [4600.0, 2.0], [4700.0, 3.0], [4800.0, 4.0], [5000.0, 8.0], [4900.0, 3.0], [5100.0, 8.0], [5300.0, 5.0], [5200.0, 4.0], [5400.0, 5.0], [5500.0, 6.0], [5600.0, 2.0], [5700.0, 6.0], [5800.0, 4.0], [5900.0, 6.0], [6000.0, 4.0], [6100.0, 4.0], [6200.0, 3.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 2.0], [6900.0, 2.0], [7000.0, 1.0], [7200.0, 1.0], [100.0, 21520.0], [200.0, 8365.0], [300.0, 3883.0], [400.0, 2445.0], [500.0, 1733.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[0.0, 725576.0], [600.0, 1398.0], [700.0, 1182.0], [800.0, 966.0], [900.0, 757.0], [1000.0, 630.0], [1100.0, 482.0], [1200.0, 406.0], [1300.0, 380.0], [1400.0, 382.0], [1500.0, 296.0], [1600.0, 289.0], [1700.0, 235.0], [1800.0, 192.0], [1900.0, 137.0], [2000.0, 87.0], [2100.0, 94.0], [2200.0, 42.0], [2300.0, 20.0], [2400.0, 30.0], [2500.0, 15.0], [2600.0, 15.0], [2700.0, 12.0], [2800.0, 12.0], [2900.0, 2.0], [3000.0, 8.0], [3100.0, 2.0], [3300.0, 4.0], [3200.0, 1.0], [3400.0, 3.0], [3600.0, 7.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 2.0], [4200.0, 3.0], [4300.0, 1.0], [4100.0, 2.0], [4400.0, 3.0], [4500.0, 4.0], [4600.0, 2.0], [4700.0, 5.0], [4800.0, 1.0], [5000.0, 3.0], [5100.0, 6.0], [4900.0, 3.0], [5200.0, 4.0], [5300.0, 3.0], [5400.0, 4.0], [5500.0, 3.0], [5600.0, 3.0], [5800.0, 4.0], [5700.0, 3.0], [5900.0, 11.0], [6000.0, 3.0], [6100.0, 4.0], [6200.0, 1.0], [6300.0, 3.0], [6400.0, 2.0], [6900.0, 2.0], [7000.0, 3.0], [100.0, 21458.0], [200.0, 8800.0], [300.0, 3892.0], [400.0, 2452.0], [500.0, 1672.0]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3138.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1524015.0, "series": [{"data": [[0.0, 1524015.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 16596.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3138.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 63.69200688252774, "minX": 1.62512562E12, "maxY": 512.0, "series": [{"data": [[1.62512562E12, 64.0], [1.62512568E12, 63.69200688252774]], "isOverall": false, "label": "warm_up", "isController": false}, {"data": [[1.6251258E12, 63.95249625985235]], "isOverall": false, "label": "cool_down_phase", "isController": false}, {"data": [[1.6251258E12, 501.92598810144415], [1.62512574E12, 512.0], [1.62512568E12, 509.04801194912983]], "isOverall": false, "label": "peak_phase", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6251258E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 4091.0, "series": [{"data": [[2.0, 2158.0], [3.0, 914.0], [4.0, 865.0], [5.0, 710.75], [6.0, 9.333333333333334], [7.0, 3062.5], [8.0, 7.0], [9.0, 810.5], [10.0, 546.8571428571428], [11.0, 7.5], [12.0, 53.4], [13.0, 33.84615384615385], [14.0, 708.6666666666669], [15.0, 7.0], [16.0, 7.666666666666667], [17.0, 9.0], [18.0, 7.0], [19.0, 2758.0], [20.0, 1230.3333333333333], [21.0, 8.5], [22.0, 9.0], [23.0, 1291.3333333333335], [24.0, 11.666666666666666], [26.0, 4091.0], [27.0, 740.75], [28.0, 9.0], [29.0, 766.0], [30.0, 1248.0], [33.0, 797.8], [32.0, 2880.0], [34.0, 1366.5], [35.0, 7.0], [36.0, 7.75], [37.0, 10.833333333333332], [39.0, 44.58333333333333], [38.0, 1310.0], [41.0, 178.0], [40.0, 279.0], [42.0, 518.0], [43.0, 8.5], [44.0, 413.0], [47.0, 798.5999999999999], [46.0, 11.411764705882355], [48.0, 7.857142857142857], [51.0, 8.8], [50.0, 6.666666666666666], [52.0, 56.33333333333332], [53.0, 9.740740740740744], [55.0, 8.000000000000002], [54.0, 7.5], [56.0, 22.2], [57.0, 9.148148148148145], [59.0, 32.5], [61.0, 9.0], [60.0, 243.33333333333334], [62.0, 10.037037037037036], [63.0, 37.44444444444444], [64.0, 16.994508394839677], [65.0, 10.666666666666666], [67.0, 1309.0], [66.0, 42.5], [70.0, 32.133333333333326], [69.0, 8.25], [68.0, 339.0], [72.0, 24.166666666666664], [73.0, 8.999999999999998], [74.0, 22.8], [75.0, 9.142857142857142], [76.0, 25.416666666666675], [77.0, 18.9375], [78.0, 9.333333333333334], [79.0, 39.5], [80.0, 12.6], [82.0, 291.4], [83.0, 12.25], [85.0, 11.2], [87.0, 84.57142857142857], [86.0, 130.1], [84.0, 56.57142857142858], [89.0, 11.5], [90.0, 63.666666666666664], [88.0, 300.0], [95.0, 112.23076923076923], [94.0, 85.0], [93.0, 19.5], [92.0, 95.5], [98.0, 187.5], [96.0, 44.0], [100.0, 60.0], [103.0, 28.36065573770493], [102.0, 20.0], [106.0, 27.312499999999993], [105.0, 47.5], [104.0, 19.25], [109.0, 39.5], [110.0, 35.0], [113.0, 33.5], [114.0, 16.142857142857142], [115.0, 10.75], [112.0, 28.0], [116.0, 18.6], [117.0, 12.0], [118.0, 24.6], [120.0, 14.666666666666666], [121.0, 20.0], [123.0, 8.25], [122.0, 11.0], [125.0, 9.75], [126.0, 23.0], [127.0, 8.0], [124.0, 8.5], [128.0, 14.666666666666666], [130.0, 8.5], [135.0, 7.5], [134.0, 7.5], [143.0, 33.333333333333336], [142.0, 8.0], [141.0, 8.0], [140.0, 8.5], [139.0, 273.0], [138.0, 8.5], [136.0, 8.0], [151.0, 17.0], [150.0, 8.636363636363635], [149.0, 10.0], [148.0, 6.0], [147.0, 8.2], [146.0, 109.0], [145.0, 11.0], [157.0, 28.555555555555557], [159.0, 132.0], [158.0, 8.8], [156.0, 7.0], [153.0, 9.333333333333332], [152.0, 8.0], [165.0, 40.0], [166.0, 7.0], [164.0, 8.0], [163.0, 7.0], [162.0, 8.0], [161.0, 9.333333333333334], [160.0, 12.25], [169.0, 30.0], [170.0, 38.25], [175.0, 188.375], [174.0, 896.5], [172.0, 12.0], [171.0, 1307.0], [176.0, 21.22222222222222], [177.0, 165.0], [183.0, 9.649999999999999], [182.0, 57.3], [181.0, 16.937500000000004], [179.0, 55.826086956521735], [178.0, 138.66666666666666], [186.0, 11.692307692307695], [190.0, 31.0], [191.0, 12.36585365853659], [189.0, 876.8], [185.0, 7.666666666666667], [184.0, 8.631578947368421], [194.0, 80.0], [195.0, 52.49180327868855], [196.0, 48.68421052631578], [197.0, 34.0], [199.0, 140.49999999999997], [198.0, 9.4], [193.0, 8.222222222222221], [192.0, 8.0], [201.0, 10.04166666666667], [205.0, 184.67857142857142], [206.0, 15.0], [207.0, 7.666666666666668], [204.0, 21.0], [202.0, 7.0], [200.0, 8.333333333333334], [209.0, 12.486486486486488], [210.0, 13.799999999999997], [215.0, 52.625], [214.0, 28.71428571428571], [213.0, 26.6], [211.0, 10.413043478260867], [208.0, 8.285714285714286], [223.0, 16.954545454545453], [222.0, 31.09090909090909], [221.0, 7.0], [220.0, 20.571428571428566], [219.0, 26.5], [218.0, 19.25], [217.0, 20.8], [216.0, 7.0], [230.0, 13.362068965517242], [231.0, 11.477272727272728], [229.0, 8.2], [228.0, 7.846153846153847], [227.0, 9.11111111111111], [226.0, 7.833333333333335], [225.0, 9.299999999999999], [224.0, 18.0], [232.0, 18.888888888888886], [235.0, 101.90476190476191], [236.0, 110.63636363636363], [239.0, 112.0625], [238.0, 1538.0], [237.0, 102.02439024390243], [234.0, 86.2], [233.0, 15.142857142857142], [240.0, 54.27272727272728], [241.0, 24.888888888888896], [242.0, 111.3125], [243.0, 10.46153846153846], [247.0, 7.142857142857143], [246.0, 16.444444444444443], [245.0, 8.529411764705882], [244.0, 9.571428571428573], [249.0, 9.375], [250.0, 10.916666666666666], [252.0, 25.428571428571434], [254.0, 81.15625], [253.0, 11.78947368421053], [251.0, 16.03125], [248.0, 7.6], [271.0, 106.75], [266.0, 14.000000000000004], [267.0, 14.530612244897958], [268.0, 22.55555555555555], [259.0, 16.857142857142858], [258.0, 47.44444444444444], [257.0, 31.0], [256.0, 566.8333333333333], [269.0, 76.54545454545455], [270.0, 8.499999999999998], [265.0, 8.461538461538463], [264.0, 11.75], [263.0, 7.857142857142857], [262.0, 8.352941176470587], [261.0, 9.102803738317755], [260.0, 18.0], [273.0, 95.5952380952381], [272.0, 32.285714285714285], [274.0, 100.6], [275.0, 369.79999999999995], [276.0, 115.84210526315789], [277.0, 65.74074074074073], [279.0, 12.423076923076922], [278.0, 10.830188679245282], [281.0, 327.0], [284.0, 18.6], [285.0, 46.0], [286.0, 46.0], [287.0, 443.2142857142857], [280.0, 21.89655172413793], [282.0, 14.944444444444446], [283.0, 48.0], [302.0, 21.099999999999998], [289.0, 9.75], [288.0, 12.0], [295.0, 76.0], [294.0, 21.75], [293.0, 528.375], [290.0, 53.5], [303.0, 91.57894736842104], [297.0, 103.9047619047619], [301.0, 7.0], [300.0, 265.6875], [299.0, 7.0], [298.0, 17.916666666666668], [307.0, 19.807692307692307], [304.0, 116.89473684210525], [305.0, 65.45454545454545], [306.0, 43.9], [308.0, 18.169811320754718], [310.0, 9.894736842105264], [309.0, 8.0], [311.0, 7.333333333333333], [312.0, 12.026315789473687], [314.0, 16.292682926829272], [313.0, 10.178571428571429], [315.0, 12.310344827586208], [316.0, 18.0], [317.0, 7.8], [319.0, 11.42222222222222], [318.0, 9.085714285714284], [334.0, 21.333333333333332], [322.0, 12.0], [321.0, 7.823529411764706], [320.0, 8.166666666666668], [327.0, 31.6938775510204], [326.0, 23.4], [325.0, 22.41935483870969], [324.0, 20.186666666666664], [323.0, 29.4], [335.0, 40.30769230769231], [333.0, 6.5], [332.0, 23.5], [331.0, 19.0], [330.0, 10.166666666666668], [329.0, 11.666666666666666], [328.0, 33.53333333333333], [339.0, 21.374999999999996], [340.0, 12.14285714285714], [341.0, 16.739130434782613], [343.0, 19.375], [338.0, 16.25], [337.0, 7.0], [336.0, 10.976190476190476], [342.0, 7.9], [344.0, 205.36363636363643], [350.0, 17.016393442622956], [351.0, 26.666666666666668], [345.0, 189.66666666666669], [346.0, 120.8125], [347.0, 8.142857142857144], [348.0, 32.46875000000001], [349.0, 17.955555555555556], [355.0, 39.75], [353.0, 27.833333333333336], [352.0, 58.58333333333333], [354.0, 12.035714285714285], [356.0, 9.290909090909091], [358.0, 8.885245901639342], [357.0, 8.4], [359.0, 11.222222222222221], [367.0, 8.484251968503939], [360.0, 8.3], [363.0, 8.0], [361.0, 9.166666666666666], [366.0, 111.80327868852457], [364.0, 52.68027210884354], [382.0, 109.00000000000001], [369.0, 13.913043478260867], [368.0, 12.872340425531915], [371.0, 9.517374517374517], [370.0, 11.90909090909091], [375.0, 437.25], [373.0, 7.5], [372.0, 25.794117647058822], [379.0, 66.8], [380.0, 33.0], [381.0, 268.6666666666667], [383.0, 15.0], [378.0, 7.75], [377.0, 111.89999999999999], [376.0, 18.2], [396.0, 149.75], [386.0, 92.66666666666667], [387.0, 97.75], [390.0, 66.25], [389.0, 51.0], [388.0, 47.166666666666664], [391.0, 203.71428571428572], [385.0, 7.0], [384.0, 14.875], [393.0, 105.1], [394.0, 49.2], [395.0, 60.57142857142858], [398.0, 93.15384615384617], [399.0, 73.5], [392.0, 75.33333333333333], [413.0, 7.777777777777778], [415.0, 10.18055555555555], [408.0, 19.5], [414.0, 7.481481481481483], [412.0, 7.687499999999999], [403.0, 46.0], [402.0, 13.5], [401.0, 27.000000000000004], [400.0, 21.0], [411.0, 11.824999999999998], [410.0, 12.741935483870968], [407.0, 35.25], [406.0, 25.5], [405.0, 18.35714285714286], [404.0, 71.0], [430.0, 43.343283582089555], [420.0, 67.5], [421.0, 17.84090909090909], [423.0, 9.5], [416.0, 10.310344827586206], [418.0, 14.131944444444454], [417.0, 7.882352941176471], [422.0, 14.00934579439252], [431.0, 36.0], [429.0, 40.075], [428.0, 19.093750000000004], [427.0, 14.600000000000003], [426.0, 8.577464788732398], [425.0, 9.020408163265307], [424.0, 10.791666666666668], [447.0, 10.178571428571427], [442.0, 13.111111111111104], [446.0, 25.25], [445.0, 10.172413793103443], [444.0, 8.707070707070704], [435.0, 15.100840336134453], [434.0, 19.333333333333332], [433.0, 33.16666666666667], [432.0, 34.769230769230774], [443.0, 18.900000000000002], [441.0, 12.294117647058824], [440.0, 7.2941176470588225], [439.0, 13.75], [438.0, 9.583333333333336], [437.0, 8.111111111111112], [436.0, 7.735294117647061], [462.0, 127.13483146067415], [455.0, 465.9444444444444], [449.0, 12.333333333333332], [448.0, 11.368421052631579], [451.0, 18.41176470588235], [450.0, 168.99999999999997], [454.0, 69.0], [452.0, 670.0], [457.0, 27.7], [458.0, 52.53846153846155], [460.0, 68.5625], [463.0, 21.749999999999996], [461.0, 20.8], [459.0, 35.25], [456.0, 31.125], [478.0, 13.055155875299755], [479.0, 13.07228915662651], [477.0, 10.43724696356275], [476.0, 27.475409836065566], [475.0, 34.51428571428571], [474.0, 30.81081081081081], [473.0, 19.357142857142854], [472.0, 18.3943661971831], [471.0, 12.292397660818716], [465.0, 7.411764705882354], [464.0, 10.050632911392405], [467.0, 12.780141843971633], [466.0, 10.401574803149611], [470.0, 9.73], [468.0, 8.288135593220337], [494.0, 26.810810810810814], [480.0, 34.252427184466015], [483.0, 125.68750000000001], [482.0, 9.605590062111805], [481.0, 13.12719298245614], [485.0, 185.0], [484.0, 62.333333333333336], [487.0, 110.94444444444443], [489.0, 56.322033898305094], [491.0, 79.0], [490.0, 43.0], [495.0, 109.6], [488.0, 85.6], [493.0, 28.125], [492.0, 65.92307692307693], [510.0, 90.85365853658536], [498.0, 12.039735099337754], [499.0, 33.083333333333336], [501.0, 25.51851851851852], [503.0, 24.4], [497.0, 21.80245022970904], [496.0, 31.722222222222232], [502.0, 25.499999999999996], [511.0, 81.33333333333334], [505.0, 14.214285714285714], [504.0, 16.89473684210526], [509.0, 55.88235294117647], [508.0, 25.11111111111111], [506.0, 25.520000000000003], [507.0, 24.153846153846153], [512.0, 46.523242966185656], [1.0, 2301.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[447.13373615594264, 42.24405970551339]], "isOverall": false, "label": "Post_Request-Aggregated", "isController": false}, {"data": [[2.0, 9.0], [3.0, 1849.0], [5.0, 1242.25], [6.0, 134.5], [8.0, 7.0], [9.0, 722.0], [10.0, 236.62500000000006], [11.0, 9.0], [12.0, 8.0], [13.0, 7.818181818181818], [14.0, 516.5], [15.0, 248.8], [16.0, 7.666666666666667], [18.0, 8.333333333333334], [19.0, 3262.3333333333335], [20.0, 1280.0], [21.0, 12.0], [22.0, 11.0], [23.0, 2021.6], [24.0, 4026.0], [25.0, 118.66666666666666], [26.0, 7.5], [27.0, 783.5000000000001], [28.0, 742.0], [29.0, 603.6], [30.0, 8.0], [32.0, 2855.0], [33.0, 9.0], [35.0, 60.0], [34.0, 744.0], [36.0, 107.83333333333334], [37.0, 110.0], [38.0, 1146.5], [39.0, 146.5], [40.0, 386.625], [41.0, 206.0], [43.0, 145.33333333333331], [42.0, 646.0], [45.0, 161.66666666666669], [46.0, 125.35294117647057], [47.0, 11.0], [48.0, 64.18181818181819], [49.0, 12.0], [50.0, 253.66666666666669], [51.0, 17.5625], [53.0, 27.545454545454547], [52.0, 58.72727272727273], [55.0, 23.61111111111111], [54.0, 38.0], [57.0, 38.33333333333335], [56.0, 33.44444444444444], [58.0, 12.0], [59.0, 40.2], [60.0, 14.6], [61.0, 410.75], [62.0, 34.666666666666664], [63.0, 12.222222222222223], [64.0, 17.654020274961812], [66.0, 220.5], [65.0, 11.0], [69.0, 12.0], [70.0, 55.888888888888886], [71.0, 9.2], [68.0, 9.571428571428571], [72.0, 26.11764705882353], [74.0, 48.0], [75.0, 28.874999999999996], [73.0, 9.25], [76.0, 20.6], [77.0, 15.5], [78.0, 9.0], [79.0, 10.5], [80.0, 60.66666666666667], [82.0, 16.857142857142858], [83.0, 244.5], [81.0, 9.0], [84.0, 25.548387096774203], [85.0, 10.0], [87.0, 8.2], [86.0, 229.75], [89.0, 88.0], [90.0, 17.666666666666668], [91.0, 298.0], [94.0, 25.0], [95.0, 17.555555555555557], [92.0, 39.0], [98.0, 102.25], [96.0, 17.333333333333336], [100.0, 24.0], [103.0, 23.540983606557376], [102.0, 177.11111111111111], [106.0, 25.833333333333332], [107.0, 79.6], [104.0, 12.0], [109.0, 33.75], [110.0, 31.0], [111.0, 18.666666666666668], [108.0, 78.0], [113.0, 38.0], [114.0, 18.285714285714285], [115.0, 21.0], [112.0, 7.333333333333333], [116.0, 16.857142857142858], [117.0, 13.0], [118.0, 9.0], [120.0, 19.333333333333332], [121.0, 15.4], [123.0, 8.0], [122.0, 8.0], [124.0, 13.25], [125.0, 19.4], [126.0, 8.333333333333334], [127.0, 9.166666666666668], [130.0, 15.5], [135.0, 15.0], [134.0, 7.333333333333333], [129.0, 8.0], [128.0, 8.0], [143.0, 7.666666666666667], [141.0, 8.5], [138.0, 8.0], [136.0, 13.333333333333332], [151.0, 12.4], [150.0, 9.0], [149.0, 12.444444444444445], [148.0, 7.0], [147.0, 9.25], [145.0, 7.0], [144.0, 12.5], [157.0, 36.0], [159.0, 128.25], [158.0, 396.6666666666667], [156.0, 8.0], [153.0, 9.285714285714285], [152.0, 12.333333333333334], [165.0, 53.25], [166.0, 10.124999999999998], [163.0, 8.666666666666666], [162.0, 7.0], [161.0, 8.5], [160.0, 11.461538461538462], [169.0, 70.0], [171.0, 64.0], [175.0, 31.125000000000004], [174.0, 979.25], [173.0, 9.5], [177.0, 200.25], [183.0, 19.291666666666664], [182.0, 41.27777777777778], [181.0, 17.818181818181817], [180.0, 164.0], [179.0, 16.176470588235293], [176.0, 23.818181818181817], [184.0, 14.352941176470589], [185.0, 9.333333333333334], [189.0, 297.75], [191.0, 9.08108108108108], [190.0, 7.8], [188.0, 1088.0], [186.0, 9.88888888888889], [192.0, 37.8], [193.0, 16.88888888888889], [194.0, 44.33333333333333], [195.0, 66.1891891891892], [196.0, 54.0], [197.0, 64.84615384615384], [199.0, 165.02941176470588], [198.0, 9.0], [201.0, 22.636363636363633], [206.0, 40.151515151515156], [207.0, 12.2], [205.0, 71.85185185185185], [202.0, 8.5], [200.0, 7.5], [209.0, 15.036144578313257], [210.0, 10.454545454545453], [215.0, 24.5], [214.0, 10.769230769230768], [213.0, 10.0], [211.0, 13.103448275862071], [208.0, 9.142857142857144], [223.0, 47.125], [222.0, 23.818181818181817], [221.0, 52.0], [220.0, 38.266666666666666], [219.0, 9.0], [218.0, 8.499999999999998], [217.0, 21.27272727272727], [216.0, 53.0], [230.0, 20.446153846153834], [231.0, 12.425531914893615], [229.0, 7.666666666666666], [228.0, 8.0], [227.0, 7.846153846153846], [226.0, 12.136363636363635], [225.0, 20.25], [224.0, 11.833333333333332], [232.0, 15.136363636363637], [233.0, 85.71428571428571], [235.0, 158.25], [236.0, 103.77777777777777], [239.0, 147.0], [238.0, 8.0], [237.0, 137.72972972972974], [234.0, 8.666666666666666], [240.0, 71.3529411764706], [241.0, 15.038461538461542], [242.0, 13.0], [243.0, 17.73913043478261], [247.0, 18.500000000000004], [246.0, 10.75], [245.0, 8.222222222222225], [244.0, 7.0], [249.0, 28.142857142857146], [250.0, 10.561797752808985], [255.0, 48.0], [254.0, 37.935483870967744], [253.0, 14.583333333333334], [252.0, 26.307692307692307], [251.0, 14.100000000000001], [248.0, 25.25], [270.0, 20.72222222222222], [266.0, 16.60869565217391], [269.0, 69.41666666666667], [271.0, 108.8], [268.0, 11.055555555555552], [267.0, 11.342105263157894], [265.0, 14.411764705882353], [264.0, 7.9], [263.0, 12.333333333333334], [257.0, 67.5], [256.0, 414.25], [259.0, 14.47826086956522], [258.0, 66.62962962962962], [262.0, 8.589743589743591], [261.0, 10.598214285714285], [260.0, 8.692307692307693], [274.0, 201.5], [273.0, 47.0625], [272.0, 12.785714285714286], [275.0, 161.16666666666666], [284.0, 18.295454545454554], [285.0, 185.09090909090907], [286.0, 78.0], [287.0, 28.500000000000004], [280.0, 10.739130434782608], [276.0, 30.499999999999993], [277.0, 29.434782608695656], [279.0, 10.842105263157894], [278.0, 8.64912280701754], [281.0, 20.0], [282.0, 30.772727272727273], [283.0, 12.526315789473681], [302.0, 18.60377358490566], [289.0, 60.4], [288.0, 14.0], [294.0, 30.187499999999993], [293.0, 184.87500000000003], [290.0, 50.142857142857146], [299.0, 613.0], [303.0, 163.21052631578948], [297.0, 22.4], [301.0, 10.0], [300.0, 131.54545454545453], [298.0, 36.18181818181818], [307.0, 49.81666666666668], [304.0, 151.18181818181816], [305.0, 130.49999999999997], [306.0, 33.333333333333336], [308.0, 16.6923076923077], [310.0, 11.125], [311.0, 7.5], [312.0, 19.568627450980387], [313.0, 12.740740740740742], [315.0, 8.24137931034483], [314.0, 10.266666666666667], [317.0, 11.04761904761905], [319.0, 13.386363636363637], [318.0, 8.904761904761903], [334.0, 14.299999999999999], [323.0, 31.25], [335.0, 16.18181818181818], [332.0, 9.0], [331.0, 36.0], [330.0, 31.866666666666667], [329.0, 18.0], [328.0, 36.83333333333333], [327.0, 33.32142857142857], [320.0, 8.933333333333334], [322.0, 8.428571428571429], [321.0, 8.782608695652177], [326.0, 18.75], [325.0, 16.6774193548387], [324.0, 20.492307692307698], [348.0, 54.105263157894726], [337.0, 367.5], [339.0, 28.423076923076934], [338.0, 20.2], [340.0, 28.234375000000004], [341.0, 26.66666666666667], [343.0, 47.04166666666668], [336.0, 12.083333333333334], [342.0, 10.405405405405409], [344.0, 215.0], [345.0, 288.6], [346.0, 111.12244897959185], [347.0, 10.142857142857142], [351.0, 28.466666666666665], [350.0, 21.57692307692307], [349.0, 10.645833333333332], [355.0, 26.142857142857146], [352.0, 95.60000000000001], [353.0, 17.0], [354.0, 14.88235294117647], [359.0, 17.411764705882355], [358.0, 10.428571428571427], [357.0, 8.666666666666668], [356.0, 11.145454545454536], [360.0, 16.521739130434785], [361.0, 271.4285714285714], [362.0, 127.0], [363.0, 8.0], [367.0, 9.976095617529879], [366.0, 96.59322033898306], [365.0, 8.5], [364.0, 100.9597315436242], [382.0, 156.1875], [368.0, 11.83783783783784], [369.0, 13.92391304347826], [371.0, 10.725190839694656], [370.0, 22.54166666666666], [375.0, 35.8], [373.0, 20.0], [372.0, 9.233333333333333], [377.0, 31.833333333333336], [378.0, 75.25], [379.0, 90.3846153846154], [380.0, 67.52631578947368], [381.0, 292.55555555555554], [383.0, 19.0], [376.0, 269.1428571428571], [396.0, 139.74999999999997], [384.0, 43.85714285714286], [386.0, 221.0], [385.0, 35.5], [387.0, 17.875000000000004], [390.0, 191.5], [389.0, 8.5], [388.0, 63.5], [391.0, 364.5], [393.0, 97.0], [394.0, 35.7], [399.0, 53.75], [392.0, 42.0], [398.0, 29.000000000000004], [395.0, 37.875], [413.0, 11.548387096774194], [404.0, 100.0], [406.0, 23.0], [405.0, 28.7], [411.0, 24.92857142857143], [415.0, 8.771084337349398], [414.0, 7.930232558139536], [412.0, 7.181818181818182], [403.0, 55.33333333333333], [402.0, 82.0], [401.0, 39.0], [400.0, 7.0], [410.0, 24.463414634146346], [408.0, 10.0], [407.0, 18.66666666666667], [430.0, 30.14754098360656], [418.0, 15.649350649350657], [417.0, 8.181818181818182], [416.0, 17.33333333333333], [423.0, 7.0], [422.0, 18.737864077669904], [421.0, 15.37837837837838], [431.0, 18.64285714285714], [429.0, 31.51282051282052], [428.0, 33.31034482758621], [427.0, 13.826923076923071], [426.0, 14.493150684931509], [425.0, 11.549999999999999], [424.0, 8.96153846153846], [446.0, 10.0], [442.0, 16.630303030303022], [443.0, 16.17647058823529], [447.0, 7.9411764705882355], [445.0, 9.363636363636365], [444.0, 13.198113207547179], [441.0, 9.94285714285714], [440.0, 8.0], [439.0, 22.642857142857142], [433.0, 11.875], [432.0, 49.90909090909091], [435.0, 13.07017543859649], [434.0, 20.73333333333333], [438.0, 9.421052631578949], [437.0, 8.166666666666666], [436.0, 7.884615384615382], [462.0, 196.71171171171184], [451.0, 64.23529411764706], [450.0, 32.15384615384616], [449.0, 15.35714285714286], [448.0, 15.454545454545453], [455.0, 270.68965517241384], [454.0, 7.5], [452.0, 294.28571428571433], [457.0, 37.71428571428572], [458.0, 24.979166666666664], [459.0, 58.50000000000001], [460.0, 83.42857142857139], [463.0, 18.31578947368421], [461.0, 10.5], [456.0, 27.250000000000004], [479.0, 11.293577981651374], [466.0, 10.223214285714283], [471.0, 12.194630872483222], [465.0, 7.296296296296297], [464.0, 8.121621621621621], [470.0, 8.907563025210086], [469.0, 10.0], [468.0, 13.937500000000002], [473.0, 59.666666666666664], [472.0, 18.777777777777786], [478.0, 13.691211401425173], [477.0, 10.345679012345682], [476.0, 31.269841269841283], [467.0, 14.821192052980132], [475.0, 26.96969696969697], [474.0, 38.7837837837838], [482.0, 9.891025641025651], [480.0, 33.773913043478274], [481.0, 8.453744493392076], [483.0, 241.19512195121945], [492.0, 74.78260869565217], [494.0, 83.63888888888889], [493.0, 22.18181818181818], [495.0, 98.04347826086955], [484.0, 68.41666666666669], [485.0, 96.66666666666667], [487.0, 117.72727272727278], [486.0, 52.0], [488.0, 73.22222222222223], [489.0, 53.349999999999994], [491.0, 138.33333333333331], [490.0, 70.0], [509.0, 71.625], [498.0, 12.527272727272724], [499.0, 35.0], [501.0, 36.63636363636364], [500.0, 15.0], [503.0, 116.44444444444441], [497.0, 26.23224852071005], [496.0, 41.77777777777777], [502.0, 18.210526315789476], [506.0, 26.208333333333336], [505.0, 19.5], [504.0, 26.041666666666675], [511.0, 93.43478260869566], [510.0, 65.59259259259258], [508.0, 24.959999999999997], [507.0, 43.69230769230769], [512.0, 46.547958090761455], [1.0, 295.0]], "isOverall": false, "label": "Get_Request", "isController": false}, {"data": [[447.06730714430637, 42.36859932541414]], "isOverall": false, "label": "Get_Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 512.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 53823.816666666666, "minX": 1.62512562E12, "maxY": 2.15790997E7, "series": [{"data": [[1.6251258E12, 1.1210820133333333E7], [1.62512562E12, 368401.88333333336], [1.62512574E12, 2.15790997E7], [1.62512568E12, 3454413.6333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6251258E12, 1741069.9333333333], [1.62512562E12, 53823.816666666666], [1.62512574E12, 3351358.1], [1.62512568E12, 534871.1666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6251258E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16.80273562274974, "minX": 1.62512562E12, "maxY": 173.20532434062565, "series": [{"data": [[1.6251258E12, 17.002559947193255], [1.62512562E12, 81.08168795973688], [1.62512574E12, 33.82435589982773], [1.62512568E12, 172.84406206156615]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.6251258E12, 16.80273562274974], [1.62512562E12, 87.08299075025674], [1.62512574E12, 33.90689178406536], [1.62512568E12, 173.20532434062565]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6251258E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16.785237114099882, "minX": 1.62512562E12, "maxY": 173.17151943850624, "series": [{"data": [[1.6251258E12, 16.985571206729272], [1.62512562E12, 81.04761904761916], [1.62512574E12, 33.80059216990528], [1.62512568E12, 172.8131000522694]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.6251258E12, 16.785237114099882], [1.62512562E12, 87.05010277492302], [1.62512574E12, 33.88202658413613], [1.62512568E12, 173.17151943850624]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6251258E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62512562E12, "maxY": 8.518627954778987, "series": [{"data": [[1.6251258E12, 0.0], [1.62512562E12, 0.0], [1.62512574E12, 0.017382626605442503], [1.62512568E12, 0.0]], "isOverall": false, "label": "Post_Request", "isController": false}, {"data": [[1.6251258E12, 0.013238112564149413], [1.62512562E12, 8.518627954778987], [1.62512574E12, 0.014795585283986822], [1.62512568E12, 0.3272742227340075]], "isOverall": false, "label": "Get_Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6251258E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.62512562E12, "maxY": 7297.0, "series": [{"data": [[1.6251258E12, 3659.0], [1.62512562E12, 2480.0], [1.62512574E12, 2755.0], [1.62512568E12, 7297.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6251258E12, 10.0], [1.62512562E12, 281.0], [1.62512574E12, 63.0], [1.62512568E12, 235.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6251258E12, 56.0], [1.62512562E12, 1003.6599999999999], [1.62512574E12, 98.0], [1.62512568E12, 1205.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6251258E12, 11.0], [1.62512562E12, 398.0], [1.62512574E12, 79.0], [1.62512568E12, 573.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6251258E12, 3.0], [1.62512562E12, 4.0], [1.62512574E12, 3.0], [1.62512568E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6251258E12, 8.0], [1.62512562E12, 8.0], [1.62512574E12, 7.0], [1.62512568E12, 10.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6251258E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 29.0, "maxY": 3163.0, "series": [{"data": [[17279.0, 8.0], [16947.0, 8.0], [20099.0, 8.0], [19959.0, 8.0], [19859.0, 8.0], [23291.0, 8.0], [24283.0, 8.0], [29.0, 3163.0], [8847.0, 11.0], [9779.0, 14.0], [10719.0, 11.0], [10831.0, 11.0], [12007.0, 10.0], [13557.0, 10.0], [14509.0, 10.0], [14517.0, 9.0], [14809.0, 9.0], [15085.0, 10.0], [15713.0, 9.0], [15929.0, 9.0], [16786.0, 8.0], [18346.0, 8.0], [19654.0, 8.0], [21130.0, 8.0], [21730.0, 8.0], [22478.0, 8.0], [23178.0, 7.0], [23390.0, 8.0], [23902.0, 7.0], [25306.0, 8.0], [176.0, 9.0], [423.0, 7.0], [443.0, 7.0], [471.0, 7.0], [493.0, 7.0], [541.0, 7.0], [539.0, 7.0], [542.0, 8.0], [558.0, 9.0], [559.0, 7.0], [587.0, 8.0], [582.0, 7.0], [620.0, 7.0], [737.0, 9.0], [790.0, 8.0], [792.0, 8.0], [840.0, 8.0], [838.0, 9.0], [860.0, 8.0], [850.0, 8.0], [908.0, 9.0], [898.0, 8.0], [923.0, 8.0], [906.0, 8.0], [933.0, 9.0], [964.0, 9.0], [975.0, 8.0], [1007.0, 8.0], [1042.0, 9.0], [1100.0, 8.0], [17537.0, 8.0], [1237.0, 69.0], [20045.0, 8.0], [21161.0, 8.0], [1352.0, 272.0], [1387.0, 237.0], [1402.0, 208.0], [21529.0, 8.0], [22313.0, 8.0], [1456.0, 198.0], [1457.0, 198.0], [23045.0, 8.0], [23157.0, 7.0], [22625.0, 8.0], [1495.0, 208.0], [24081.0, 8.0], [1596.0, 212.0], [1655.0, 205.0], [25745.0, 8.0], [1767.0, 202.0], [1788.0, 189.0], [1772.0, 10.0], [1868.0, 167.5], [1892.0, 68.0], [1903.0, 11.0], [1869.0, 11.0], [1919.0, 13.0], [1957.0, 194.0], [1983.0, 11.0], [1966.0, 12.0], [2000.0, 10.0], [2057.0, 88.0], [2165.0, 14.0], [2208.0, 12.0], [2388.0, 12.0], [2352.0, 9.0], [2439.0, 13.0], [2492.0, 12.0], [2667.0, 13.0], [2894.0, 13.0], [2906.0, 12.0], [3069.0, 12.0], [3222.0, 12.0], [3373.0, 12.0], [3575.0, 11.0], [3695.0, 12.0], [3735.0, 8.0], [3928.0, 12.0], [3841.0, 11.0], [3956.0, 11.0], [3874.0, 11.0], [3970.0, 11.0], [4339.0, 11.0], [4604.0, 11.0], [4443.0, 8.0], [4702.0, 11.0], [4711.0, 11.0], [4689.0, 8.0], [4829.0, 8.0], [4976.0, 11.0], [5017.0, 10.0], [5247.0, 8.0], [5387.0, 11.0], [5514.0, 11.0], [5567.0, 10.0], [5826.0, 8.0], [5639.0, 8.0], [5829.0, 8.0], [6232.0, 8.0], [6372.0, 8.0], [6220.0, 8.0], [6500.0, 10.0], [6429.0, 10.0], [6525.0, 11.0], [6649.0, 8.0], [6431.0, 8.0], [6873.0, 8.0], [6891.0, 8.0], [6936.0, 8.0], [6925.0, 8.0], [7048.0, 8.0], [7149.0, 8.0], [7151.0, 8.0], [7098.0, 8.0], [7182.0, 8.0], [7174.0, 8.0], [7334.0, 8.0], [7390.0, 8.0], [7206.0, 8.0], [7331.0, 8.0], [7242.0, 8.0], [7296.0, 8.0], [7208.0, 8.0], [7591.0, 11.0], [7845.0, 11.0], [8484.0, 11.0], [9652.0, 11.0], [9618.0, 15.0], [10226.0, 11.0], [10660.0, 12.0], [11140.0, 11.0], [11400.0, 10.0], [12608.0, 10.0], [13034.0, 10.0], [13234.0, 10.0], [13702.0, 10.0], [13454.0, 10.0], [14132.0, 10.0], [14228.0, 10.0], [14360.0, 10.0], [14716.0, 10.0], [14772.0, 10.0], [14698.0, 9.0], [15210.0, 10.0], [14874.0, 10.0], [15608.0, 9.0], [15846.0, 8.0], [16956.0, 9.0], [21720.0, 8.0], [21520.0, 8.0], [22680.0, 8.0], [24144.0, 7.0], [23916.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25745.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 7.0, "minX": 29.0, "maxY": 3163.0, "series": [{"data": [[17279.0, 8.0], [16947.0, 8.0], [20099.0, 8.0], [19959.0, 8.0], [19859.0, 8.0], [23291.0, 8.0], [24283.0, 8.0], [29.0, 3163.0], [8847.0, 11.0], [9779.0, 14.0], [10719.0, 11.0], [10831.0, 11.0], [12007.0, 10.0], [13557.0, 10.0], [14509.0, 10.0], [14517.0, 9.0], [14809.0, 9.0], [15085.0, 10.0], [15713.0, 9.0], [15929.0, 9.0], [16786.0, 8.0], [18346.0, 8.0], [19654.0, 8.0], [21130.0, 8.0], [21730.0, 8.0], [22478.0, 8.0], [23178.0, 7.0], [23390.0, 8.0], [23902.0, 7.0], [25306.0, 8.0], [176.0, 9.0], [423.0, 7.0], [443.0, 7.0], [471.0, 7.0], [493.0, 7.0], [541.0, 7.0], [539.0, 7.0], [542.0, 8.0], [558.0, 9.0], [559.0, 7.0], [587.0, 8.0], [582.0, 7.0], [620.0, 7.0], [737.0, 9.0], [790.0, 8.0], [792.0, 8.0], [840.0, 8.0], [838.0, 9.0], [860.0, 8.0], [850.0, 8.0], [908.0, 9.0], [898.0, 8.0], [923.0, 8.0], [906.0, 8.0], [933.0, 9.0], [964.0, 9.0], [975.0, 8.0], [1007.0, 8.0], [1042.0, 9.0], [1100.0, 8.0], [17537.0, 8.0], [1237.0, 69.0], [20045.0, 8.0], [21161.0, 8.0], [1352.0, 272.0], [1387.0, 237.0], [1402.0, 208.0], [21529.0, 8.0], [22313.0, 8.0], [1456.0, 198.0], [1457.0, 198.0], [23045.0, 8.0], [23157.0, 7.0], [22625.0, 8.0], [1495.0, 208.0], [24081.0, 8.0], [1596.0, 212.0], [1655.0, 205.0], [25745.0, 8.0], [1767.0, 202.0], [1788.0, 189.0], [1772.0, 10.0], [1868.0, 167.5], [1892.0, 68.0], [1903.0, 11.0], [1869.0, 11.0], [1919.0, 13.0], [1957.0, 194.0], [1983.0, 11.0], [1966.0, 12.0], [2000.0, 10.0], [2057.0, 88.0], [2165.0, 14.0], [2208.0, 12.0], [2388.0, 12.0], [2352.0, 8.0], [2439.0, 13.0], [2492.0, 12.0], [2667.0, 12.0], [2894.0, 13.0], [2906.0, 12.0], [3069.0, 11.0], [3222.0, 12.0], [3373.0, 11.0], [3575.0, 11.0], [3695.0, 12.0], [3735.0, 8.0], [3928.0, 12.0], [3841.0, 11.0], [3956.0, 11.0], [3874.0, 11.0], [3970.0, 11.0], [4339.0, 11.0], [4604.0, 11.0], [4443.0, 8.0], [4702.0, 11.0], [4711.0, 11.0], [4689.0, 8.0], [4829.0, 8.0], [4976.0, 11.0], [5017.0, 10.0], [5247.0, 8.0], [5387.0, 11.0], [5514.0, 11.0], [5567.0, 10.0], [5826.0, 8.0], [5639.0, 8.0], [5829.0, 8.0], [6232.0, 8.0], [6372.0, 8.0], [6220.0, 8.0], [6500.0, 10.0], [6429.0, 10.0], [6525.0, 11.0], [6649.0, 8.0], [6431.0, 8.0], [6873.0, 8.0], [6891.0, 8.0], [6936.0, 8.0], [6925.0, 8.0], [7048.0, 8.0], [7149.0, 8.0], [7151.0, 8.0], [7098.0, 8.0], [7182.0, 8.0], [7174.0, 8.0], [7334.0, 8.0], [7390.0, 8.0], [7206.0, 8.0], [7331.0, 8.0], [7242.0, 8.0], [7296.0, 8.0], [7208.0, 8.0], [7591.0, 11.0], [7845.0, 11.0], [8484.0, 11.0], [9652.0, 11.0], [9618.0, 15.0], [10226.0, 11.0], [10660.0, 12.0], [11140.0, 11.0], [11400.0, 10.0], [12608.0, 10.0], [13034.0, 10.0], [13234.0, 10.0], [13702.0, 10.0], [13454.0, 10.0], [14132.0, 10.0], [14228.0, 10.0], [14360.0, 10.0], [14716.0, 10.0], [14772.0, 10.0], [14698.0, 9.0], [15210.0, 10.0], [14874.0, 10.0], [15608.0, 9.0], [15846.0, 8.0], [16956.0, 9.0], [21720.0, 8.0], [21520.0, 8.0], [22680.0, 8.0], [24144.0, 7.0], [23916.0, 8.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 25745.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 259.95, "minX": 1.62512562E12, "maxY": 15164.45, "series": [{"data": [[1.6251258E12, 7869.8], [1.62512562E12, 259.95], [1.62512574E12, 15164.45], [1.62512568E12, 2434.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6251258E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 258.8833333333333, "minX": 1.62512562E12, "maxY": 15164.5, "series": [{"data": [[1.6251258E12, 7878.266666666666], [1.62512562E12, 258.8833333333333], [1.62512574E12, 15164.5], [1.62512568E12, 2427.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6251258E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 129.15, "minX": 1.62512562E12, "maxY": 7582.283333333334, "series": [{"data": [[1.6251258E12, 3939.383333333333], [1.62512562E12, 129.73333333333332], [1.62512574E12, 7582.216666666666], [1.62512568E12, 1215.8]], "isOverall": false, "label": "Get_Request-success", "isController": false}, {"data": [[1.6251258E12, 3938.883333333333], [1.62512562E12, 129.15], [1.62512574E12, 7582.283333333334], [1.62512568E12, 1211.7]], "isOverall": false, "label": "Post_Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6251258E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 258.8833333333333, "minX": 1.62512562E12, "maxY": 15164.5, "series": [{"data": [[1.6251258E12, 7878.266666666666], [1.62512562E12, 258.8833333333333], [1.62512574E12, 15164.5], [1.62512568E12, 2427.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6251258E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

